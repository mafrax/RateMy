// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  firstName String?
  lastName  String?
  password  String
  avatar    String?
  city      String?
  birthDay  DateTime?
  gender    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  videos    Video[]
  ratings   Rating[]
  followers Follow[] @relation("UserFollowers")
  following Follow[] @relation("UserFollowing")

  @@map("users")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  originalUrl String
  embedUrl    String
  thumbnail   String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags    VideoTag[]
  ratings Rating[]

  @@map("videos")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  // Relations
  videos  VideoTag[]
  ratings Rating[]

  @@map("tags")
}

model VideoTag {
  id      String @id @default(cuid())
  videoId String
  tagId   String

  // Relations
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([videoId, tagId])
  @@map("video_tags")
}

model Rating {
  id        String   @id @default(cuid())
  level     Float
  videoId   String
  userId    String
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([videoId, userId, tagId])
  @@map("ratings")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}