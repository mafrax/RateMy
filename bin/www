#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('testserver:server');
var http = require('http');
var sharedsession = require("express-socket.io-session");
var session = require('express-session');
var redis = require('redis');
var redisClient = redis.createClient();
var redisStore = require('connect-redis')(session);
var Promise    = require('bluebird');
Promise.promisifyAll(redis);

redisClient.on('error', (err) => {
  console.log('Redis error: ', err);
});


var redisInit = function() {
  console.log("in redis init")
  var client = redis.createClient();
  return client.getAsync('ready')
  .then(function() {
    console.log("in promise ")
    return Promise.resolve(client);
  });
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


// Chargement de socket.io
var io = require('socket.io').listen(server);
// Quand un client se connecte, on le note dans la console

var handler = require('../models/serverEvents')(io);
app.set("io",io);

var session = app.get("sessionMW")

redisInit().then(function(client) {
  console.log("in sessions init")
  var sessionMiddleware = session({
    secret: 'keyboard cat',
    resave: true,
    name: 'sessionId',
    saveUninitialized: true,
    cookie: { maxAge: 60000 },
    store: new redisStore({ client:client }),
  });

  io.use(sessionMiddleware);
  
  
  app.use(sessionMiddleware);
  app.set("sessionMW", sessionMiddleware);
  
  
  
});



// io.use(sharedsession(app.get("sessionMW"), {
//   autoSave:true}));


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
