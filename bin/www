#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('testserver:server');
var http = require('http');
var sharedsession = require("express-socket.io-session");
var cookie = require('cookie');
var cookieParser = require('cookie-parser');
var Session = require('connect');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


// Chargement de socket.io
var io = require('socket.io').listen(server);
// Quand un client se connecte, on le note dans la console

var handler = require('../models/serverEvents')(io);
app.set("io",io);

var session= app.get("sessionMW");

var socketmiddleware = function(socket, next) {
  session(socket.handshake, socket.request.res, next);
  // var handshakeData = socket.request;
  // var parsedCookie = cookie.parse(handshakeData.headers.cookie);
  // var sid = cookieParser.signedCookie (parsedCookie['connect.sid'], config.secret);
}

// io.use(socketmiddleware);

app.use(session);
io.use(sharedsession(app.get("sessionMW"), {
  autoSave:true}));

  io.set('authorization', function (data, accept ) {
    var parsedCookie = cookie.parse(data.headers.cookie);
    var truc = cookieParser.signedCookie (parsedCookie['express.sid'], 'keyboard cat');
    console.log('truc');
    console.log(truc);
    data.sessionID = cookieParser.signedCookie (parsedCookie['express.sid'], 'keyboard cat');
    app.get('store').get(data.sessionID, function(err, session) {
      if ( err || !session ) {
        return accept("Invalid session", false);
      }
      data.session = new Session(data, session);
      accept(null,true);
    });
  });



require('../routes/index.js')(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
