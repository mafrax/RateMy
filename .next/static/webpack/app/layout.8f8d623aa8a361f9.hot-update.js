"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"033b934db916\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2dsb2JhbHMuY3NzP2Q1YzYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIwMzNiOTM0ZGI5MTZcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./contexts/RatingCacheContext.tsx":
/*!*****************************************!*\
  !*** ./contexts/RatingCacheContext.tsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RatingCacheProvider: function() { return /* binding */ RatingCacheProvider; },\n/* harmony export */   useRatingCache: function() { return /* binding */ useRatingCache; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-auth/react */ \"(app-pages-browser)/./node_modules/next-auth/react/index.js\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_auth_react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ RatingCacheProvider,useRatingCache auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\nconst RatingCacheContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst DEFAULT_DEBOUNCE_DELAY = 3000 // 3 seconds\n;\nconst MAX_CACHE_AGE = 30000 // 30 seconds max age before forced flush\n;\nconst STORAGE_KEY = \"ratemy_pending_ratings\";\nconst DEBOUNCE_DELAY_KEY = \"ratemy_debounce_delay\";\nfunction RatingCacheProvider(param) {\n    let { children } = param;\n    _s();\n    const { data: session } = (0,next_auth_react__WEBPACK_IMPORTED_MODULE_2__.useSession)();\n    const [pendingRatings, setPendingRatings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const [debounceTimer, setDebounceTimer] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [debounceDelay, setDebounceDelayState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(DEFAULT_DEBOUNCE_DELAY);\n    const [isInitialized, setIsInitialized] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Use a ref to avoid stale closure issues with the timer\n    const flushPendingRatingsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Generate cache key for a rating\n    const getCacheKey = (videoId, tagId)=>\"\".concat(videoId, \":\").concat(tagId);\n    // Load pending ratings from localStorage\n    const loadFromStorage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (false) {}\n        try {\n            const stored = localStorage.getItem(STORAGE_KEY);\n            if (!stored) return new Map();\n            const parsed = JSON.parse(stored);\n            const ratingsMap = new Map(parsed);\n            // Filter out old ratings\n            const now = Date.now();\n            const filteredMap = new Map();\n            ratingsMap.forEach((rating, key)=>{\n                if (now - rating.timestamp <= MAX_CACHE_AGE) {\n                    filteredMap.set(key, rating);\n                }\n            });\n            return filteredMap;\n        } catch (error) {\n            console.warn(\"Failed to load pending ratings from storage:\", error);\n            return new Map();\n        }\n    }, []);\n    // Save pending ratings to localStorage\n    const saveToStorage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((ratings)=>{\n        if (false) {}\n        try {\n            const ratingsArray = Array.from(ratings.entries());\n            localStorage.setItem(STORAGE_KEY, JSON.stringify(ratingsArray));\n        } catch (error) {\n            console.warn(\"Failed to save pending ratings to storage:\", error);\n        }\n    }, []);\n    // Clear storage\n    const clearStorage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (false) {}\n        try {\n            localStorage.removeItem(STORAGE_KEY);\n        } catch (error) {\n            console.warn(\"Failed to clear pending ratings from storage:\", error);\n        }\n    }, []);\n    // Set a cached rating (will be saved to DB after debounce delay)\n    const setCachedRating = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((videoId, tagId, rating)=>{\n        if (!session) return;\n        const timestamp = new Date().toISOString().split(\"T\")[1].split(\".\")[0];\n        console.log(\"⭐ [\".concat(timestamp, \"] SETTING CACHED RATING: \").concat(videoId, \":\").concat(tagId, \" = \").concat(rating));\n        const key = getCacheKey(videoId, tagId);\n        const pendingRating = {\n            videoId,\n            tagId,\n            rating,\n            timestamp: Date.now()\n        };\n        setPendingRatings((prev)=>{\n            const newMap = new Map(prev);\n            newMap.set(key, pendingRating);\n            // Save to localStorage immediately\n            saveToStorage(newMap);\n            return newMap;\n        });\n        // Reset debounce timer\n        if (debounceTimer) {\n            console.log(\"⏰ Clearing existing timer for new rating: \".concat(videoId, \":\").concat(tagId));\n            clearTimeout(debounceTimer);\n        }\n        const newTimer = setTimeout(()=>{\n            console.log(\"⏰ Timer expired, flushing all pending ratings\");\n            // Use ref to avoid stale closure\n            if (flushPendingRatingsRef.current) {\n                flushPendingRatingsRef.current();\n            }\n        }, debounceDelay);\n        console.log(\"⏰ Set new timer for \".concat(debounceDelay, \"ms\"));\n        setDebounceTimer(newTimer);\n    }, [\n        session,\n        debounceTimer,\n        saveToStorage,\n        debounceDelay\n    ]);\n    // Get cached rating value\n    const getCachedRating = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((videoId, tagId)=>{\n        const key = getCacheKey(videoId, tagId);\n        const pending = pendingRatings.get(key);\n        if (pending) {\n            // Validate that the cached rating matches the requested video/tag\n            if (pending.videoId !== videoId || pending.tagId !== tagId) {\n                console.error(\"\\uD83D\\uDEA8 CACHED RATING MISMATCH: requested \".concat(videoId, \":\").concat(tagId, \", got \").concat(pending.videoId, \":\").concat(pending.tagId, \", removing corrupt cache entry\"));\n                // Remove the corrupt cache entry\n                const corruptedKey = key;\n                setPendingRatings((prev)=>{\n                    const cleaned = new Map(prev);\n                    cleaned.delete(corruptedKey);\n                    return cleaned;\n                });\n                return null;\n            }\n            console.log(\"\\uD83D\\uDCCA [\".concat(new Date().toISOString().split(\"T\")[1].split(\".\")[0], \"] Cache hit: \").concat(videoId, \":\").concat(tagId, \" = \").concat(pending.rating));\n            return pending.rating;\n        }\n        return null;\n    }, [\n        pendingRatings,\n        setPendingRatings\n    ]);\n    // Check if there's a pending rating\n    const hasPendingRating = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((videoId, tagId)=>{\n        const key = getCacheKey(videoId, tagId);\n        const rating = pendingRatings.get(key);\n        if (!rating) return false;\n        // Validate that the cached rating matches the requested video/tag\n        if (rating.videoId !== videoId || rating.tagId !== tagId) {\n            console.error(\"\\uD83D\\uDEA8 PENDING RATING MISMATCH: requested \".concat(videoId, \":\").concat(tagId, \", got \").concat(rating.videoId, \":\").concat(rating.tagId));\n            return false;\n        }\n        // Check if this is an expired \"saved\" rating\n        const now = Date.now();\n        if (rating.timestamp > now && rating.timestamp - now < 6000) {\n            // This is a saved rating that's temporarily kept to prevent visual revert\n            // Don't show it as pending since it's already saved\n            return false;\n        }\n        return true;\n    }, [\n        pendingRatings\n    ]);\n    // Flush all pending ratings to database using bulk API\n    const flushPendingRatings = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        if (pendingRatings.size === 0 || !session) return;\n        // Only flush actual pending ratings, not temporarily saved ones\n        const now = Date.now();\n        const actualPendingRatings = Array.from(pendingRatings.values()).filter((rating)=>rating.timestamp <= now // Normal pending ratings have past timestamps\n        );\n        console.log(\"\\uD83D\\uDD0D FLUSH ANALYSIS: Total cache entries=\".concat(pendingRatings.size, \", Actual pending=\").concat(actualPendingRatings.length));\n        actualPendingRatings.forEach((rating)=>{\n            console.log(\"   → \".concat(rating.videoId, \":\").concat(rating.tagId, \" = \").concat(rating.rating, \" (age: \").concat((now - rating.timestamp) / 1000, \"s)\"));\n        });\n        if (actualPendingRatings.length === 0) {\n            console.log(\"\\uD83D\\uDE80 No actual pending ratings to flush (only saved ones)\");\n            return;\n        }\n        console.log(\"\\uD83D\\uDE80 FLUSHING RATINGS:\", actualPendingRatings.length, \"actual pending ratings out of\", pendingRatings.size, \"total\");\n        const ratingsToSave = actualPendingRatings;\n        try {\n            var _result_data, _result_data1, _result_data2, _result_data3, _result_data_errors, _result_data4;\n            // Use bulk flush API for better performance\n            const response = await fetch(\"/api/ratings/flush\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                credentials: \"include\",\n                body: JSON.stringify(ratingsToSave.map((rating)=>({\n                        videoId: rating.videoId,\n                        tagId: rating.tagId,\n                        rating: rating.rating,\n                        timestamp: rating.timestamp\n                    })))\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(errorData.message || \"HTTP \".concat(response.status, \": Failed to flush ratings\"));\n            }\n            const result = await response.json();\n            // Add detailed API response logging\n            console.log(\"\\uD83D\\uDCE1 FULL API RESPONSE:\", JSON.stringify(result, null, 2));\n            console.log(\"\\uD83D\\uDCCA API Response Summary:\", {\n                success: result.success,\n                processed: (_result_data = result.data) === null || _result_data === void 0 ? void 0 : _result_data.processed,\n                successful: (_result_data1 = result.data) === null || _result_data1 === void 0 ? void 0 : _result_data1.successful,\n                failed: (_result_data2 = result.data) === null || _result_data2 === void 0 ? void 0 : _result_data2.failed,\n                hasErrors: !!(((_result_data3 = result.data) === null || _result_data3 === void 0 ? void 0 : _result_data3.errors) && result.data.errors.length > 0),\n                errorCount: ((_result_data4 = result.data) === null || _result_data4 === void 0 ? void 0 : (_result_data_errors = _result_data4.errors) === null || _result_data_errors === void 0 ? void 0 : _result_data_errors.length) || 0,\n                message: result.message,\n                error: result.error\n            });\n            if (!result.success) {\n                console.error(\"❌ API ERROR DETAILS:\", result);\n                throw new Error(result.message || \"Failed to save ratings\");\n            }\n            // Notify components that ratings were saved before clearing the cache\n            // Note: Removed automatic callback execution to prevent unwanted page refreshes\n            // Components can manually check for rating updates or use server-side caching instead\n            const { successful, failed, results, errors } = result.data;\n            // Only clear successfully saved ratings from cache\n            const successfulKeys = new Set();\n            const failedKeys = new Set();\n            // Process successful results\n            if (results && Array.isArray(results)) {\n                console.log(\"✅ Successfully saved ratings:\", results.length);\n                results.forEach((result)=>{\n                    const key = getCacheKey(result.videoId, result.tagId);\n                    console.log(\"✅ Success: \".concat(result.videoId, \":\").concat(result.tagId, \" (key: \").concat(key, \")\"));\n                    successfulKeys.add(key);\n                });\n            }\n            // Process failed results  \n            if (errors && Array.isArray(errors)) {\n                console.log(\"❌ Failed to save ratings:\", errors.length);\n                errors.forEach((error)=>{\n                    const key = getCacheKey(error.videoId, error.tagId);\n                    console.log(\"❌ Failed: \".concat(error.videoId, \":\").concat(error.tagId, \" - \").concat(error.error));\n                    failedKeys.add(key);\n                });\n            }\n            // Update pending ratings - keep successful ones as \"saved\" for a short time\n            // to prevent visual reversion until components get fresh data\n            const newPendingRatings = new Map();\n            console.log(\"\\uD83E\\uDDF9 Clearing cache: before =\", pendingRatings.size, \"successful =\", successfulKeys.size, \"failed =\", failedKeys.size);\n            pendingRatings.forEach((rating, key)=>{\n                const expectedKey = getCacheKey(rating.videoId, rating.tagId);\n                if (key !== expectedKey) {\n                    console.error(\"\\uD83D\\uDEA8 CACHE KEY MISMATCH: stored key=\".concat(key, \", expected=\").concat(expectedKey));\n                }\n                // Check if this specific rating was in the batch that was flushed\n                const wasInFlushBatch = ratingsToSave.some((flushedRating)=>flushedRating.videoId === rating.videoId && flushedRating.tagId === rating.tagId);\n                if (failedKeys.has(key)) {\n                    // Keep ratings that failed to save - they need to be retried\n                    console.log(\"\\uD83D\\uDD04 Keeping failed rating in cache: \".concat(rating.videoId, \":\").concat(rating.tagId));\n                    newPendingRatings.set(key, rating);\n                } else if (successfulKeys.has(key) && wasInFlushBatch) {\n                    // Only mark as temporarily saved if it was actually in the flush batch\n                    console.log(\"✅ Keeping successful rating temporarily: \".concat(rating.videoId, \":\").concat(rating.tagId));\n                    newPendingRatings.set(key, {\n                        ...rating,\n                        timestamp: Date.now() + 5000 // Mark as saved, will auto-expire in 5 seconds (longer to handle component re-renders)\n                    });\n                } else if (!wasInFlushBatch) {\n                    // This rating wasn't in the flush batch, so keep it as-is\n                    console.log(\"\\uD83D\\uDD04 Keeping unflushed rating: \".concat(rating.videoId, \":\").concat(rating.tagId));\n                    newPendingRatings.set(key, rating);\n                } else {\n                    console.log(\"⚠️ Rating not in success or fail list: \".concat(rating.videoId, \":\").concat(rating.tagId, \" (key: \").concat(key, \")\"));\n                    // Keep unknown ratings to be safe\n                    newPendingRatings.set(key, rating);\n                }\n            });\n            setPendingRatings(newPendingRatings);\n            // Update localStorage storage\n            if (newPendingRatings.size === 0) {\n                clearStorage();\n            } else {\n                saveToStorage(newPendingRatings);\n            }\n            // Clear debounce timer only if all ratings were processed\n            if (failed === 0 && debounceTimer) {\n                clearTimeout(debounceTimer);\n                setDebounceTimer(null);\n            }\n            // Log success with detailed info\n            console.log(\"Bulk rating flush completed: \".concat(successful, \" successful, \").concat(failed, \" failed out of \").concat(ratingsToSave.length, \" total\"));\n            if (failed > 0) {\n                console.warn(\"Some ratings failed to save:\", errors);\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].error(\"\".concat(failed, \" ratings could not be saved. They will be retried automatically.\"));\n            }\n        } catch (error) {\n            console.error(\"Error flushing pending ratings:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].error(\"Some ratings could not be saved. Please try again.\");\n        // Don't clear cache on error - allow retry\n        }\n    }, [\n        pendingRatings,\n        session,\n        debounceTimer,\n        clearStorage\n    ]);\n    // Assign the function to the ref to avoid stale closure issues\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        flushPendingRatingsRef.current = flushPendingRatings;\n    }, [\n        flushPendingRatings\n    ]);\n    // Initialize from localStorage on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!isInitialized && session) {\n            const storedRatings = loadFromStorage();\n            if (storedRatings.size > 0) {\n                setPendingRatings(storedRatings);\n            // Disable immediate flush to prevent unwanted API calls on load\n            // setTimeout(async () => {\n            //   try {\n            //     await flushPendingRatings()\n            //     console.log('Successfully flushed pending ratings from localStorage')\n            //   } catch (error) {\n            //     console.error('Failed to flush ratings on load:', error)\n            //   }\n            // }, 100) // Very short delay just to ensure component is mounted\n            }\n            setIsInitialized(true);\n        }\n    }, [\n        session,\n        isInitialized,\n        loadFromStorage,\n        flushPendingRatings\n    ]);\n    // Clean up expired \"saved\" ratings periodically\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!isInitialized) return;\n        const cleanupInterval = setInterval(()=>{\n            const now = Date.now();\n            let hasExpiredRatings = false;\n            // Check for expired \"saved\" ratings (those with future timestamps that have passed)\n            for (const rating of Array.from(pendingRatings.values())){\n                if (rating.timestamp > now - 8000 && rating.timestamp <= now + 6000) {\n                    // This might be a saved rating that should be cleaned up\n                    hasExpiredRatings = true;\n                    break;\n                }\n            }\n            if (hasExpiredRatings) {\n                setPendingRatings((prev)=>{\n                    const cleaned = new Map();\n                    const currentTime = Date.now();\n                    prev.forEach((rating, key)=>{\n                        // Keep ratings that are either:\n                        // 1. Normal pending ratings (timestamp in the past)\n                        // 2. Saved ratings that haven't expired yet (timestamp > now + buffer)\n                        if (rating.timestamp <= currentTime || rating.timestamp > currentTime + 6000) {\n                            cleaned.set(key, rating);\n                        } else {\n                            console.log(\"\\uD83E\\uDDF9 Cleaning up expired saved rating: \".concat(rating.videoId, \":\").concat(rating.tagId));\n                        }\n                    });\n                    // Update localStorage if anything changed\n                    if (cleaned.size !== prev.size) {\n                        if (cleaned.size === 0) {\n                            clearStorage();\n                        } else {\n                            saveToStorage(cleaned);\n                        }\n                    }\n                    return cleaned.size !== prev.size ? cleaned : prev;\n                });\n            }\n        }, 1000) // Check every second for cleanup\n        ;\n        return ()=>clearInterval(cleanupInterval);\n    }, [\n        pendingRatings,\n        isInitialized,\n        clearStorage,\n        saveToStorage\n    ]);\n    // Flush on page unload/beforeunload\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!isInitialized) return;\n        const handleBeforeUnload = ()=>{\n            if (pendingRatings.size > 0) {\n                // Use sendBeacon for reliable data transmission during page unload\n                const ratingsData = Array.from(pendingRatings.values());\n                navigator.sendBeacon(\"/api/ratings/flush\", JSON.stringify(ratingsData));\n            }\n        };\n        const handleVisibilityChange = ()=>{\n            if (document.visibilityState === \"hidden\" && pendingRatings.size > 0) {\n                flushPendingRatings();\n            }\n        };\n        window.addEventListener(\"beforeunload\", handleBeforeUnload);\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n        return ()=>{\n            window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n        };\n    }, [\n        pendingRatings,\n        flushPendingRatings,\n        isInitialized\n    ]);\n    // Cleanup timer on unmount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        return ()=>{\n            if (debounceTimer) {\n                clearTimeout(debounceTimer);\n            }\n        };\n    }, [\n        debounceTimer\n    ]);\n    // Removed rating saved callback functions to prevent unwanted page refreshes\n    // Set custom debounce delay\n    const setDebounceDelay = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((delay)=>{\n        const validatedDelay = Math.max(1000, Math.min(30000, delay)) // Between 1-30 seconds\n        ;\n        setDebounceDelayState(validatedDelay);\n        // Save to localStorage\n        if (true) {\n            try {\n                localStorage.setItem(DEBOUNCE_DELAY_KEY, validatedDelay.toString());\n            } catch (error) {\n                console.warn(\"Failed to save debounce delay to storage:\", error);\n            }\n        }\n    }, []);\n    // Get current debounce delay\n    const getDebounceDelay = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>debounceDelay, [\n        debounceDelay\n    ]);\n    // Get cache statistics\n    const getCacheStats = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        const ratings = Array.from(pendingRatings.values());\n        const oldestTimestamp = ratings.length > 0 ? Math.min(...ratings.map((r)=>r.timestamp)) : null;\n        return {\n            pendingCount: pendingRatings.size,\n            oldestTimestamp\n        };\n    }, [\n        pendingRatings\n    ]);\n    // Load debounce delay from storage on initialization\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (true) {\n            try {\n                const storedDelay = localStorage.getItem(DEBOUNCE_DELAY_KEY);\n                if (storedDelay) {\n                    const delay = parseInt(storedDelay, 10);\n                    if (!isNaN(delay) && delay >= 1000 && delay <= 30000) {\n                        setDebounceDelayState(delay);\n                    }\n                }\n            } catch (error) {\n                console.warn(\"Failed to load debounce delay from storage:\", error);\n            }\n        }\n    }, []);\n    const value = {\n        pendingRatings,\n        setCachedRating,\n        getCachedRating,\n        hasPendingRating,\n        flushPendingRatings,\n        setDebounceDelay,\n        getDebounceDelay,\n        getCacheStats\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(RatingCacheContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/marcmongin/VSCodeProjects/RateMy/RateMy/contexts/RatingCacheContext.tsx\",\n        lineNumber: 523,\n        columnNumber: 5\n    }, this);\n}\n_s(RatingCacheProvider, \"seIRFq6XAempn8aQR5ApMyqqczE=\", false, function() {\n    return [\n        next_auth_react__WEBPACK_IMPORTED_MODULE_2__.useSession\n    ];\n});\n_c = RatingCacheProvider;\nfunction useRatingCache() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(RatingCacheContext);\n    if (context === undefined) {\n        throw new Error(\"useRatingCache must be used within a RatingCacheProvider\");\n    }\n    return context;\n}\n_s1(useRatingCache, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"RatingCacheProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./contexts/RatingCacheContext.tsx\n"));

/***/ })

});