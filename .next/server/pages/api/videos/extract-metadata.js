"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/videos/extract-metadata";
exports.ids = ["pages/api/videos/extract-metadata"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("bcryptjs");

/***/ }),

/***/ "next-auth":
/*!****************************!*\
  !*** external "next-auth" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("next-auth");

/***/ }),

/***/ "next-auth/next":
/*!*********************************!*\
  !*** external "next-auth/next" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("next-auth/next");

/***/ }),

/***/ "next-auth/providers/apple":
/*!********************************************!*\
  !*** external "next-auth/providers/apple" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/apple");

/***/ }),

/***/ "next-auth/providers/credentials":
/*!**************************************************!*\
  !*** external "next-auth/providers/credentials" ***!
  \**************************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/credentials");

/***/ }),

/***/ "next-auth/providers/facebook":
/*!***********************************************!*\
  !*** external "next-auth/providers/facebook" ***!
  \***********************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/facebook");

/***/ }),

/***/ "next-auth/providers/google":
/*!*********************************************!*\
  !*** external "next-auth/providers/google" ***!
  \*********************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/google");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fvideos%2Fextract-metadata&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fvideos%2Fextract-metadata.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fvideos%2Fextract-metadata&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fvideos%2Fextract-metadata.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_videos_extract_metadata_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/videos/extract-metadata.ts */ \"(api)/./pages/api/videos/extract-metadata.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_videos_extract_metadata_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_videos_extract_metadata_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/videos/extract-metadata\",\n        pathname: \"/api/videos/extract-metadata\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_videos_extract_metadata_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnZpZGVvcyUyRmV4dHJhY3QtbWV0YWRhdGEmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRnZpZGVvcyUyRmV4dHJhY3QtbWV0YWRhdGEudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDbUU7QUFDbkU7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGtFQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxrRUFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYXRlbXktbmV4dGpzLz9hMWJhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvdmlkZW9zL2V4dHJhY3QtbWV0YWRhdGEudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS92aWRlb3MvZXh0cmFjdC1tZXRhZGF0YVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3ZpZGVvcy9leHRyYWN0LW1ldGFkYXRhXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fvideos%2Fextract-metadata&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fvideos%2Fextract-metadata.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/auth/[...nextauth].ts":
/*!*****************************************!*\
  !*** ./pages/api/auth/[...nextauth].ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"next-auth\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _src_lib_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../src/lib/auth */ \"(api)/./src/lib/auth.ts\");\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (next_auth__WEBPACK_IMPORTED_MODULE_0___default()(_src_lib_auth__WEBPACK_IMPORTED_MODULE_1__.authOptions));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZ0M7QUFDbUI7QUFFbkQsaUVBQWVBLGdEQUFRQSxDQUFDQyxzREFBV0EsQ0FBQ0EsRUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhdGVteS1uZXh0anMvLi9wYWdlcy9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdLnRzPzJlOGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE5leHRBdXRoIGZyb20gJ25leHQtYXV0aCdcbmltcG9ydCB7IGF1dGhPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2xpYi9hdXRoJ1xuXG5leHBvcnQgZGVmYXVsdCBOZXh0QXV0aChhdXRoT3B0aW9ucykiXSwibmFtZXMiOlsiTmV4dEF1dGgiLCJhdXRoT3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/auth/[...nextauth].ts\n");

/***/ }),

/***/ "(api)/./pages/api/videos/extract-metadata.ts":
/*!**********************************************!*\
  !*** ./pages/api/videos/extract-metadata.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/next */ \"next-auth/next\");\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth_next__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _auth_nextauth___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../auth/[...nextauth] */ \"(api)/./pages/api/auth/[...nextauth].ts\");\n/* harmony import */ var _src_services_video_metadata_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/src/services/video-metadata.service */ \"(api)/./src/services/video-metadata.service.ts\");\n/* harmony import */ var _src_services_xhamster_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/src/services/xhamster.service */ \"(api)/./src/services/xhamster.service.ts\");\n/* harmony import */ var _src_services_redgifs_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/src/services/redgifs.service */ \"(api)/./src/services/redgifs.service.ts\");\n/* harmony import */ var _src_services_reddit_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/src/services/reddit.service */ \"(api)/./src/services/reddit.service.ts\");\n/* harmony import */ var _src_lib_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/src/lib/logger */ \"(api)/./src/lib/logger.ts\");\n\n\n\n\n\n\n\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        const session = await (0,next_auth_next__WEBPACK_IMPORTED_MODULE_0__.getServerSession)(req, res, _auth_nextauth___WEBPACK_IMPORTED_MODULE_1__.authOptions);\n        if (!session) {\n            return res.status(401).json({\n                error: \"Unauthorized\"\n            });\n        }\n        const { originalUrl } = req.body;\n        if (!originalUrl) {\n            return res.status(400).json({\n                error: \"originalUrl is required\"\n            });\n        }\n        _src_lib_logger__WEBPACK_IMPORTED_MODULE_6__.logger.info(\"Extracting metadata for URL\", {\n            url: originalUrl\n        });\n        let extractedMetadata, previewUrl, embedUrl;\n        // Extract metadata based on URL type\n        if (_src_services_xhamster_service__WEBPACK_IMPORTED_MODULE_3__.xHamsterService.isXHamsterUrl(originalUrl)) {\n            try {\n                const xHamsterData = await _src_services_xhamster_service__WEBPACK_IMPORTED_MODULE_3__.xHamsterService.processXHamsterUrl(originalUrl);\n                extractedMetadata = {\n                    title: xHamsterData.title || \"\",\n                    description: xHamsterData.description || \"\",\n                    tags: xHamsterData.tags || [],\n                    thumbnail: xHamsterData.thumbnail\n                };\n                previewUrl = xHamsterData.previewUrl || null;\n            } catch (error) {\n                _src_lib_logger__WEBPACK_IMPORTED_MODULE_6__.logger.error(\"Failed to process XHamster URL, falling back to standard processing\", {\n                    error\n                });\n                extractedMetadata = await _src_services_video_metadata_service__WEBPACK_IMPORTED_MODULE_2__.videoMetadataService.extractMetadata(originalUrl);\n            }\n        } else if (_src_services_redgifs_service__WEBPACK_IMPORTED_MODULE_4__.redGifsService.isRedGifsUrl(originalUrl)) {\n            try {\n                const redGifsData = await _src_services_redgifs_service__WEBPACK_IMPORTED_MODULE_4__.redGifsService.processRedGifsUrl(originalUrl);\n                extractedMetadata = {\n                    title: redGifsData.metadata.title,\n                    description: redGifsData.metadata.description || \"\",\n                    tags: redGifsData.tags,\n                    thumbnail: redGifsData.thumbnail\n                };\n                embedUrl = redGifsData.embedUrl;\n            } catch (error) {\n                _src_lib_logger__WEBPACK_IMPORTED_MODULE_6__.logger.error(\"Failed to process RedGifs URL, falling back to standard processing\", {\n                    error\n                });\n                extractedMetadata = await _src_services_video_metadata_service__WEBPACK_IMPORTED_MODULE_2__.videoMetadataService.extractMetadata(originalUrl);\n            }\n        } else if (_src_services_reddit_service__WEBPACK_IMPORTED_MODULE_5__.redditService.isRedditUrl(originalUrl)) {\n            try {\n                const redditData = await _src_services_reddit_service__WEBPACK_IMPORTED_MODULE_5__.redditService.processRedditUrl(originalUrl);\n                extractedMetadata = {\n                    title: redditData.metadata.title,\n                    description: redditData.metadata.description || \"\",\n                    tags: redditData.tags,\n                    thumbnail: redditData.thumbnail\n                };\n                embedUrl = redditData.embedUrl;\n            } catch (error) {\n                _src_lib_logger__WEBPACK_IMPORTED_MODULE_6__.logger.error(\"Failed to process Reddit URL, falling back to standard processing\", {\n                    error\n                });\n                extractedMetadata = await _src_services_video_metadata_service__WEBPACK_IMPORTED_MODULE_2__.videoMetadataService.extractMetadata(originalUrl);\n            }\n        } else {\n            // Standard metadata extraction\n            extractedMetadata = await _src_services_video_metadata_service__WEBPACK_IMPORTED_MODULE_2__.videoMetadataService.extractMetadata(originalUrl);\n        }\n        // Generate embed URL if not already set\n        if (!embedUrl) {\n            embedUrl = convertToEmbedUrl(originalUrl);\n        }\n        // Generate default title if none found\n        let finalTitle = extractedMetadata.title;\n        if (!finalTitle) {\n            if (originalUrl.includes(\"redgifs.com\")) {\n                const match = originalUrl.match(/\\/watch\\/([a-zA-Z0-9]+)/);\n                const gifId = match ? match[1] : \"video\";\n                finalTitle = `RedGifs ${gifId}`;\n            } else {\n                finalTitle = \"Untitled Video\";\n            }\n        }\n        // Determine NSFW status\n        const isRedGifs = _src_services_redgifs_service__WEBPACK_IMPORTED_MODULE_4__.redGifsService.isRedGifsUrl(originalUrl);\n        const isReddit = _src_services_reddit_service__WEBPACK_IMPORTED_MODULE_5__.redditService.isRedditUrl(originalUrl);\n        const isXHamster = _src_services_xhamster_service__WEBPACK_IMPORTED_MODULE_3__.xHamsterService.isXHamsterUrl(originalUrl);\n        let isNSFW = false;\n        if (isRedGifs || isXHamster) {\n            isNSFW = true // RedGifs and XHamster are automatically NSFW\n            ;\n        } else if (isReddit && extractedMetadata.tags?.includes(\"nsfw\")) {\n            isNSFW = true // Reddit marked as NSFW\n            ;\n        }\n        const response = {\n            success: true,\n            metadata: {\n                title: finalTitle,\n                description: extractedMetadata.description || \"\",\n                tags: extractedMetadata.tags || [],\n                thumbnail: extractedMetadata.thumbnail || null,\n                previewUrl: previewUrl || null,\n                embedUrl,\n                isNsfw: isNSFW\n            }\n        };\n        _src_lib_logger__WEBPACK_IMPORTED_MODULE_6__.logger.info(\"Metadata extraction completed\", {\n            url: originalUrl,\n            tagsCount: response.metadata.tags.length,\n            hasTitle: !!response.metadata.title,\n            hasPreview: !!response.metadata.previewUrl\n        });\n        res.status(200).json(response);\n    } catch (error) {\n        _src_lib_logger__WEBPACK_IMPORTED_MODULE_6__.logger.error(\"Error extracting metadata\", {\n            error\n        });\n        res.status(500).json({\n            error: \"Failed to extract metadata\",\n            message: error instanceof Error ? error.message : \"Unknown error\"\n        });\n    }\n}\nfunction convertToEmbedUrl(originalUrl) {\n    // YouTube URLs\n    const youtubeRegex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/;\n    const youtubeMatch = originalUrl.match(youtubeRegex);\n    if (youtubeMatch) {\n        return `https://www.youtube.com/embed/${youtubeMatch[1]}`;\n    }\n    // Vimeo URLs\n    const vimeoRegex = /(?:https?:\\/\\/)?(?:www\\.)?vimeo\\.com\\/(\\d+)/;\n    const vimeoMatch = originalUrl.match(vimeoRegex);\n    if (vimeoMatch) {\n        return `https://player.vimeo.com/video/${vimeoMatch[1]}`;\n    }\n    // RedGifs URLs\n    const redgifsRegex = /(?:https?:\\/\\/)?(?:www\\.)?redgifs\\.com\\/(?:watch\\/|ifr\\/)([a-zA-Z0-9]+)/i;\n    const redgifsMatch = originalUrl.match(redgifsRegex);\n    if (redgifsMatch) {\n        return `https://www.redgifs.com/ifr/${redgifsMatch[1]}`;\n    }\n    // TikTok URLs\n    const tiktokRegex = /(?:https?:\\/\\/)?(?:www\\.)?tiktok\\.com\\/@[\\w.-]+\\/video\\/(\\d+)/;\n    const tiktokMatch = originalUrl.match(tiktokRegex);\n    if (tiktokMatch) {\n        return `https://www.tiktok.com/embed/v2/${tiktokMatch[1]}`;\n    }\n    // Instagram URLs\n    const instagramRegex = /(?:https?:\\/\\/)?(?:www\\.)?instagram\\.com\\/(?:p|reel)\\/([a-zA-Z0-9_-]+)/;\n    const instagramMatch = originalUrl.match(instagramRegex);\n    if (instagramMatch) {\n        return `https://www.instagram.com/p/${instagramMatch[1]}/embed/`;\n    }\n    // Twitter/X URLs\n    const twitterRegex = /(?:https?:\\/\\/)?(?:www\\.)?(?:twitter\\.com|x\\.com)\\/\\w+\\/status\\/(\\d+)/;\n    const twitterMatch = originalUrl.match(twitterRegex);\n    if (twitterMatch) {\n        return `https://platform.twitter.com/embed/Tweet.html?id=${twitterMatch[1]}`;\n    }\n    // Dailymotion URLs\n    const dailymotionRegex = /(?:https?:\\/\\/)?(?:www\\.)?dailymotion\\.com\\/video\\/([a-zA-Z0-9]+)/;\n    const dailymotionMatch = originalUrl.match(dailymotionRegex);\n    if (dailymotionMatch) {\n        return `https://www.dailymotion.com/embed/video/${dailymotionMatch[1]}`;\n    }\n    // Direct video files\n    const videoExtensions = [\n        \".mp4\",\n        \".mov\",\n        \".avi\",\n        \".mkv\",\n        \".webm\",\n        \".flv\",\n        \".wmv\",\n        \".m4v\"\n    ];\n    const urlPath = new URL(originalUrl).pathname.toLowerCase();\n    if (videoExtensions.some((ext)=>urlPath.endsWith(ext))) {\n        return originalUrl;\n    }\n    return originalUrl;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/videos/extract-metadata.ts\n");

/***/ }),

/***/ "(api)/./src/lib/auth.ts":
/*!*************************!*\
  !*** ./src/lib/auth.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions)\n/* harmony export */ });\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/providers/credentials */ \"next-auth/providers/credentials\");\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/google */ \"next-auth/providers/google\");\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_auth_providers_facebook__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-auth/providers/facebook */ \"next-auth/providers/facebook\");\n/* harmony import */ var next_auth_providers_facebook__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_facebook__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_auth_providers_apple__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next-auth/providers/apple */ \"next-auth/providers/apple\");\n/* harmony import */ var next_auth_providers_apple__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_apple__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./db */ \"(api)/./src/lib/db.ts\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\nconst authOptions = {\n    providers: [\n        next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1___default()({\n            clientId: process.env.GOOGLE_CLIENT_ID || \"dummy\",\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"dummy\"\n        }),\n        next_auth_providers_facebook__WEBPACK_IMPORTED_MODULE_2___default()({\n            clientId: process.env.FACEBOOK_CLIENT_ID || \"dummy\",\n            clientSecret: process.env.FACEBOOK_CLIENT_SECRET || \"dummy\"\n        }),\n        next_auth_providers_apple__WEBPACK_IMPORTED_MODULE_3___default()({\n            clientId: process.env.APPLE_ID || \"dummy\",\n            clientSecret: process.env.APPLE_SECRET || \"dummy\"\n        }),\n        next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0___default()({\n            name: \"credentials\",\n            credentials: {\n                email: {\n                    label: \"Email\",\n                    type: \"email\"\n                },\n                password: {\n                    label: \"Password\",\n                    type: \"password\"\n                }\n            },\n            async authorize (credentials) {\n                try {\n                    if (!credentials?.email || !credentials?.password) {\n                        return null;\n                    }\n                    const user = await _db__WEBPACK_IMPORTED_MODULE_4__.db.user.findUnique({\n                        where: {\n                            email: credentials.email\n                        }\n                    });\n                    if (!user || !user.password) {\n                        return null;\n                    }\n                    const isPasswordValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_5___default().compare(credentials.password, user.password);\n                    if (!isPasswordValid) {\n                        return null;\n                    }\n                    return {\n                        id: user.id,\n                        email: user.email,\n                        name: user.firstName ? `${user.firstName} ${user.lastName || \"\"}`.trim() : user.username,\n                        username: user.username,\n                        firstName: user.firstName,\n                        lastName: user.lastName\n                    };\n                } catch (error) {\n                    console.error(\"Auth error:\", error);\n                    return null;\n                }\n            }\n        })\n    ],\n    session: {\n        strategy: \"jwt\",\n        maxAge: 30 * 24 * 60 * 60\n    },\n    pages: {\n        signIn: \"/auth/signin\"\n    },\n    callbacks: {\n        async jwt ({ token, user }) {\n            if (user) {\n                token.username = user.username;\n                token.firstName = user.firstName;\n                token.lastName = user.lastName;\n            }\n            return token;\n        },\n        async session ({ session, token }) {\n            if (token && session.user) {\n                session.user.id = token.sub;\n                session.user.username = token.username;\n                session.user.firstName = token.firstName;\n                session.user.lastName = token.lastName;\n            }\n            return session;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNYixTQUFTO2dCQUNoRE0sUUFBUVosSUFBSSxDQUFTTyxRQUFRLEdBQUdZLE1BQU1aLFFBQVE7WUFDbEQ7WUFDQSxPQUFPSztRQUNUO0lBQ0Y7QUFDRixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmF0ZW15LW5leHRqcy8uL3NyYy9saWIvYXV0aC50cz82NjkyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBdXRoT3B0aW9ucyB9IGZyb20gJ25leHQtYXV0aCdcbmltcG9ydCBDcmVkZW50aWFsc1Byb3ZpZGVyIGZyb20gJ25leHQtYXV0aC9wcm92aWRlcnMvY3JlZGVudGlhbHMnXG5pbXBvcnQgR29vZ2xlUHJvdmlkZXIgZnJvbSAnbmV4dC1hdXRoL3Byb3ZpZGVycy9nb29nbGUnXG5pbXBvcnQgRmFjZWJvb2tQcm92aWRlciBmcm9tICduZXh0LWF1dGgvcHJvdmlkZXJzL2ZhY2Vib29rJ1xuaW1wb3J0IEFwcGxlUHJvdmlkZXIgZnJvbSAnbmV4dC1hdXRoL3Byb3ZpZGVycy9hcHBsZSdcbmltcG9ydCB7IGRiIH0gZnJvbSAnLi9kYidcbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0anMnXG5cbmV4cG9ydCBjb25zdCBhdXRoT3B0aW9uczogTmV4dEF1dGhPcHRpb25zID0ge1xuICBwcm92aWRlcnM6IFtcbiAgICBHb29nbGVQcm92aWRlcih7XG4gICAgICBjbGllbnRJZDogcHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9JRCB8fCAnZHVtbXknLFxuICAgICAgY2xpZW50U2VjcmV0OiBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX1NFQ1JFVCB8fCAnZHVtbXknLFxuICAgIH0pLFxuICAgIEZhY2Vib29rUHJvdmlkZXIoe1xuICAgICAgY2xpZW50SWQ6IHByb2Nlc3MuZW52LkZBQ0VCT09LX0NMSUVOVF9JRCB8fCAnZHVtbXknLFxuICAgICAgY2xpZW50U2VjcmV0OiBwcm9jZXNzLmVudi5GQUNFQk9PS19DTElFTlRfU0VDUkVUIHx8ICdkdW1teScsXG4gICAgfSksXG4gICAgQXBwbGVQcm92aWRlcih7XG4gICAgICBjbGllbnRJZDogcHJvY2Vzcy5lbnYuQVBQTEVfSUQgfHwgJ2R1bW15JyxcbiAgICAgIGNsaWVudFNlY3JldDogcHJvY2Vzcy5lbnYuQVBQTEVfU0VDUkVUIHx8ICdkdW1teScsXG4gICAgfSksXG4gICAgQ3JlZGVudGlhbHNQcm92aWRlcih7XG4gICAgICBuYW1lOiAnY3JlZGVudGlhbHMnLFxuICAgICAgY3JlZGVudGlhbHM6IHtcbiAgICAgICAgZW1haWw6IHsgbGFiZWw6ICdFbWFpbCcsIHR5cGU6ICdlbWFpbCcgfSxcbiAgICAgICAgcGFzc3dvcmQ6IHsgbGFiZWw6ICdQYXNzd29yZCcsIHR5cGU6ICdwYXNzd29yZCcgfVxuICAgICAgfSxcbiAgICAgIGFzeW5jIGF1dGhvcml6ZShjcmVkZW50aWFscykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghY3JlZGVudGlhbHM/LmVtYWlsIHx8ICFjcmVkZW50aWFscz8ucGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IGRiLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgICBlbWFpbDogY3JlZGVudGlhbHMuZW1haWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuXG4gICAgICAgICAgaWYgKCF1c2VyIHx8ICF1c2VyLnBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGlzUGFzc3dvcmRWYWxpZCA9IGF3YWl0IGJjcnlwdC5jb21wYXJlKGNyZWRlbnRpYWxzLnBhc3N3b3JkLCB1c2VyLnBhc3N3b3JkKVxuICAgICAgICAgIGlmICghaXNQYXNzd29yZFZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogdXNlci5pZCxcbiAgICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICAgICAgbmFtZTogdXNlci5maXJzdE5hbWUgPyBgJHt1c2VyLmZpcnN0TmFtZX0gJHt1c2VyLmxhc3ROYW1lIHx8ICcnfWAudHJpbSgpIDogdXNlci51c2VybmFtZSxcbiAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lLFxuICAgICAgICAgICAgZmlyc3ROYW1lOiB1c2VyLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiB1c2VyLmxhc3ROYW1lLFxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdBdXRoIGVycm9yOicsIGVycm9yKVxuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICBdLFxuICBzZXNzaW9uOiB7XG4gICAgc3RyYXRlZ3k6ICdqd3QnLFxuICAgIG1heEFnZTogMzAgKiAyNCAqIDYwICogNjAsIC8vIDMwIGRheXNcbiAgfSxcbiAgcGFnZXM6IHtcbiAgICBzaWduSW46ICcvYXV0aC9zaWduaW4nXG4gIH0sXG4gIGNhbGxiYWNrczoge1xuICAgIGFzeW5jIGp3dCh7IHRva2VuLCB1c2VyIH0pIHtcbiAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgIHRva2VuLnVzZXJuYW1lID0gKHVzZXIgYXMgYW55KS51c2VybmFtZVxuICAgICAgICB0b2tlbi5maXJzdE5hbWUgPSAodXNlciBhcyBhbnkpLmZpcnN0TmFtZVxuICAgICAgICB0b2tlbi5sYXN0TmFtZSA9ICh1c2VyIGFzIGFueSkubGFzdE5hbWVcbiAgICAgIH1cbiAgICAgIHJldHVybiB0b2tlblxuICAgIH0sXG4gICAgYXN5bmMgc2Vzc2lvbih7IHNlc3Npb24sIHRva2VuIH0pIHtcbiAgICAgIGlmICh0b2tlbiAmJiBzZXNzaW9uLnVzZXIpIHtcbiAgICAgICAgKHNlc3Npb24udXNlciBhcyBhbnkpLmlkID0gdG9rZW4uc3ViIVxuICAgICAgICA7KHNlc3Npb24udXNlciBhcyBhbnkpLnVzZXJuYW1lID0gdG9rZW4udXNlcm5hbWUgYXMgc3RyaW5nXG4gICAgICAgIDsoc2Vzc2lvbi51c2VyIGFzIGFueSkuZmlyc3ROYW1lID0gdG9rZW4uZmlyc3ROYW1lIGFzIHN0cmluZ1xuICAgICAgICA7KHNlc3Npb24udXNlciBhcyBhbnkpLmxhc3ROYW1lID0gdG9rZW4ubGFzdE5hbWUgYXMgc3RyaW5nXG4gICAgICB9XG4gICAgICByZXR1cm4gc2Vzc2lvblxuICAgIH1cbiAgfVxufSJdLCJuYW1lcyI6WyJDcmVkZW50aWFsc1Byb3ZpZGVyIiwiR29vZ2xlUHJvdmlkZXIiLCJGYWNlYm9va1Byb3ZpZGVyIiwiQXBwbGVQcm92aWRlciIsImRiIiwiYmNyeXB0IiwiYXV0aE9wdGlvbnMiLCJwcm92aWRlcnMiLCJjbGllbnRJZCIsInByb2Nlc3MiLCJlbnYiLCJHT09HTEVfQ0xJRU5UX0lEIiwiY2xpZW50U2VjcmV0IiwiR09PR0xFX0NMSUVOVF9TRUNSRVQiLCJGQUNFQk9PS19DTElFTlRfSUQiLCJGQUNFQk9PS19DTElFTlRfU0VDUkVUIiwiQVBQTEVfSUQiLCJBUFBMRV9TRUNSRVQiLCJuYW1lIiwiY3JlZGVudGlhbHMiLCJlbWFpbCIsImxhYmVsIiwidHlwZSIsInBhc3N3b3JkIiwiYXV0aG9yaXplIiwidXNlciIsImZpbmRVbmlxdWUiLCJ3aGVyZSIsImlzUGFzc3dvcmRWYWxpZCIsImNvbXBhcmUiLCJpZCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwidHJpbSIsInVzZXJuYW1lIiwiZXJyb3IiLCJjb25zb2xlIiwic2Vzc2lvbiIsInN0cmF0ZWd5IiwibWF4QWdlIiwicGFnZXMiLCJzaWduSW4iLCJjYWxsYmFja3MiLCJqd3QiLCJ0b2tlbiIsInN1YiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/lib/auth.ts\n");

/***/ }),

/***/ "(api)/./src/lib/config.ts":
/*!***************************!*\
  !*** ./src/lib/config.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   getEnvVar: () => (/* binding */ getEnvVar),\n/* harmony export */   getEnvVarAsBoolean: () => (/* binding */ getEnvVarAsBoolean),\n/* harmony export */   getEnvVarAsNumber: () => (/* binding */ getEnvVarAsNumber),\n/* harmony export */   isDevelopment: () => (/* binding */ isDevelopment),\n/* harmony export */   isProduction: () => (/* binding */ isProduction),\n/* harmony export */   isTest: () => (/* binding */ isTest)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(api)/./src/lib/constants.ts\");\n\nfunction getConfig() {\n    const env = \"development\" || 0;\n    const isDevelopment = env === _constants__WEBPACK_IMPORTED_MODULE_0__.NODE_ENV.DEVELOPMENT;\n    const isProduction = env === _constants__WEBPACK_IMPORTED_MODULE_0__.NODE_ENV.PRODUCTION;\n    // Validate required environment variables\n    const requiredVars = [\n        \"DATABASE_URL\",\n        \"NEXTAUTH_SECRET\",\n        \"NEXTAUTH_URL\"\n    ];\n    for (const varName of requiredVars){\n        if (!process.env[varName]) {\n            throw new Error(`Missing required environment variable: ${varName}`);\n        }\n    }\n    return {\n        app: {\n            name: process.env.APP_NAME || \"RateMe\",\n            version: process.env.APP_VERSION || \"1.0.0\",\n            env,\n            port: parseInt(process.env.PORT || \"3000\", 10),\n            url: process.env.NEXTAUTH_URL\n        },\n        database: {\n            url: process.env.DATABASE_URL\n        },\n        auth: {\n            secret: process.env.NEXTAUTH_SECRET,\n            url: process.env.NEXTAUTH_URL,\n            sessionMaxAge: parseInt(process.env.SESSION_MAX_AGE || \"2592000\", 10)\n        },\n        logging: {\n            level: process.env.LOG_LEVEL || (isDevelopment ? \"debug\" : \"info\"),\n            pretty: isDevelopment\n        },\n        redis: process.env.REDIS_URL ? {\n            url: process.env.REDIS_URL,\n            password: process.env.REDIS_PASSWORD\n        } : undefined,\n        external: {\n            youtube: process.env.YOUTUBE_API_KEY ? {\n                apiKey: process.env.YOUTUBE_API_KEY\n            } : undefined,\n            vimeo: process.env.VIMEO_CLIENT_ID && process.env.VIMEO_CLIENT_SECRET ? {\n                clientId: process.env.VIMEO_CLIENT_ID,\n                clientSecret: process.env.VIMEO_CLIENT_SECRET\n            } : undefined\n        }\n    };\n}\n// Export singleton config instance\nconst config = getConfig();\n// Type-safe environment variable access\nfunction getEnvVar(name, defaultValue) {\n    const value = process.env[name];\n    if (value === undefined) {\n        if (defaultValue !== undefined) {\n            return defaultValue;\n        }\n        throw new Error(`Environment variable ${name} is not set`);\n    }\n    return value;\n}\nfunction getEnvVarAsNumber(name, defaultValue) {\n    const value = process.env[name];\n    if (value === undefined) {\n        if (defaultValue !== undefined) {\n            return defaultValue;\n        }\n        throw new Error(`Environment variable ${name} is not set`);\n    }\n    const parsed = parseInt(value, 10);\n    if (isNaN(parsed)) {\n        throw new Error(`Environment variable ${name} is not a valid number: ${value}`);\n    }\n    return parsed;\n}\nfunction getEnvVarAsBoolean(name, defaultValue) {\n    const value = process.env[name];\n    if (value === undefined) {\n        if (defaultValue !== undefined) {\n            return defaultValue;\n        }\n        throw new Error(`Environment variable ${name} is not set`);\n    }\n    return value.toLowerCase() === \"true\";\n}\n// Environment checks\nconst isDevelopment = config.app.env === _constants__WEBPACK_IMPORTED_MODULE_0__.NODE_ENV.DEVELOPMENT;\nconst isProduction = config.app.env === _constants__WEBPACK_IMPORTED_MODULE_0__.NODE_ENV.PRODUCTION;\nconst isTest = config.app.env === _constants__WEBPACK_IMPORTED_MODULE_0__.NODE_ENV.TEST;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/config.ts\n");

/***/ }),

/***/ "(api)/./src/lib/constants.ts":
/*!******************************!*\
  !*** ./src/lib/constants.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_ROUTES: () => (/* binding */ API_ROUTES),\n/* harmony export */   APP_DESCRIPTION: () => (/* binding */ APP_DESCRIPTION),\n/* harmony export */   APP_NAME: () => (/* binding */ APP_NAME),\n/* harmony export */   APP_VERSION: () => (/* binding */ APP_VERSION),\n/* harmony export */   CACHE_KEYS: () => (/* binding */ CACHE_KEYS),\n/* harmony export */   CACHE_TTL: () => (/* binding */ CACHE_TTL),\n/* harmony export */   DEFAULTS: () => (/* binding */ DEFAULTS),\n/* harmony export */   ERROR_CODES: () => (/* binding */ ERROR_CODES),\n/* harmony export */   EXTERNAL_SERVICES: () => (/* binding */ EXTERNAL_SERVICES),\n/* harmony export */   FEATURES: () => (/* binding */ FEATURES),\n/* harmony export */   HTTP_STATUS: () => (/* binding */ HTTP_STATUS),\n/* harmony export */   NODE_ENV: () => (/* binding */ NODE_ENV),\n/* harmony export */   PAGINATION: () => (/* binding */ PAGINATION),\n/* harmony export */   RATING_LEVELS: () => (/* binding */ RATING_LEVELS),\n/* harmony export */   SEO: () => (/* binding */ SEO),\n/* harmony export */   SOCIAL_PLATFORMS: () => (/* binding */ SOCIAL_PLATFORMS),\n/* harmony export */   UPLOAD_LIMITS: () => (/* binding */ UPLOAD_LIMITS),\n/* harmony export */   USER_LIMITS: () => (/* binding */ USER_LIMITS),\n/* harmony export */   VALIDATION_PATTERNS: () => (/* binding */ VALIDATION_PATTERNS),\n/* harmony export */   VIDEO_LIMITS: () => (/* binding */ VIDEO_LIMITS),\n/* harmony export */   VIDEO_PLATFORMS: () => (/* binding */ VIDEO_PLATFORMS)\n/* harmony export */ });\n// Application constants\nconst APP_NAME = \"RateMe\";\nconst APP_DESCRIPTION = \"A modern video rating platform\";\nconst APP_VERSION = \"1.0.0\";\n// API constants\nconst API_ROUTES = {\n    AUTH: {\n        SIGNIN: \"/api/auth/signin\",\n        SIGNUP: \"/api/auth/register\",\n        SIGNOUT: \"/api/auth/signout\"\n    },\n    VIDEOS: {\n        BASE: \"/api/videos\",\n        BY_ID: (id)=>`/api/videos/${id}`,\n        RATE: (id)=>`/api/videos/${id}/rate`\n    },\n    USERS: {\n        BASE: \"/api/users\",\n        BY_ID: (id)=>`/api/users/${id}`,\n        FOLLOW: (id)=>`/api/users/${id}/follow`\n    }\n};\n// UI constants\nconst PAGINATION = {\n    DEFAULT_PAGE_SIZE: 12,\n    MAX_PAGE_SIZE: 50\n};\nconst VIDEO_LIMITS = {\n    MAX_TITLE_LENGTH: 200,\n    MAX_DESCRIPTION_LENGTH: 1000\n};\nconst USER_LIMITS = {\n    MIN_USERNAME_LENGTH: 3,\n    MAX_USERNAME_LENGTH: 30,\n    MIN_PASSWORD_LENGTH: 6,\n    MAX_PASSWORD_LENGTH: 128\n};\n// Validation patterns\nconst VALIDATION_PATTERNS = {\n    EMAIL: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n    USERNAME: /^[a-zA-Z0-9_]{3,30}$/,\n    YOUTUBE_URL: /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/,\n    VIMEO_URL: /(?:https?:\\/\\/)?(?:www\\.)?vimeo\\.com\\/(\\d+)/\n};\n// Error codes\nconst ERROR_CODES = {\n    // Authentication errors\n    INVALID_CREDENTIALS: \"INVALID_CREDENTIALS\",\n    USER_NOT_FOUND: \"USER_NOT_FOUND\",\n    USER_ALREADY_EXISTS: \"USER_ALREADY_EXISTS\",\n    UNAUTHORIZED: \"UNAUTHORIZED\",\n    SESSION_EXPIRED: \"SESSION_EXPIRED\",\n    // Validation errors\n    VALIDATION_ERROR: \"VALIDATION_ERROR\",\n    INVALID_INPUT: \"INVALID_INPUT\",\n    MISSING_REQUIRED_FIELD: \"MISSING_REQUIRED_FIELD\",\n    // Resource errors\n    RESOURCE_NOT_FOUND: \"RESOURCE_NOT_FOUND\",\n    RESOURCE_ALREADY_EXISTS: \"RESOURCE_ALREADY_EXISTS\",\n    RESOURCE_FORBIDDEN: \"RESOURCE_FORBIDDEN\",\n    // Server errors\n    INTERNAL_SERVER_ERROR: \"INTERNAL_SERVER_ERROR\",\n    DATABASE_ERROR: \"DATABASE_ERROR\",\n    EXTERNAL_SERVICE_ERROR: \"EXTERNAL_SERVICE_ERROR\",\n    // Rate limiting\n    RATE_LIMIT_EXCEEDED: \"RATE_LIMIT_EXCEEDED\"\n};\n// HTTP status codes\nconst HTTP_STATUS = {\n    OK: 200,\n    CREATED: 201,\n    NO_CONTENT: 204,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    FORBIDDEN: 403,\n    NOT_FOUND: 404,\n    METHOD_NOT_ALLOWED: 405,\n    CONFLICT: 409,\n    UNPROCESSABLE_ENTITY: 422,\n    TOO_MANY_REQUESTS: 429,\n    INTERNAL_SERVER_ERROR: 500,\n    BAD_GATEWAY: 502,\n    SERVICE_UNAVAILABLE: 503\n};\n// Cache keys\nconst CACHE_KEYS = {\n    VIDEOS: \"videos\",\n    USER: (id)=>`user:${id}`,\n    VIDEO: (id)=>`video:${id}`,\n    TAGS: \"tags\",\n    USER_VIDEOS: (userId)=>`user:${userId}:videos`\n};\n// Cache TTL (in seconds)\nconst CACHE_TTL = {\n    SHORT: 300,\n    MEDIUM: 1800,\n    LONG: 3600,\n    VERY_LONG: 86400\n};\n// Environment types\nconst NODE_ENV = {\n    DEVELOPMENT: \"development\",\n    PRODUCTION: \"production\",\n    TEST: \"test\"\n};\n// Supported video platforms\nconst VIDEO_PLATFORMS = {\n    YOUTUBE: \"youtube\",\n    VIMEO: \"vimeo\"\n};\n// Rating levels\nconst RATING_LEVELS = {\n    MIN: 1,\n    MAX: 5,\n    DEFAULT: 3\n};\n// Default values\nconst DEFAULTS = {\n    AVATAR_URL: \"/images/default-avatar.png\",\n    VIDEO_THUMBNAIL: \"/images/default-video-thumbnail.png\",\n    PAGINATION_LIMIT: PAGINATION.DEFAULT_PAGE_SIZE,\n    RATING_LEVEL: RATING_LEVELS.DEFAULT\n};\n// Feature flags\nconst FEATURES = {\n    VIDEO_UPLOAD: true,\n    USER_REGISTRATION: true,\n    VIDEO_RATING: true,\n    USER_FOLLOWING: true,\n    SEARCH: true,\n    ADMIN_PANEL: false\n};\n// External service URLs\nconst EXTERNAL_SERVICES = {\n    YOUTUBE_API: \"https://www.googleapis.com/youtube/v3\",\n    VIMEO_API: \"https://api.vimeo.com\"\n};\n// File upload limits\nconst UPLOAD_LIMITS = {\n    MAX_FILE_SIZE: 10 * 1024 * 1024,\n    ALLOWED_IMAGE_TYPES: [\n        \"image/jpeg\",\n        \"image/png\",\n        \"image/gif\",\n        \"image/webp\"\n    ],\n    ALLOWED_VIDEO_TYPES: [\n        \"video/mp4\",\n        \"video/webm\",\n        \"video/ogg\"\n    ]\n};\n// SEO constants\nconst SEO = {\n    DEFAULT_TITLE: APP_NAME,\n    TITLE_TEMPLATE: `%s | ${APP_NAME}`,\n    DEFAULT_DESCRIPTION: APP_DESCRIPTION,\n    TWITTER_HANDLE: \"@rateme\",\n    SITE_URL: process.env.NEXTAUTH_URL || \"http://localhost:3000\"\n};\n// Social sharing\nconst SOCIAL_PLATFORMS = {\n    TWITTER: \"twitter\",\n    FACEBOOK: \"facebook\",\n    LINKEDIN: \"linkedin\",\n    REDDIT: \"reddit\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/constants.ts\n");

/***/ }),

/***/ "(api)/./src/lib/db.ts":
/*!***********************!*\
  !*** ./src/lib/db.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   db: () => (/* binding */ db)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst db = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = db;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL2RiLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUU3QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLEtBQUtGLGdCQUFnQkcsTUFBTSxJQUFJLElBQUlKLHdEQUFZQSxHQUFFO0FBRTlELElBQUlLLElBQXlCLEVBQWNKLGdCQUFnQkcsTUFBTSxHQUFHRCIsInNvdXJjZXMiOlsid2VicGFjazovL3JhdGVteS1uZXh0anMvLi9zcmMvbGliL2RiLnRzPzllNGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnXG5cbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbFRoaXMgYXMgdW5rbm93biBhcyB7XG4gIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBjb25zdCBkYiA9IGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPz8gbmV3IFByaXNtYUNsaWVudCgpXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID0gZGIiXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsImRiIiwicHJpc21hIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/lib/db.ts\n");

/***/ }),

/***/ "(api)/./src/lib/errors.ts":
/*!***************************!*\
  !*** ./src/lib/errors.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppError: () => (/* binding */ AppError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   AuthorizationError: () => (/* binding */ AuthorizationError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   DatabaseError: () => (/* binding */ DatabaseError),\n/* harmony export */   ExternalServiceError: () => (/* binding */ ExternalServiceError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   ValidationError: () => (/* binding */ ValidationError),\n/* harmony export */   asyncWrapper: () => (/* binding */ asyncWrapper),\n/* harmony export */   createConflictError: () => (/* binding */ createConflictError),\n/* harmony export */   createNotFoundError: () => (/* binding */ createNotFoundError),\n/* harmony export */   createValidationError: () => (/* binding */ createValidationError),\n/* harmony export */   extractErrorCode: () => (/* binding */ extractErrorCode),\n/* harmony export */   extractErrorMessage: () => (/* binding */ extractErrorMessage),\n/* harmony export */   extractStatusCode: () => (/* binding */ extractStatusCode),\n/* harmony export */   handlePromiseRejection: () => (/* binding */ handlePromiseRejection),\n/* harmony export */   isAppError: () => (/* binding */ isAppError),\n/* harmony export */   isOperationalError: () => (/* binding */ isOperationalError),\n/* harmony export */   serializeError: () => (/* binding */ serializeError)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(api)/./src/lib/constants.ts\");\n\nclass AppError extends Error {\n    constructor(message, code = _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.INTERNAL_SERVER_ERROR, statusCode = _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.INTERNAL_SERVER_ERROR, isOperational = true, context){\n        super(message);\n        this.name = this.constructor.name;\n        this.code = code;\n        this.statusCode = statusCode;\n        this.isOperational = isOperational;\n        this.context = context;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n// Specific error classes\nclass ValidationError extends AppError {\n    constructor(message, field, context){\n        super(message, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.VALIDATION_ERROR, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.BAD_REQUEST, true, {\n            field,\n            ...context\n        });\n    }\n}\nclass AuthenticationError extends AppError {\n    constructor(message = \"Authentication failed\", context){\n        super(message, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.UNAUTHORIZED, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.UNAUTHORIZED, true, context);\n    }\n}\nclass AuthorizationError extends AppError {\n    constructor(message = \"Access forbidden\", context){\n        super(message, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.RESOURCE_FORBIDDEN, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.FORBIDDEN, true, context);\n    }\n}\nclass NotFoundError extends AppError {\n    constructor(resource = \"Resource\", context){\n        super(`${resource} not found`, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.RESOURCE_NOT_FOUND, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.NOT_FOUND, true, context);\n    }\n}\nclass ConflictError extends AppError {\n    constructor(message, context){\n        super(message, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.RESOURCE_ALREADY_EXISTS, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.CONFLICT, true, context);\n    }\n}\nclass DatabaseError extends AppError {\n    constructor(message, context){\n        super(message, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.DATABASE_ERROR, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.INTERNAL_SERVER_ERROR, true, context);\n    }\n}\nclass ExternalServiceError extends AppError {\n    constructor(service, message, context){\n        super(`External service error (${service}): ${message}`, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.EXTERNAL_SERVICE_ERROR, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.BAD_GATEWAY, true, context);\n    }\n}\nclass RateLimitError extends AppError {\n    constructor(message = \"Rate limit exceeded\", context){\n        super(message, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.RATE_LIMIT_EXCEEDED, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.TOO_MANY_REQUESTS, true, context);\n    }\n}\n// Error factory functions\nfunction createValidationError(field, message, value) {\n    return new ValidationError(message, field, {\n        value\n    });\n}\nfunction createNotFoundError(resource, id) {\n    return new NotFoundError(resource, {\n        id\n    });\n}\nfunction createConflictError(resource, field, value) {\n    return new ConflictError(`${resource} with ${field} '${value}' already exists`, {\n        resource,\n        field,\n        value\n    });\n}\n// Error handling utilities\nfunction isAppError(error) {\n    return error instanceof AppError;\n}\nfunction isOperationalError(error) {\n    if (isAppError(error)) {\n        return error.isOperational;\n    }\n    return false;\n}\nfunction extractErrorMessage(error) {\n    if (error instanceof Error) {\n        return error.message;\n    }\n    if (typeof error === \"string\") {\n        return error;\n    }\n    return \"An unknown error occurred\";\n}\nfunction extractErrorCode(error) {\n    if (isAppError(error)) {\n        return error.code;\n    }\n    return _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.INTERNAL_SERVER_ERROR;\n}\nfunction extractStatusCode(error) {\n    if (isAppError(error)) {\n        return error.statusCode;\n    }\n    return _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.INTERNAL_SERVER_ERROR;\n}\nfunction serializeError(error, includeStack = false) {\n    const serialized = {\n        message: extractErrorMessage(error),\n        code: extractErrorCode(error),\n        statusCode: extractStatusCode(error)\n    };\n    if (isAppError(error) && error.context) {\n        serialized.context = error.context;\n    }\n    if (includeStack && error instanceof Error) {\n        serialized.stack = error.stack;\n    }\n    return serialized;\n}\n// Async error wrapper\nfunction asyncWrapper(fn) {\n    return async (...args)=>{\n        try {\n            return await fn(...args);\n        } catch (error) {\n            if (isOperationalError(error)) {\n                throw error;\n            }\n            // Convert non-operational errors to operational ones\n            throw new AppError(extractErrorMessage(error), _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.INTERNAL_SERVER_ERROR, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.INTERNAL_SERVER_ERROR, false, {\n                originalError: error\n            });\n        }\n    };\n}\n// Promise error handler\nfunction handlePromiseRejection(promise) {\n    return promise.catch((error)=>{\n        if (!isOperationalError(error)) {\n            // Log unexpected errors\n            console.error(\"Unhandled promise rejection:\", error);\n        }\n        throw error;\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/errors.ts\n");

/***/ }),

/***/ "(api)/./src/lib/logger.ts":
/*!***************************!*\
  !*** ./src/lib/logger.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   logApiError: () => (/* binding */ logApiError),\n/* harmony export */   logApiRequest: () => (/* binding */ logApiRequest),\n/* harmony export */   logDatabaseConnection: () => (/* binding */ logDatabaseConnection),\n/* harmony export */   logDatabaseQuery: () => (/* binding */ logDatabaseQuery),\n/* harmony export */   logError: () => (/* binding */ logError),\n/* harmony export */   logHealthCheck: () => (/* binding */ logHealthCheck),\n/* harmony export */   logNetworkInfo: () => (/* binding */ logNetworkInfo),\n/* harmony export */   logStartup: () => (/* binding */ logStartup),\n/* harmony export */   logSystemEvent: () => (/* binding */ logSystemEvent),\n/* harmony export */   logUserAction: () => (/* binding */ logUserAction),\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"(api)/./src/lib/config.ts\");\n\nvar LogLevel;\n(function(LogLevel) {\n    LogLevel[LogLevel[\"ERROR\"] = 0] = \"ERROR\";\n    LogLevel[LogLevel[\"WARN\"] = 1] = \"WARN\";\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n    LogLevel[LogLevel[\"DEBUG\"] = 3] = \"DEBUG\";\n})(LogLevel || (LogLevel = {}));\nclass ConsoleLogger {\n    constructor(level){\n        this.level = this.parseLogLevel(level);\n    }\n    parseLogLevel(level) {\n        switch(level.toLowerCase()){\n            case \"error\":\n                return 0;\n            case \"warn\":\n                return 1;\n            case \"info\":\n                return 2;\n            case \"debug\":\n                return 3;\n            default:\n                return 2;\n        }\n    }\n    shouldLog(level) {\n        return level <= this.level;\n    }\n    formatMessage(level, message, context) {\n        const timestamp = new Date().toISOString();\n        const baseMessage = `[${timestamp}] ${level.toUpperCase()}: ${message}`;\n        if (context && Object.keys(context).length > 0) {\n            if (_config__WEBPACK_IMPORTED_MODULE_0__.config.logging.pretty) {\n                return `${baseMessage}\\n${JSON.stringify(context, null, 2)}`;\n            } else {\n                return `${baseMessage} ${JSON.stringify(context)}`;\n            }\n        }\n        return baseMessage;\n    }\n    error(message, context) {\n        if (this.shouldLog(0)) {\n            console.error(this.formatMessage(\"error\", message, context));\n        }\n    }\n    warn(message, context) {\n        if (this.shouldLog(1)) {\n            console.warn(this.formatMessage(\"warn\", message, context));\n        }\n    }\n    info(message, context) {\n        if (this.shouldLog(2)) {\n            console.info(this.formatMessage(\"info\", message, context));\n        }\n    }\n    debug(message, context) {\n        if (this.shouldLog(3)) {\n            console.debug(this.formatMessage(\"debug\", message, context));\n        }\n    }\n}\n// Create singleton logger instance\nconst logger = new ConsoleLogger(_config__WEBPACK_IMPORTED_MODULE_0__.config.logging.level);\n// Utility functions for structured logging\nfunction logError(error, context) {\n    logger.error(error.message, {\n        ...context,\n        stack: error.stack,\n        name: error.name\n    });\n}\nfunction logApiRequest(method, url, userId, duration) {\n    logger.info(\"API Request\", {\n        method,\n        url,\n        userId,\n        duration: duration ? `${duration}ms` : undefined\n    });\n}\nfunction logApiError(method, url, error, userId) {\n    logger.error(\"API Error\", {\n        method,\n        url,\n        userId,\n        error: error.message,\n        stack: error.stack\n    });\n}\nfunction logDatabaseQuery(query, duration, error) {\n    if (error) {\n        logger.error(\"Database Query Error\", {\n            query,\n            duration: duration ? `${duration}ms` : undefined,\n            error: error.message\n        });\n    } else {\n        logger.debug(\"Database Query\", {\n            query,\n            duration: duration ? `${duration}ms` : undefined\n        });\n    }\n}\nfunction logUserAction(action, userId, context) {\n    logger.info(\"User Action\", {\n        action,\n        userId,\n        ...context\n    });\n}\nfunction logSystemEvent(event, context) {\n    logger.info(\"System Event\", {\n        event,\n        ...context\n    });\n}\nfunction logStartup(component, status, context) {\n    const level = status === \"failed\" ? \"error\" : \"info\";\n    logger[level](`🚀 ${component} ${status.toUpperCase()}`, {\n        component,\n        status,\n        timestamp: new Date().toISOString(),\n        ...context\n    });\n}\nfunction logHealthCheck(component, healthy, context) {\n    const status = healthy ? \"healthy\" : \"unhealthy\";\n    const level = healthy ? \"info\" : \"error\";\n    logger[level](`💚 Health Check: ${component} is ${status}`, {\n        component,\n        healthy,\n        ...context\n    });\n}\nfunction logNetworkInfo(port, host = \"localhost\", context) {\n    logger.info(\"\\uD83C\\uDF10 Server Network Configuration\", {\n        port,\n        host,\n        url: `http://${host}:${port}`,\n        ...context\n    });\n}\nfunction logDatabaseConnection(status, context) {\n    const level = status === \"failed\" ? \"error\" : \"info\";\n    const emoji = status === \"connected\" ? \"✅\" : status === \"connecting\" ? \"\\uD83D\\uDD04\" : \"❌\";\n    logger[level](`${emoji} Database ${status.toUpperCase()}`, {\n        status,\n        ...context\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/logger.ts\n");

/***/ }),

/***/ "(api)/./src/services/reddit.service.ts":
/*!****************************************!*\
  !*** ./src/services/reddit.service.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   redditService: () => (/* binding */ redditService)\n/* harmony export */ });\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/logger */ \"(api)/./src/lib/logger.ts\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/errors */ \"(api)/./src/lib/errors.ts\");\n\n\nclass RedditService {\n    /**\n   * Check if URL is a Reddit URL\n   */ isRedditUrl(url) {\n        return /(?:https?:\\/\\/)?(?:www\\.|old\\.|m\\.|np\\.)?reddit\\.com\\/r\\/\\w+\\/comments\\/\\w+/i.test(url);\n    }\n    /**\n   * Extract Reddit post information from URL\n   */ extractPostInfo(url) {\n        const redditRegex = /(?:https?:\\/\\/)?(?:www\\.|old\\.|m\\.|np\\.)?reddit\\.com\\/r\\/(\\w+)\\/comments\\/([a-zA-Z0-9]+)(?:\\/([^/]+))?/i;\n        const match = url.match(redditRegex);\n        if (!match) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"Invalid Reddit URL format\");\n        }\n        return {\n            subreddit: match[1],\n            postId: match[2],\n            slug: match[3]\n        };\n    }\n    /**\n   * Get Reddit post metadata\n   */ async getPostMetadata(url) {\n        try {\n            const { subreddit, postId } = this.extractPostInfo(url);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Fetching Reddit post metadata\", {\n                subreddit,\n                postId\n            });\n            // Use Reddit JSON API to get post data\n            const jsonUrl = `${this.BASE_URL}/r/${subreddit}/comments/${postId}.json`;\n            const response = await fetch(jsonUrl, {\n                headers: {\n                    \"User-Agent\": \"RateMy Video Platform/1.0 (Educational Content Aggregator)\",\n                    \"Accept\": \"application/json\"\n                }\n            });\n            if (!response.ok) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.APIError(`Failed to fetch Reddit post: ${response.status}`);\n            }\n            const data = await response.json();\n            if (!Array.isArray(data) || data.length === 0) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"Invalid Reddit post response\");\n            }\n            const postData = data[0].data.children[0].data;\n            if (!postData) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"Reddit post not found\");\n            }\n            // Extract video information\n            const videoInfo = this.extractVideoInfo(postData);\n            const metadata = {\n                postId: postData.id,\n                subreddit: postData.subreddit,\n                title: postData.title,\n                author: postData.author,\n                description: postData.selftext || undefined,\n                videoUrl: videoInfo.videoUrl,\n                thumbnailUrl: videoInfo.thumbnailUrl,\n                isNsfw: postData.over_18 || false,\n                upvotes: postData.ups || 0,\n                comments: postData.num_comments || 0,\n                createdAt: postData.created_utc || 0,\n                domain: postData.domain\n            };\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Successfully extracted Reddit metadata\", {\n                postId: metadata.postId,\n                title: metadata.title,\n                hasVideo: !!metadata.videoUrl,\n                isNsfw: metadata.isNsfw\n            });\n            return metadata;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to fetch Reddit metadata\", {\n                url,\n                error\n            });\n            throw error;\n        }\n    }\n    /**\n   * Extract video information from Reddit post data\n   */ extractVideoInfo(postData) {\n        let videoUrl;\n        let thumbnailUrl;\n        // Check Reddit Video (v.redd.it)\n        if (postData.is_video && postData.media?.reddit_video) {\n            videoUrl = postData.media.reddit_video.hls_url || postData.media.reddit_video.fallback_url;\n            thumbnailUrl = postData.preview?.images?.[0]?.source?.url;\n        } else if (postData.domain) {\n            if (postData.domain.includes(\"redgifs.com\")) {\n                // RedGifs content embedded in Reddit\n                videoUrl = postData.url;\n                thumbnailUrl = postData.thumbnail !== \"default\" ? postData.thumbnail : undefined;\n            } else if (postData.domain.includes(\"gfycat.com\")) {\n                // Gfycat content\n                videoUrl = postData.url;\n                thumbnailUrl = postData.thumbnail !== \"default\" ? postData.thumbnail : undefined;\n            } else if (postData.domain.includes(\"imgur.com\")) {\n                // Imgur content\n                if (postData.url.includes(\".gif\") || postData.url.includes(\".mp4\")) {\n                    videoUrl = postData.url;\n                }\n            } else if (postData.domain.includes(\"streamable.com\")) {\n                // Streamable content\n                videoUrl = postData.url;\n            }\n        }\n        // Fallback: check if URL itself is a video\n        if (!videoUrl && postData.url) {\n            const url = postData.url.toLowerCase();\n            if (url.includes(\".mp4\") || url.includes(\".webm\") || url.includes(\".gif\")) {\n                videoUrl = postData.url;\n            }\n        }\n        // Clean up thumbnail URL if it exists\n        if (thumbnailUrl && thumbnailUrl.includes(\"&amp;\")) {\n            thumbnailUrl = thumbnailUrl.replace(/&amp;/g, \"&\");\n        }\n        return {\n            videoUrl,\n            thumbnailUrl\n        };\n    }\n    /**\n   * Convert Reddit URL to embed format\n   */ getEmbedUrl(url) {\n        try {\n            const { subreddit, postId } = this.extractPostInfo(url);\n            // Reddit doesn't have a direct embed format like YouTube\n            // We'll use the Reddit URL directly or create an iframe-friendly version\n            return `${this.BASE_URL}/r/${subreddit}/comments/${postId}/embed/`;\n        } catch (error) {\n            // Fallback to original URL\n            return url;\n        }\n    }\n    /**\n   * Process Reddit URL for video upload\n   */ async processRedditUrl(url) {\n        try {\n            const metadata = await this.getPostMetadata(url);\n            // Determine embed URL based on content type\n            let embedUrl;\n            if (metadata.videoUrl && metadata.domain === \"redgifs.com\") {\n                // Handle RedGifs content embedded in Reddit posts\n                const redgifsMatch = metadata.videoUrl.match(/redgifs\\.com\\/watch\\/([a-zA-Z0-9]+)/);\n                if (redgifsMatch) {\n                    const gifId = redgifsMatch[1];\n                    // Try direct MP4 first, fallback to iframe\n                    const directUrl = `https://media.redgifs.com/${this.capitalizeGifId(gifId)}.mp4`;\n                    try {\n                        const testResponse = await fetch(directUrl, {\n                            method: \"HEAD\"\n                        });\n                        embedUrl = testResponse.ok ? directUrl : `https://www.redgifs.com/ifr/${gifId}?poster=0`;\n                    } catch  {\n                        embedUrl = `https://www.redgifs.com/ifr/${gifId}?poster=0`;\n                    }\n                } else {\n                    embedUrl = metadata.videoUrl;\n                }\n            } else if (metadata.videoUrl) {\n                // Use the direct video URL if available\n                embedUrl = metadata.videoUrl;\n            } else {\n                // Fallback to Reddit embed (won't work well for video)\n                embedUrl = this.getEmbedUrl(url);\n            }\n            // Generate relevant tags\n            const tags = [\n                \"reddit\",\n                `r/${metadata.subreddit}`,\n                ...metadata.isNsfw ? [\n                    \"nsfw\"\n                ] : [\n                    \"sfw\"\n                ],\n                ...metadata.domain ? [\n                    metadata.domain\n                ] : []\n            ];\n            return {\n                embedUrl,\n                thumbnail: metadata.thumbnailUrl,\n                metadata,\n                tags: tags // Removed tag limit\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to process Reddit URL\", {\n                url,\n                error\n            });\n            throw error;\n        }\n    }\n    /**\n   * Get subreddit information\n   */ async getSubredditInfo(subredditName) {\n        try {\n            const response = await fetch(`${this.BASE_URL}/r/${subredditName}/about.json`, {\n                headers: {\n                    \"User-Agent\": \"RateMy Video Platform/1.0 (Educational Content Aggregator)\",\n                    \"Accept\": \"application/json\"\n                }\n            });\n            if (!response.ok) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.APIError(`Failed to fetch subreddit info: ${response.status}`);\n            }\n            const data = await response.json();\n            const subredditData = data.data;\n            return {\n                name: subredditData.display_name,\n                title: subredditData.title,\n                description: subredditData.public_description || subredditData.description,\n                isNsfw: subredditData.over18 || false,\n                subscribers: subredditData.subscribers || 0\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to fetch subreddit info\", {\n                subredditName,\n                error\n            });\n            throw error;\n        }\n    }\n    constructor(){\n        this.BASE_URL = \"https://www.reddit.com\";\n    }\n}\nconst redditService = new RedditService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/services/reddit.service.ts\n");

/***/ }),

/***/ "(api)/./src/services/redgifs.service.ts":
/*!*****************************************!*\
  !*** ./src/services/redgifs.service.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   redGifsService: () => (/* binding */ redGifsService)\n/* harmony export */ });\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/logger */ \"(api)/./src/lib/logger.ts\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/errors */ \"(api)/./src/lib/errors.ts\");\n\n\nclass RedGifsService {\n    /**\n   * Get temporary token for API access\n   */ async getToken() {\n        // Check if current token is still valid\n        if (this.token && Date.now() < this.tokenExpiry) {\n            return this.token;\n        }\n        try {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Requesting new RedGifs API token\");\n            const response = await fetch(`${this.BASE_URL}/auth/temporary`, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (!response.ok) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.APIError(`Failed to get RedGifs token: ${response.status}`);\n            }\n            const data = await response.json();\n            if (!data.token) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.APIError(\"No token returned from RedGifs API\");\n            }\n            this.token = data.token;\n            // Set expiry to 1 hour from now (tokens typically last 24h but we refresh early)\n            this.tokenExpiry = Date.now() + 60 * 60 * 1000;\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Successfully obtained RedGifs API token\");\n            return this.token;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to get RedGifs token\", {\n                error\n            });\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.APIError(\"Failed to authenticate with RedGifs API\");\n        }\n    }\n    /**\n   * Make authenticated request to RedGifs API\n   */ async makeRequest(endpoint, options = {}) {\n        const token = await this.getToken();\n        const response = await fetch(`${this.BASE_URL}${endpoint}`, {\n            ...options,\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\": \"application/json\",\n                ...options.headers\n            }\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"RedGifs API error\", {\n                endpoint,\n                status: response.status,\n                error: errorText\n            });\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.APIError(`RedGifs API error: ${response.status} - ${errorText}`);\n        }\n        return response.json();\n    }\n    /**\n   * Extract RedGifs ID from URL\n   */ extractGifId(url) {\n        const patterns = [\n            /redgifs\\.com\\/watch\\/([a-zA-Z0-9]+)/,\n            /redgifs\\.com\\/ifr\\/([a-zA-Z0-9]+)/,\n            /redgifs\\.com\\/([a-zA-Z0-9]+)$/,\n            /\\/([a-zA-Z0-9]+)$/\n        ];\n        for (const pattern of patterns){\n            const match = url.match(pattern);\n            if (match && match[1]) {\n                return match[1].toLowerCase();\n            }\n        }\n        throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"Invalid RedGifs URL format\");\n    }\n    /**\n   * Check if URL is a RedGifs URL\n   */ isRedGifsUrl(url) {\n        return url.includes(\"redgifs.com\") || url.includes(\"redgifs.com\");\n    }\n    /**\n   * Get metadata for a specific gif by ID\n   */ async getGifMetadata(gifId) {\n        try {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Fetching RedGifs metadata\", {\n                gifId\n            });\n            const response = await this.makeRequest(`/gifs/${gifId}`);\n            if (!response.gif) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"Gif not found\");\n            }\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Successfully fetched RedGifs metadata\", {\n                gifId,\n                title: response.gif.title,\n                tags: response.gif.tags?.length || 0\n            });\n            return response.gif;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to fetch RedGifs metadata\", {\n                gifId,\n                error\n            });\n            throw error;\n        }\n    }\n    /**\n   * Get metadata from RedGifs URL\n   */ async getMetadataFromUrl(url) {\n        if (!this.isRedGifsUrl(url)) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"URL is not a RedGifs URL\");\n        }\n        const gifId = this.extractGifId(url);\n        return this.getGifMetadata(gifId);\n    }\n    /**\n   * Convert RedGifs URL to embed format\n   * Returns the iframe URL that shows just the gif without the full website interface\n   */ getEmbedUrl(gifId) {\n        // Use the iframe URL that shows only the gif content\n        return `https://www.redgifs.com/ifr/${gifId}?poster=0`;\n    }\n    /**\n   * Get direct gif URL from metadata\n   */ getDirectGifUrl(metadata) {\n        // Return the HD URL if available, otherwise SD, otherwise fallback to embed\n        return metadata.urls?.hd || metadata.urls?.sd || this.getEmbedUrl(metadata.id);\n    }\n    /**\n   * Get thumbnail URL for a gif\n   */ getThumbnailUrl(gifId) {\n        return `https://thumbs4.redgifs.com/${gifId}-poster.jpg`;\n    }\n    /**\n   * Search for gifs by tags or query\n   */ async searchGifs(query, options = {}) {\n        try {\n            const { page = 1, count = 20, order = \"trending\" } = options;\n            const params = new URLSearchParams({\n                search_text: query,\n                order,\n                count: count.toString(),\n                page: page.toString()\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Searching RedGifs\", {\n                query,\n                options\n            });\n            const response = await this.makeRequest(`/gifs/search?${params}`);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"RedGifs search completed\", {\n                query,\n                results: response.gifs?.length || 0,\n                total: response.total\n            });\n            return {\n                gifs: response.gifs || [],\n                total: response.total || 0,\n                page: response.page || page\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to search RedGifs\", {\n                query,\n                options,\n                error\n            });\n            throw error;\n        }\n    }\n    /**\n   * Get trending gifs\n   */ async getTrendingGifs(count = 10) {\n        try {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Fetching trending RedGifs\", {\n                count\n            });\n            const response = await this.makeRequest(`/gifs/trending?count=${count}`);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Successfully fetched trending gifs\", {\n                count: response.gifs?.length || 0\n            });\n            return response.gifs || [];\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to fetch trending gifs\", {\n                count,\n                error\n            });\n            throw error;\n        }\n    }\n    /**\n   * Validate and process RedGifs URL for upload\n   */ async processRedGifsUrl(url) {\n        try {\n            const metadata = await this.getMetadataFromUrl(url);\n            const gifId = this.extractGifId(url);\n            // Use direct gif URL for better embedding experience\n            const embedUrl = this.getDirectGifUrl(metadata);\n            return {\n                embedUrl,\n                thumbnail: this.getThumbnailUrl(gifId),\n                metadata,\n                tags: metadata.tags || []\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to process RedGifs URL\", {\n                url,\n                error\n            });\n            throw error;\n        }\n    }\n    constructor(){\n        this.BASE_URL = \"https://api.redgifs.com/v2\";\n        this.token = null;\n        this.tokenExpiry = 0;\n    }\n}\nconst redGifsService = new RedGifsService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/services/redgifs.service.ts\n");

/***/ }),

/***/ "(api)/./src/services/video-metadata.service.ts":
/*!************************************************!*\
  !*** ./src/services/video-metadata.service.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VideoMetadataService: () => (/* binding */ VideoMetadataService),\n/* harmony export */   videoMetadataService: () => (/* binding */ videoMetadataService)\n/* harmony export */ });\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/logger */ \"(api)/./src/lib/logger.ts\");\n\nclass VideoMetadataService {\n    async extractMetadata(originalUrl) {\n        try {\n            // Check for direct video file URLs\n            if (this.isDirectVideoFile(originalUrl)) {\n                return this.extractDirectVideoMetadata(originalUrl);\n            }\n            // Try to match against supported platforms\n            for (const [platform, config] of Object.entries(this.supportedPlatforms)){\n                for (const pattern of config.patterns){\n                    const match = originalUrl.match(pattern);\n                    if (match) {\n                        const videoId = match[1];\n                        _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(`Extracting metadata for ${platform}`, {\n                            videoId,\n                            originalUrl\n                        });\n                        return await config.extract(videoId);\n                    }\n                }\n            }\n            // Try generic oEmbed extraction\n            const oEmbedResult = await this.extractOEmbedMetadata(originalUrl);\n            if (oEmbedResult) {\n                return oEmbedResult;\n            }\n            // Fallback to URL-based extraction\n            return this.extractFallbackMetadata(originalUrl);\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting video metadata\", {\n                originalUrl,\n                error\n            });\n            return this.extractFallbackMetadata(originalUrl);\n        }\n    }\n    isDirectVideoFile(url) {\n        const videoExtensions = [\n            \".mp4\",\n            \".mov\",\n            \".avi\",\n            \".mkv\",\n            \".webm\",\n            \".flv\",\n            \".wmv\",\n            \".m4v\"\n        ];\n        const urlPath = new URL(url).pathname.toLowerCase();\n        return videoExtensions.some((ext)=>urlPath.endsWith(ext));\n    }\n    extractDirectVideoMetadata(originalUrl) {\n        const url = new URL(originalUrl);\n        const filename = url.pathname.split(\"/\").pop() || \"video\";\n        const title = filename.replace(/\\.[^/.]+$/, \"\").replace(/[-_]/g, \" \");\n        return {\n            title: this.titleCase(title),\n            description: `Direct video file: ${filename}`,\n            tags: [\n                \"video\",\n                \"direct-upload\"\n            ],\n            platform: \"direct\",\n            thumbnail: undefined\n        };\n    }\n    async extractYouTubeMetadata(videoId) {\n        try {\n            // Use YouTube oEmbed API for basic metadata\n            const response = await fetch(`https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=${videoId}&format=json`);\n            if (!response.ok) {\n                throw new Error(`YouTube API error: ${response.status}`);\n            }\n            const data = await response.json();\n            // Extract tags from title and description using keywords\n            const tags = this.extractTagsFromText(`${data.title} ${data.author_name}`);\n            return {\n                title: data.title || `YouTube Video ${videoId}`,\n                description: `Video by ${data.author_name}`,\n                tags,\n                thumbnail: data.thumbnail_url\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting YouTube metadata\", {\n                videoId,\n                error\n            });\n            return {\n                title: `YouTube Video ${videoId}`,\n                description: \"\",\n                tags: [\n                    \"youtube\"\n                ],\n                thumbnail: `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`\n            };\n        }\n    }\n    async extractVimeoMetadata(videoId) {\n        try {\n            // Use Vimeo oEmbed API\n            const response = await fetch(`https://vimeo.com/api/oembed.json?url=https://vimeo.com/${videoId}`);\n            if (!response.ok) {\n                throw new Error(`Vimeo API error: ${response.status}`);\n            }\n            const data = await response.json();\n            // Extract tags from title and author\n            const tags = this.extractTagsFromText(`${data.title} ${data.author_name}`);\n            return {\n                title: data.title || `Vimeo Video ${videoId}`,\n                description: data.description || `Video by ${data.author_name}`,\n                tags,\n                thumbnail: data.thumbnail_url,\n                duration: data.duration\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting Vimeo metadata\", {\n                videoId,\n                error\n            });\n            return {\n                title: `Vimeo Video ${videoId}`,\n                description: \"\",\n                tags: [\n                    \"vimeo\"\n                ]\n            };\n        }\n    }\n    async extractTikTokMetadata(videoId) {\n        try {\n            // TikTok doesn't have a public API, so we'll use URL parsing and generic extraction\n            const url = `https://www.tiktok.com/@user/video/${videoId}`;\n            const oEmbedResult = await this.extractOEmbedMetadata(url);\n            if (oEmbedResult) {\n                return {\n                    ...oEmbedResult,\n                    platform: \"tiktok\",\n                    tags: [\n                        ...oEmbedResult.tags || [],\n                        \"tiktok\",\n                        \"short-form\"\n                    ]\n                };\n            }\n            return {\n                title: `TikTok Video ${videoId}`,\n                description: \"TikTok short-form video content\",\n                tags: [\n                    \"tiktok\",\n                    \"short-form\",\n                    \"social\"\n                ],\n                platform: \"tiktok\"\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting TikTok metadata\", {\n                videoId,\n                error\n            });\n            return {\n                title: `TikTok Video ${videoId}`,\n                description: \"TikTok short-form video content\",\n                tags: [\n                    \"tiktok\",\n                    \"short-form\"\n                ],\n                platform: \"tiktok\"\n            };\n        }\n    }\n    async extractInstagramMetadata(videoId) {\n        try {\n            // Instagram oEmbed API\n            const url = `https://www.instagram.com/p/${videoId}/`;\n            const response = await fetch(`https://graph.facebook.com/v8.0/instagram_oembed?url=${encodeURIComponent(url)}&access_token=your_token`);\n            // Since we don't have an access token, fall back to URL parsing\n            const oEmbedResult = await this.extractOEmbedMetadata(url);\n            if (oEmbedResult) {\n                return {\n                    ...oEmbedResult,\n                    platform: \"instagram\",\n                    tags: [\n                        ...oEmbedResult.tags || [],\n                        \"instagram\",\n                        \"social\"\n                    ]\n                };\n            }\n            return {\n                title: `Instagram Video ${videoId}`,\n                description: \"Instagram video content\",\n                tags: [\n                    \"instagram\",\n                    \"social\",\n                    \"video\"\n                ],\n                platform: \"instagram\"\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting Instagram metadata\", {\n                videoId,\n                error\n            });\n            return {\n                title: `Instagram Video ${videoId}`,\n                description: \"Instagram video content\",\n                tags: [\n                    \"instagram\",\n                    \"social\"\n                ],\n                platform: \"instagram\"\n            };\n        }\n    }\n    async extractTwitterMetadata(videoId) {\n        try {\n            // Twitter oEmbed API\n            const url = `https://twitter.com/user/status/${videoId}`;\n            const response = await fetch(`https://publish.twitter.com/oembed?url=${encodeURIComponent(url)}`);\n            if (response.ok) {\n                const data = await response.json();\n                const tags = this.extractTagsFromText(data.html || \"\");\n                return {\n                    title: data.title || `Twitter Video ${videoId}`,\n                    description: \"Twitter video content\",\n                    tags: [\n                        ...tags,\n                        \"twitter\",\n                        \"social\"\n                    ],\n                    platform: \"twitter\"\n                };\n            }\n            return {\n                title: `Twitter Video ${videoId}`,\n                description: \"Twitter video content\",\n                tags: [\n                    \"twitter\",\n                    \"social\",\n                    \"video\"\n                ],\n                platform: \"twitter\"\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting Twitter metadata\", {\n                videoId,\n                error\n            });\n            return {\n                title: `Twitter Video ${videoId}`,\n                description: \"Twitter video content\",\n                tags: [\n                    \"twitter\",\n                    \"social\"\n                ],\n                platform: \"twitter\"\n            };\n        }\n    }\n    async extractDailymotionMetadata(videoId) {\n        try {\n            // Dailymotion oEmbed API\n            const response = await fetch(`https://www.dailymotion.com/services/oembed?url=https://www.dailymotion.com/video/${videoId}&format=json`);\n            if (response.ok) {\n                const data = await response.json();\n                const tags = this.extractTagsFromText(`${data.title} ${data.author_name}`);\n                return {\n                    title: data.title || `Dailymotion Video ${videoId}`,\n                    description: `Video by ${data.author_name}`,\n                    tags: [\n                        ...tags,\n                        \"dailymotion\"\n                    ],\n                    thumbnail: data.thumbnail_url,\n                    platform: \"dailymotion\"\n                };\n            }\n            return {\n                title: `Dailymotion Video ${videoId}`,\n                description: \"Dailymotion video content\",\n                tags: [\n                    \"dailymotion\",\n                    \"video\"\n                ],\n                platform: \"dailymotion\"\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting Dailymotion metadata\", {\n                videoId,\n                error\n            });\n            return {\n                title: `Dailymotion Video ${videoId}`,\n                description: \"Dailymotion video content\",\n                tags: [\n                    \"dailymotion\"\n                ],\n                platform: \"dailymotion\"\n            };\n        }\n    }\n    async extractTwitchMetadata(videoId) {\n        try {\n            // Twitch doesn't have public oEmbed, so we'll use generic extraction\n            const isClip = videoId.length < 15 // Clips have shorter IDs\n            ;\n            const url = isClip ? `https://clips.twitch.tv/${videoId}` : `https://www.twitch.tv/videos/${videoId}`;\n            return {\n                title: isClip ? `Twitch Clip ${videoId}` : `Twitch Video ${videoId}`,\n                description: isClip ? \"Twitch gaming clip\" : \"Twitch gaming video\",\n                tags: [\n                    \"twitch\",\n                    \"gaming\",\n                    \"streaming\",\n                    isClip ? \"clip\" : \"vod\"\n                ],\n                platform: \"twitch\"\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting Twitch metadata\", {\n                videoId,\n                error\n            });\n            return {\n                title: `Twitch Content ${videoId}`,\n                description: \"Twitch gaming content\",\n                tags: [\n                    \"twitch\",\n                    \"gaming\"\n                ],\n                platform: \"twitch\"\n            };\n        }\n    }\n    async extractOEmbedMetadata(originalUrl) {\n        try {\n            // Try common oEmbed endpoints\n            const oEmbedEndpoints = [\n                `https://noembed.com/embed?url=${encodeURIComponent(originalUrl)}`,\n                `https://iframe.ly/api/oembed?url=${encodeURIComponent(originalUrl)}&api_key=your_key`\n            ];\n            for (const endpoint of oEmbedEndpoints){\n                try {\n                    const response = await fetch(endpoint);\n                    if (response.ok) {\n                        const data = await response.json();\n                        if (data.title) {\n                            const tags = this.extractTagsFromText(`${data.title} ${data.description || \"\"} ${data.author_name || \"\"}`);\n                            return {\n                                title: data.title,\n                                description: data.description || \"\",\n                                tags,\n                                thumbnail: data.thumbnail_url,\n                                platform: \"generic\"\n                            };\n                        }\n                    }\n                } catch (err) {\n                    continue;\n                }\n            }\n            return null;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting oEmbed metadata\", {\n                originalUrl,\n                error\n            });\n            return null;\n        }\n    }\n    extractFallbackMetadata(originalUrl) {\n        // Extract domain and basic info from URL\n        try {\n            const url = new URL(originalUrl);\n            const domain = url.hostname.replace(\"www.\", \"\");\n            const pathSegments = url.pathname.split(\"/\").filter(Boolean);\n            // Generate a basic title from URL\n            const title = pathSegments.length > 0 ? this.titleCase(pathSegments[pathSegments.length - 1].replace(/[-_]/g, \" \")) : `Video from ${domain}`;\n            return {\n                title,\n                description: `Video from ${domain}`,\n                tags: [\n                    domain.split(\".\")[0]\n                ]\n            };\n        } catch (error) {\n            return {\n                title: \"Uploaded Video\",\n                description: \"\",\n                tags: [\n                    \"video\"\n                ]\n            };\n        }\n    }\n    extractTagsFromText(text) {\n        if (!text) return [];\n        const commonVideoTags = [\n            \"music\",\n            \"gaming\",\n            \"sports\",\n            \"news\",\n            \"education\",\n            \"entertainment\",\n            \"technology\",\n            \"science\",\n            \"cooking\",\n            \"travel\",\n            \"fashion\",\n            \"fitness\",\n            \"comedy\",\n            \"tutorial\",\n            \"review\",\n            \"unboxing\",\n            \"vlog\",\n            \"documentary\",\n            \"animation\",\n            \"film\",\n            \"art\",\n            \"design\",\n            \"programming\",\n            \"business\",\n            \"lifestyle\",\n            \"health\",\n            \"beauty\",\n            \"diy\",\n            \"how-to\",\n            \"tips\",\n            \"guide\"\n        ];\n        const tags = [];\n        const lowerText = text.toLowerCase();\n        // Check for common video tags in the text\n        commonVideoTags.forEach((tag)=>{\n            if (lowerText.includes(tag)) {\n                tags.push(tag);\n            }\n        });\n        // Extract hashtags if present\n        const hashtagMatches = text.match(/#\\w+/g);\n        if (hashtagMatches) {\n            hashtagMatches.forEach((hashtag)=>{\n                tags.push(hashtag.substring(1).toLowerCase());\n            });\n        }\n        // If no specific tags found, try to categorize based on keywords\n        if (tags.length === 0) {\n            if (/music|song|album|artist|band|concert/i.test(text)) tags.push(\"music\");\n            if (/game|gaming|play|xbox|playstation|nintendo/i.test(text)) tags.push(\"gaming\");\n            if (/tutorial|how.?to|guide|learn|lesson/i.test(text)) tags.push(\"tutorial\");\n            if (/review|unboxing|test|comparison/i.test(text)) tags.push(\"review\");\n            if (/funny|comedy|humor|laugh|joke/i.test(text)) tags.push(\"comedy\");\n            if (/food|cooking|recipe|kitchen|chef/i.test(text)) tags.push(\"cooking\");\n            if (/tech|technology|software|app|coding|programming/i.test(text)) tags.push(\"technology\");\n            if (/news|breaking|update|report/i.test(text)) tags.push(\"news\");\n            if (/sport|football|basketball|soccer|tennis/i.test(text)) tags.push(\"sports\");\n            if (/travel|vacation|trip|adventure|explore/i.test(text)) tags.push(\"travel\");\n        }\n        // Ensure we have at least one tag\n        if (tags.length === 0) {\n            tags.push(\"video\");\n        }\n        // Remove duplicates and limit to 5 tags\n        return Array.from(new Set(tags)).slice(0, 5);\n    }\n    titleCase(str) {\n        return str.replace(/\\w\\S*/g, (txt)=>txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n    }\n    constructor(){\n        this.supportedPlatforms = {\n            youtube: {\n                patterns: [\n                    /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/,\n                    /(?:https?:\\/\\/)?(?:www\\.)?youtube\\.com\\/embed\\/([a-zA-Z0-9_-]{11})/\n                ],\n                extract: (videoId)=>this.extractYouTubeMetadata(videoId)\n            },\n            vimeo: {\n                patterns: [\n                    /(?:https?:\\/\\/)?(?:www\\.)?vimeo\\.com\\/(\\d+)/,\n                    /(?:https?:\\/\\/)?player\\.vimeo\\.com\\/video\\/(\\d+)/\n                ],\n                extract: (videoId)=>this.extractVimeoMetadata(videoId)\n            },\n            tiktok: {\n                patterns: [\n                    /(?:https?:\\/\\/)?(?:www\\.)?tiktok\\.com\\/@[\\w.-]+\\/video\\/(\\d+)/,\n                    /(?:https?:\\/\\/)?vm\\.tiktok\\.com\\/([a-zA-Z0-9]+)/\n                ],\n                extract: (videoId)=>this.extractTikTokMetadata(videoId)\n            },\n            instagram: {\n                patterns: [\n                    /(?:https?:\\/\\/)?(?:www\\.)?instagram\\.com\\/(?:p|reel)\\/([a-zA-Z0-9_-]+)/,\n                    /(?:https?:\\/\\/)?(?:www\\.)?instagram\\.com\\/tv\\/([a-zA-Z0-9_-]+)/\n                ],\n                extract: (videoId)=>this.extractInstagramMetadata(videoId)\n            },\n            twitter: {\n                patterns: [\n                    /(?:https?:\\/\\/)?(?:www\\.)?(?:twitter\\.com|x\\.com)\\/\\w+\\/status\\/(\\d+)/\n                ],\n                extract: (videoId)=>this.extractTwitterMetadata(videoId)\n            },\n            dailymotion: {\n                patterns: [\n                    /(?:https?:\\/\\/)?(?:www\\.)?dailymotion\\.com\\/video\\/([a-zA-Z0-9]+)/\n                ],\n                extract: (videoId)=>this.extractDailymotionMetadata(videoId)\n            },\n            twitch: {\n                patterns: [\n                    /(?:https?:\\/\\/)?(?:www\\.)?twitch\\.tv\\/videos\\/(\\d+)/,\n                    /(?:https?:\\/\\/)?clips\\.twitch\\.tv\\/([a-zA-Z0-9_-]+)/\n                ],\n                extract: (videoId)=>this.extractTwitchMetadata(videoId)\n            }\n        };\n    }\n}\nconst videoMetadataService = new VideoMetadataService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/services/video-metadata.service.ts\n");

/***/ }),

/***/ "(api)/./src/services/xhamster.service.ts":
/*!******************************************!*\
  !*** ./src/services/xhamster.service.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XHamsterServiceImpl: () => (/* binding */ XHamsterServiceImpl),\n/* harmony export */   xHamsterService: () => (/* binding */ xHamsterService)\n/* harmony export */ });\n/* harmony import */ var _src_lib_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/src/lib/logger */ \"(api)/./src/lib/logger.ts\");\n\nclass XHamsterServiceImpl {\n    isXHamsterUrl(url) {\n        return url.includes(\"xhamster.com\");\n    }\n    isValidContentTag(tag) {\n        if (!tag || tag.length < 2 || tag.length > 50) return false;\n        // Technical/platform terms to exclude\n        const blacklist = [\n            // Site/platform names\n            \"xhamster\",\n            \"pornhub\",\n            \"redtube\",\n            \"tube\",\n            \"xvideos\",\n            \"youjizz\",\n            \"spankbang\",\n            \"chaturbate\",\n            \"cam4\",\n            \"bongacams\",\n            \"stripchat\",\n            \"livejasmin\",\n            \"flirt4free\",\n            \"camsoda\",\n            \"onlyfans\",\n            \"manyvids\",\n            \"clips4sale\",\n            \"iwantclips\",\n            \"niteflirt\",\n            // Technical metadata\n            \"video\",\n            \"watch\",\n            \"page\",\n            \"link\",\n            \"site\",\n            \"url\",\n            \"slug\",\n            \"uid\",\n            \"id\",\n            \"name\",\n            \"tags\",\n            \"isbrand\",\n            \"ischannel\",\n            \"isverified\",\n            \"nameen\",\n            \"channel\",\n            \"channels\",\n            \"model\",\n            \"models\",\n            \"category\",\n            \"categories\",\n            \"premium\",\n            \"vip\",\n            \"verified\",\n            \"official\",\n            // Low-level quality/format terms (but allow some descriptive quality terms)\n            \"720p\",\n            \"1080p\",\n            \"uhd\",\n            \"fhd\",\n            \"mp4\",\n            \"avi\",\n            \"wmv\",\n            \"flv\",\n            \"mov\",\n            \"webm\",\n            \"duration\",\n            \"length\",\n            \"size\",\n            \"quality\",\n            \"format\",\n            \"resolution\",\n            // Social/interaction terms\n            \"views\",\n            \"likes\",\n            \"dislikes\",\n            \"comments\",\n            \"share\",\n            \"subscribe\",\n            \"follow\",\n            \"favorite\",\n            \"bookmark\",\n            \"playlist\",\n            \"collection\",\n            \"gallery\",\n            \"abonnement\",\n            // Technical UI/web terms\n            \"embed\",\n            \"iframe\",\n            \"player\",\n            \"thumb\",\n            \"thumbnail\",\n            \"preview\",\n            \"poster\",\n            \"image\",\n            \"img\",\n            \"pic\",\n            \"photo\",\n            \"jpg\",\n            \"jpeg\",\n            \"png\",\n            \"gif\",\n            \"webp\",\n            \"svg\",\n            \"icon\",\n            \"logo\",\n            \"banner\",\n            \"button\",\n            \"click\",\n            \"href\",\n            \"redirect\",\n            // Advertising/tracking\n            \"ad\",\n            \"ads\",\n            \"advertisement\",\n            \"promo\",\n            \"promotion\",\n            \"sponsored\",\n            \"affiliate\",\n            \"referrer\",\n            \"utm\",\n            \"tracking\",\n            \"analytics\",\n            \"pixel\",\n            // Admin/system terms\n            \"admin\",\n            \"administrator\",\n            \"moderator\",\n            \"mod\",\n            \"user\",\n            \"guest\",\n            \"member\",\n            \"subscriber\",\n            \"account\",\n            \"profile\",\n            \"settings\",\n            \"preferences\",\n            \"dashboard\",\n            \"panel\",\n            \"control\",\n            \"manage\",\n            \"edit\",\n            \"delete\",\n            \"create\",\n            \"update\",\n            // General web/tech terms\n            \"website\",\n            \"homepage\",\n            \"contact\",\n            \"about\",\n            \"help\",\n            \"faq\",\n            \"terms\",\n            \"privacy\",\n            \"policy\",\n            \"legal\",\n            \"dmca\",\n            \"copyright\",\n            \"trademark\",\n            \"disclaimer\",\n            \"search\",\n            \"filter\",\n            \"sort\",\n            \"browse\",\n            \"explore\",\n            \"discover\",\n            \"trending\",\n            \"popular\",\n            \"featured\",\n            \"recommended\",\n            \"related\",\n            \"similar\",\n            \"more\",\n            \"all\",\n            \"new\",\n            \"latest\",\n            \"recent\",\n            \"today\",\n            \"week\",\n            \"month\",\n            \"year\",\n            \"date\",\n            \"time\",\n            // Meaningless terms\n            \"content\",\n            \"stuff\",\n            \"things\",\n            \"item\",\n            \"object\",\n            \"element\",\n            \"component\",\n            \"section\",\n            \"part\",\n            \"piece\",\n            \"bit\",\n            \"data\",\n            \"info\",\n            \"information\",\n            \"details\",\n            \"description\",\n            \"title\",\n            \"text\",\n            \"caption\",\n            \"label\",\n            // UI interaction terms\n            \"modifier les mots cl\\xe9s\",\n            \"edit keywords\",\n            \"modifier\",\n            \"edit\"\n        ];\n        const lowerTag = tag.toLowerCase();\n        // Check against blacklist\n        if (blacklist.includes(lowerTag)) return false;\n        // Skip if contains URLs or technical patterns\n        if (lowerTag.includes(\"http\") || lowerTag.includes(\"www\") || lowerTag.includes(\".com\")) return false;\n        // Skip pure numbers (but allow year tags like 1980s)\n        if (/^\\d+$/.test(lowerTag) && lowerTag.length < 4) return false;\n        // Skip hex strings (likely IDs)\n        if (/^[a-f0-9]{8,}$/i.test(lowerTag)) return false;\n        // Skip technical values\n        if (/^(true|false|null|undefined|nan|infinity)$/i.test(lowerTag)) return false;\n        // Skip subscriber counts and numeric social media patterns\n        if (/^\\d+[km]?$/.test(lowerTag)) return false;\n        return true;\n    }\n    normalizeTag(tag) {\n        if (!tag) return \"\";\n        // Convert to lowercase and trim\n        let normalized = tag.toLowerCase().trim();\n        // Remove special characters except hyphens\n        normalized = normalized.replace(/[^\\w\\s-]/g, \"\");\n        // Replace spaces and underscores with hyphens\n        normalized = normalized.replace(/[\\s_]+/g, \"-\");\n        // Remove multiple consecutive hyphens\n        normalized = normalized.replace(/-+/g, \"-\");\n        // Remove leading/trailing hyphens\n        normalized = normalized.replace(/^-+|-+$/g, \"\");\n        // Tag mappings for common variations including French translations from XHamster\n        const tagMappings = {\n            // English variations\n            \"big-boobs\": \"big-tits\",\n            \"big-breasts\": \"big-tits\",\n            \"small-boobs\": \"small-tits\",\n            \"small-breasts\": \"small-tits\",\n            \"big-butt\": \"big-ass\",\n            \"bubble-butt\": \"big-ass\",\n            \"small-butt\": \"small-ass\",\n            \"black\": \"ebony\",\n            \"african\": \"ebony\",\n            \"bj\": \"blowjob\",\n            \"blow-job\": \"blowjob\",\n            \"hj\": \"handjob\",\n            \"hand-job\": \"handjob\",\n            \"fj\": \"footjob\",\n            \"foot-job\": \"footjob\",\n            \"pov\": \"pov\",\n            \"point-of-view\": \"pov\",\n            \"girl-on-girl\": \"lesbian\",\n            \"girl-girl\": \"lesbian\",\n            \"gg\": \"lesbian\",\n            \"boy-boy\": \"gay\",\n            \"mm\": \"gay\",\n            \"girl-boy\": \"straight\",\n            \"milfs\": \"milf\",\n            \"moms\": \"milf\",\n            \"mothers\": \"milf\",\n            \"cougars\": \"cougar\",\n            \"grannies\": \"granny\",\n            \"grandmas\": \"granny\",\n            \"gilf\": \"granny\",\n            // French to English mappings (based on your provided HTML)\n            \"fran\\xe7aises\": \"french\",\n            \"francaises\": \"french\",\n            \"europ\\xe9ennes\": \"european\",\n            \"europeennes\": \"european\",\n            \"f\\xeate\": \"party\",\n            \"fete\": \"party\",\n            \"f\\xeates\": \"party\",\n            \"fetes\": \"party\",\n            \"r\\xe9tro\": \"retro\",\n            \"retro\": \"retro\",\n            \"vid\\xe9os-hd\": \"hd\",\n            \"videos-hd\": \"hd\",\n            \"cougar\": \"cougar\",\n            \"hardcore\": \"hardcore\",\n            \"milf\": \"milf\",\n            \"mature\": \"mature\",\n            \"vintage\": \"vintage\",\n            \"film\": \"movie\",\n            \"hardcore-fran\\xe7ais\": \"french-hardcore\",\n            \"hardcore-francais\": \"french-hardcore\",\n            \"vintage-des-ann\\xe9es-1970\": \"vintage-1970s\",\n            \"vintage-des-annees-1970\": \"vintage-1970s\",\n            \"classique-fran\\xe7ais\": \"french-classic\",\n            \"classique-francais\": \"french-classic\",\n            \"ann\\xe9es-80\": \"1980s\",\n            \"annees-80\": \"1980s\",\n            \"milf-fran\\xe7aises\": \"french-milf\",\n            \"milf-francaises\": \"french-milf\",\n            \"hardcore-classique\": \"classic-hardcore\",\n            \"milfed\": \"milf\",\n            \"hardcore-milfs\": \"hardcore-milf\",\n            \"at-the-party\": \"party\",\n            \"european-milfs\": \"european-milf\",\n            \"before-the-party\": \"party\",\n            \"hardcore-party\": \"hardcore-party\",\n            \"full-hd\": \"hd\",\n            \"my-party\": \"party\",\n            \"in-party\": \"party\",\n            \"partying\": \"party\",\n            \"vintage-classic-full\": \"vintage-classic\",\n            // Common variations\n            \"amateur\": \"amateur\",\n            \"blonde\": \"blonde\",\n            \"brunette\": \"brunette\",\n            \"redhead\": \"redhead\",\n            \"teen\": \"teen\",\n            \"young\": \"teen\",\n            \"old\": \"mature\",\n            \"ebony\": \"ebony\",\n            \"asian\": \"asian\",\n            \"latina\": \"latina\",\n            \"bbw\": \"bbw\",\n            \"titties\": \"tits\",\n            \"boobs\": \"tits\",\n            \"breasts\": \"tits\",\n            \"sex\": \"hardcore\",\n            \"fucking\": \"hardcore\",\n            \"parties\": \"party\",\n            \"1980s\": \"1980s\",\n            \"1970s\": \"1970s\"\n        };\n        // Apply mappings\n        if (tagMappings[normalized]) {\n            normalized = tagMappings[normalized];\n        }\n        return normalized;\n    }\n    async processXHamsterUrl(originalUrl) {\n        try {\n            _src_lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Processing XHamster URL for metadata extraction\", {\n                url: originalUrl\n            });\n            // Fetch the HTML page\n            const response = await fetch(originalUrl, {\n                headers: {\n                    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`Failed to fetch XHamster page: ${response.status}`);\n            }\n            const html = await response.text();\n            // Extract metadata from various sources\n            const metadata = {};\n            // Extract title from meta tags or page title\n            const titleMatch = html.match(/<title[^>]*>([^<]+)<\\/title>/i) || html.match(/<meta[^>]*property=\"og:title\"[^>]*content=\"([^\"]*)\"[^>]*>/i) || html.match(/<meta[^>]*name=\"title\"[^>]*content=\"([^\"]*)\"[^>]*>/i);\n            if (titleMatch) {\n                metadata.title = titleMatch[1].trim();\n            }\n            // Extract description\n            const descMatch = html.match(/<meta[^>]*property=\"og:description\"[^>]*content=\"([^\"]*)\"[^>]*>/i) || html.match(/<meta[^>]*name=\"description\"[^>]*content=\"([^\"]*)\"[^>]*>/i);\n            if (descMatch) {\n                metadata.description = descMatch[1].trim();\n            }\n            // Extract thumbnail from og:image\n            const thumbMatch = html.match(/<meta[^>]*property=\"og:image\"[^>]*content=\"([^\"]*)\"[^>]*>/i);\n            if (thumbMatch) {\n                metadata.thumbnail = thumbMatch[1] // Use the captured group from og:image\n                ;\n            } else {\n                // Fallback: search for direct image URLs\n                const directImageMatch = html.match(/https:\\/\\/ic-vt-[^\"]*\\.xhpingcdn\\.com\\/[^\"]*\\.jpg/g) || html.match(/https:\\/\\/thumb-[^\"]*\\.xhpingcdn\\.com\\/[^\"]*\\.jpg/g);\n                if (directImageMatch) {\n                    metadata.thumbnail = Array.isArray(directImageMatch) ? directImageMatch[0] : directImageMatch;\n                }\n            }\n            // Extract preview URL from initials-script\n            const scriptPatterns = [\n                /<script id=\"initials-script\"[^>]*>([\\s\\S]*?)<\\/script>/i,\n                /<script[^>]*id=\"initials-script\"[^>]*>([\\s\\S]*?)<\\/script>/i,\n                /<script[^>]*initials[^>]*>([\\s\\S]*?)<\\/script>/i\n            ];\n            let scriptContent = null;\n            for (const pattern of scriptPatterns){\n                const match = html.match(pattern);\n                if (match) {\n                    scriptContent = match[1];\n                    break;\n                }\n            }\n            if (scriptContent) {\n                // Look for trailerURL in the script (more flexible regex)\n                const patterns = [\n                    /\"trailerURL\"\\s*:\\s*\"([^\"]*thumb-v[^\"]*\\.xhpingcdn\\.com[^\"]*\\.t\\.mp4[^\"]*)\"/gi,\n                    /\"trailerURL\"\\s*:\\s*\"([^\"]*thumb-v[^\"]*\\.xhpingcdn\\.com[^\"]*\\.mp4[^\"]*)\"/gi,\n                    /\"trailerURL\"\\s*:\\s*\"([^\"]*\\.mp4[^\"]*)\"/gi\n                ];\n                for (const pattern of patterns){\n                    const matches = scriptContent.match(pattern);\n                    if (matches && matches.length > 0) {\n                        // Get the first match and extract URL from capture group\n                        const firstMatch = matches[0].match(/\"trailerURL\"\\s*:\\s*\"([^\"]*)\"/i);\n                        if (firstMatch) {\n                            metadata.previewUrl = firstMatch[1].replace(/\\\\\\//g, \"/\");\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // Fallback: search the entire HTML for trailerURL\n                const patterns = [\n                    /\"trailerURL\"\\s*:\\s*\"([^\"]*thumb-v[^\"]*\\.xhpingcdn\\.com[^\"]*\\.t\\.mp4[^\"]*)\"/gi,\n                    /\"trailerURL\"\\s*:\\s*\"([^\"]*thumb-v[^\"]*\\.xhpingcdn\\.com[^\"]*\\.mp4[^\"]*)\"/gi,\n                    /\"trailerURL\"\\s*:\\s*\"([^\"]*\\.mp4[^\"]*)\"/gi\n                ];\n                for (const pattern of patterns){\n                    const matches = html.match(pattern);\n                    if (matches && matches.length > 0) {\n                        const firstMatch = matches[0].match(/\"trailerURL\"\\s*:\\s*\"([^\"]*)\"/i);\n                        if (firstMatch) {\n                            metadata.previewUrl = firstMatch[1].replace(/\\\\\\//g, \"/\");\n                            break;\n                        }\n                    }\n                }\n            }\n            // Enhanced tags extraction - focus on video-tags-list-container\n            const tags = new Set();\n            // First, try to extract from the specific video-tags-list-container section\n            const videoTagsContainerRegex = /<nav[^>]*id=\"video-tags-list-container\"[^>]*>([\\s\\S]*?)<\\/nav>/i;\n            const videoTagsContainerMatch = html.match(videoTagsContainerRegex);\n            if (videoTagsContainerMatch) {\n                const containerHtml = videoTagsContainerMatch[1];\n                // Extract tag text from spans with class \"body-8643e label-5984a label-96c3e\" or \"body-bold-8643e label-5984a label-96c3e\"\n                // This targets the actual tag labels in the video tags list\n                const tagLabelRegex = /<span[^>]*class=\"[^\"]*(?:body-8643e|body-bold-8643e)[^\"]*label-5984a[^\"]*label-96c3e[^\"]*\"[^>]*>([^<]+)<\\/span>/g;\n                let tagLabelMatch;\n                while((tagLabelMatch = tagLabelRegex.exec(containerHtml)) !== null){\n                    const tagText = tagLabelMatch[1]?.trim();\n                    if (tagText && this.isValidContentTag(tagText)) {\n                        const normalized = this.normalizeTag(tagText);\n                        if (normalized) {\n                            tags.add(normalized);\n                        }\n                    }\n                }\n                // Also extract from href patterns within the container for categories and tags\n                const categoryLinksRegex = /href=\"[^\"]*\\/categories\\/([^\"\\/]+)\"[^>]*>/g;\n                let categoryMatch;\n                while((categoryMatch = categoryLinksRegex.exec(containerHtml)) !== null){\n                    const categorySlug = categoryMatch[1]?.trim();\n                    if (categorySlug && this.isValidContentTag(categorySlug)) {\n                        const normalized = this.normalizeTag(categorySlug);\n                        if (normalized) {\n                            tags.add(normalized);\n                        }\n                    }\n                }\n                const tagLinksRegex = /href=\"[^\"]*\\/tags\\/([^\"\\/]+)\"[^>]*>/g;\n                let tagMatch;\n                while((tagMatch = tagLinksRegex.exec(containerHtml)) !== null){\n                    const tagSlug = tagMatch[1]?.trim();\n                    if (tagSlug && this.isValidContentTag(tagSlug)) {\n                        const normalized = this.normalizeTag(tagSlug);\n                        if (normalized) {\n                            tags.add(normalized);\n                        }\n                    }\n                }\n            }\n            // If no tags found from container, fallback to broader extraction\n            if (tags.size === 0) {\n                // Extract from visible category and tag links in HTML (broader fallback)\n                const categoryLinksRegex = /href=\"[^\"]*\\/categories\\/([^\"\\/]+)\"[^>]*>\\s*<[^>]*>\\s*<span[^>]*>([^<]+)<\\/span>/g;\n                let categoryMatch;\n                while((categoryMatch = categoryLinksRegex.exec(html)) !== null){\n                    const categorySlug = categoryMatch[1]?.trim();\n                    const categoryText = categoryMatch[2]?.trim();\n                    if (categorySlug && this.isValidContentTag(categorySlug)) {\n                        const normalized = this.normalizeTag(categorySlug);\n                        if (normalized) tags.add(normalized);\n                    }\n                    if (categoryText && categoryText !== categorySlug && this.isValidContentTag(categoryText)) {\n                        const normalized = this.normalizeTag(categoryText);\n                        if (normalized) tags.add(normalized);\n                    }\n                }\n                const tagLinksRegex = /href=\"[^\"]*\\/tags\\/([^\"\\/]+)\"[^>]*>\\s*<[^>]*>\\s*<span[^>]*>([^<]+)<\\/span>/g;\n                let tagMatch;\n                while((tagMatch = tagLinksRegex.exec(html)) !== null){\n                    const tagSlug = tagMatch[1]?.trim();\n                    const tagText = tagMatch[2]?.trim();\n                    if (tagSlug && this.isValidContentTag(tagSlug)) {\n                        const normalized = this.normalizeTag(tagSlug);\n                        if (normalized) tags.add(normalized);\n                    }\n                    if (tagText && tagText !== tagSlug && this.isValidContentTag(tagText)) {\n                        const normalized = this.normalizeTag(tagText);\n                        if (normalized) tags.add(normalized);\n                    }\n                }\n            }\n            // Convert Set to Array and apply tag normalization\n            let finalTags = Array.from(tags);\n            // Normalize and clean up tags\n            finalTags = finalTags.map((tag)=>this.normalizeTag(tag)).filter((tag)=>tag && tag.length >= 2 && tag.length <= 50) // Increased limit for longer compound tags\n            .filter((tag, index, array)=>array.indexOf(tag) === index) // Remove duplicates\n            .sort() // Sort alphabetically for consistent output\n            ;\n            metadata.tags = finalTags.length > 0 ? finalTags : undefined;\n            _src_lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"XHamster metadata extracted\", {\n                url: originalUrl,\n                hasTitle: !!metadata.title,\n                hasDescription: !!metadata.description,\n                hasThumbnail: !!metadata.thumbnail,\n                hasPreviewUrl: !!metadata.previewUrl,\n                tagsCount: metadata.tags?.length || 0\n            });\n            return metadata;\n        } catch (error) {\n            _src_lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to process XHamster URL\", {\n                url: originalUrl,\n                error: error instanceof Error ? error.message : error\n            });\n            throw error;\n        }\n    }\n}\nconst xHamsterService = new XHamsterServiceImpl();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFBSSxDQUFDbkI7WUFFM0IsOEJBQThCO1lBQzlCa0IsWUFBWUEsVUFDVEUsR0FBRyxDQUFDNUQsQ0FBQUEsTUFBTyxJQUFJLENBQUNNLFlBQVksQ0FBQ04sTUFDN0I2RCxNQUFNLENBQUM3RCxDQUFBQSxNQUFPQSxPQUFPQSxJQUFJQyxNQUFNLElBQUksS0FBS0QsSUFBSUMsTUFBTSxJQUFJLElBQUksMkNBQTJDO2FBQ3JHNEQsTUFBTSxDQUFDLENBQUM3RCxLQUFLOEQsT0FBT0MsUUFBVUEsTUFBTUMsT0FBTyxDQUFDaEUsU0FBUzhELE9BQU8sb0JBQW9CO2FBQ2hGRyxJQUFJLEdBQUcsNENBQTRDOztZQUV0RDNDLFNBQVNrQixJQUFJLEdBQUdrQixVQUFVekQsTUFBTSxHQUFHLElBQUl5RCxZQUFZUTtZQUVuRHhFLG1EQUFNQSxDQUFDbUIsSUFBSSxDQUFDLCtCQUErQjtnQkFDekNoQixLQUFLZTtnQkFDTHVELFVBQVUsQ0FBQyxDQUFDN0MsU0FBU0csS0FBSztnQkFDMUIyQyxnQkFBZ0IsQ0FBQyxDQUFDOUMsU0FBU0ssV0FBVztnQkFDdEMwQyxjQUFjLENBQUMsQ0FBQy9DLFNBQVNPLFNBQVM7Z0JBQ2xDeUMsZUFBZSxDQUFDLENBQUNoRCxTQUFTaUIsVUFBVTtnQkFDcENnQyxXQUFXakQsU0FBU2tCLElBQUksRUFBRXZDLFVBQVU7WUFDdEM7WUFFQSxPQUFPcUI7UUFFVCxFQUFFLE9BQU9rRCxPQUFPO1lBQ2Q5RSxtREFBTUEsQ0FBQzhFLEtBQUssQ0FBQyxrQ0FBa0M7Z0JBQzdDM0UsS0FBS2U7Z0JBQ0w0RCxPQUFPQSxpQkFBaUJ0RCxRQUFRc0QsTUFBTUMsT0FBTyxHQUFHRDtZQUNsRDtZQUNBLE1BQU1BO1FBQ1I7SUFDRjtBQUNGO0FBRU8sTUFBTUUsa0JBQWtCLElBQUkvRSxzQkFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYXRlbXktbmV4dGpzLy4vc3JjL3NlcnZpY2VzL3hoYW1zdGVyLnNlcnZpY2UudHM/ZDVmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAL3NyYy9saWIvbG9nZ2VyJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFhIYW1zdGVyTWV0YWRhdGEge1xuICB0aXRsZT86IHN0cmluZ1xuICBkZXNjcmlwdGlvbj86IHN0cmluZ1xuICB0aHVtYm5haWw/OiBzdHJpbmdcbiAgcHJldmlld1VybD86IHN0cmluZ1xuICB0YWdzPzogc3RyaW5nW11cbn1cblxuZXhwb3J0IGNsYXNzIFhIYW1zdGVyU2VydmljZUltcGwge1xuICBpc1hIYW1zdGVyVXJsKHVybDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHVybC5pbmNsdWRlcygneGhhbXN0ZXIuY29tJylcbiAgfVxuXG4gIHByaXZhdGUgaXNWYWxpZENvbnRlbnRUYWcodGFnOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoIXRhZyB8fCB0YWcubGVuZ3RoIDwgMiB8fCB0YWcubGVuZ3RoID4gNTApIHJldHVybiBmYWxzZVxuICAgIFxuICAgIC8vIFRlY2huaWNhbC9wbGF0Zm9ybSB0ZXJtcyB0byBleGNsdWRlXG4gICAgY29uc3QgYmxhY2tsaXN0ID0gW1xuICAgICAgLy8gU2l0ZS9wbGF0Zm9ybSBuYW1lc1xuICAgICAgJ3hoYW1zdGVyJywgJ3Bvcm5odWInLCAncmVkdHViZScsICd0dWJlJywgJ3h2aWRlb3MnLCAneW91aml6eicsICdzcGFua2JhbmcnLFxuICAgICAgJ2NoYXR1cmJhdGUnLCAnY2FtNCcsICdib25nYWNhbXMnLCAnc3RyaXBjaGF0JywgJ2xpdmVqYXNtaW4nLCAnZmxpcnQ0ZnJlZScsICdjYW1zb2RhJyxcbiAgICAgICdvbmx5ZmFucycsICdtYW55dmlkcycsICdjbGlwczRzYWxlJywgJ2l3YW50Y2xpcHMnLCAnbml0ZWZsaXJ0JyxcbiAgICAgIFxuICAgICAgLy8gVGVjaG5pY2FsIG1ldGFkYXRhXG4gICAgICAndmlkZW8nLCAnd2F0Y2gnLCAncGFnZScsICdsaW5rJywgJ3NpdGUnLCAndXJsJywgJ3NsdWcnLCAndWlkJywgJ2lkJywgJ25hbWUnLCAndGFncycsXG4gICAgICAnaXNicmFuZCcsICdpc2NoYW5uZWwnLCAnaXN2ZXJpZmllZCcsICduYW1lZW4nLCAnY2hhbm5lbCcsICdjaGFubmVscycsICdtb2RlbCcsICdtb2RlbHMnLFxuICAgICAgJ2NhdGVnb3J5JywgJ2NhdGVnb3JpZXMnLCAncHJlbWl1bScsICd2aXAnLCAndmVyaWZpZWQnLCAnb2ZmaWNpYWwnLFxuICAgICAgXG4gICAgICAvLyBMb3ctbGV2ZWwgcXVhbGl0eS9mb3JtYXQgdGVybXMgKGJ1dCBhbGxvdyBzb21lIGRlc2NyaXB0aXZlIHF1YWxpdHkgdGVybXMpXG4gICAgICAnNzIwcCcsICcxMDgwcCcsICd1aGQnLCAnZmhkJywgJ21wNCcsICdhdmknLCAnd212JywgJ2ZsdicsICdtb3YnLCAnd2VibScsXG4gICAgICAnZHVyYXRpb24nLCAnbGVuZ3RoJywgJ3NpemUnLCAncXVhbGl0eScsICdmb3JtYXQnLCAncmVzb2x1dGlvbicsXG4gICAgICBcbiAgICAgIC8vIFNvY2lhbC9pbnRlcmFjdGlvbiB0ZXJtc1xuICAgICAgJ3ZpZXdzJywgJ2xpa2VzJywgJ2Rpc2xpa2VzJywgJ2NvbW1lbnRzJywgJ3NoYXJlJywgJ3N1YnNjcmliZScsICdmb2xsb3cnLCAnZmF2b3JpdGUnLFxuICAgICAgJ2Jvb2ttYXJrJywgJ3BsYXlsaXN0JywgJ2NvbGxlY3Rpb24nLCAnZ2FsbGVyeScsICdhYm9ubmVtZW50JyxcbiAgICAgIFxuICAgICAgLy8gVGVjaG5pY2FsIFVJL3dlYiB0ZXJtc1xuICAgICAgJ2VtYmVkJywgJ2lmcmFtZScsICdwbGF5ZXInLCAndGh1bWInLCAndGh1bWJuYWlsJywgJ3ByZXZpZXcnLCAncG9zdGVyJyxcbiAgICAgICdpbWFnZScsICdpbWcnLCAncGljJywgJ3Bob3RvJywgJ2pwZycsICdqcGVnJywgJ3BuZycsICdnaWYnLCAnd2VicCcsICdzdmcnLFxuICAgICAgJ2ljb24nLCAnbG9nbycsICdiYW5uZXInLCAnYnV0dG9uJywgJ2NsaWNrJywgJ2hyZWYnLCAncmVkaXJlY3QnLFxuICAgICAgXG4gICAgICAvLyBBZHZlcnRpc2luZy90cmFja2luZ1xuICAgICAgJ2FkJywgJ2FkcycsICdhZHZlcnRpc2VtZW50JywgJ3Byb21vJywgJ3Byb21vdGlvbicsICdzcG9uc29yZWQnLCAnYWZmaWxpYXRlJyxcbiAgICAgICdyZWZlcnJlcicsICd1dG0nLCAndHJhY2tpbmcnLCAnYW5hbHl0aWNzJywgJ3BpeGVsJyxcbiAgICAgIFxuICAgICAgLy8gQWRtaW4vc3lzdGVtIHRlcm1zXG4gICAgICAnYWRtaW4nLCAnYWRtaW5pc3RyYXRvcicsICdtb2RlcmF0b3InLCAnbW9kJywgJ3VzZXInLCAnZ3Vlc3QnLCAnbWVtYmVyJyxcbiAgICAgICdzdWJzY3JpYmVyJywgJ2FjY291bnQnLCAncHJvZmlsZScsICdzZXR0aW5ncycsICdwcmVmZXJlbmNlcycsICdkYXNoYm9hcmQnLFxuICAgICAgJ3BhbmVsJywgJ2NvbnRyb2wnLCAnbWFuYWdlJywgJ2VkaXQnLCAnZGVsZXRlJywgJ2NyZWF0ZScsICd1cGRhdGUnLFxuICAgICAgXG4gICAgICAvLyBHZW5lcmFsIHdlYi90ZWNoIHRlcm1zXG4gICAgICAnd2Vic2l0ZScsICdob21lcGFnZScsICdjb250YWN0JywgJ2Fib3V0JywgJ2hlbHAnLCAnZmFxJywgJ3Rlcm1zJywgJ3ByaXZhY3knLFxuICAgICAgJ3BvbGljeScsICdsZWdhbCcsICdkbWNhJywgJ2NvcHlyaWdodCcsICd0cmFkZW1hcmsnLCAnZGlzY2xhaW1lcicsXG4gICAgICAnc2VhcmNoJywgJ2ZpbHRlcicsICdzb3J0JywgJ2Jyb3dzZScsICdleHBsb3JlJywgJ2Rpc2NvdmVyJywgJ3RyZW5kaW5nJyxcbiAgICAgICdwb3B1bGFyJywgJ2ZlYXR1cmVkJywgJ3JlY29tbWVuZGVkJywgJ3JlbGF0ZWQnLCAnc2ltaWxhcicsICdtb3JlJywgJ2FsbCcsXG4gICAgICAnbmV3JywgJ2xhdGVzdCcsICdyZWNlbnQnLCAndG9kYXknLCAnd2VlaycsICdtb250aCcsICd5ZWFyJywgJ2RhdGUnLCAndGltZScsXG4gICAgICBcbiAgICAgIC8vIE1lYW5pbmdsZXNzIHRlcm1zXG4gICAgICAnY29udGVudCcsICdzdHVmZicsICd0aGluZ3MnLCAnaXRlbScsICdvYmplY3QnLCAnZWxlbWVudCcsICdjb21wb25lbnQnLFxuICAgICAgJ3NlY3Rpb24nLCAncGFydCcsICdwaWVjZScsICdiaXQnLCAnZGF0YScsICdpbmZvJywgJ2luZm9ybWF0aW9uJyxcbiAgICAgICdkZXRhaWxzJywgJ2Rlc2NyaXB0aW9uJywgJ3RpdGxlJywgJ3RleHQnLCAnY2FwdGlvbicsICdsYWJlbCcsXG4gICAgICBcbiAgICAgIC8vIFVJIGludGVyYWN0aW9uIHRlcm1zXG4gICAgICAnbW9kaWZpZXIgbGVzIG1vdHMgY2zDqXMnLCAnZWRpdCBrZXl3b3JkcycsICdtb2RpZmllcicsICdlZGl0J1xuICAgIF1cbiAgICBcbiAgICBjb25zdCBsb3dlclRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpXG4gICAgXG4gICAgLy8gQ2hlY2sgYWdhaW5zdCBibGFja2xpc3RcbiAgICBpZiAoYmxhY2tsaXN0LmluY2x1ZGVzKGxvd2VyVGFnKSkgcmV0dXJuIGZhbHNlXG4gICAgXG4gICAgLy8gU2tpcCBpZiBjb250YWlucyBVUkxzIG9yIHRlY2huaWNhbCBwYXR0ZXJuc1xuICAgIGlmIChsb3dlclRhZy5pbmNsdWRlcygnaHR0cCcpIHx8IGxvd2VyVGFnLmluY2x1ZGVzKCd3d3cnKSB8fCBsb3dlclRhZy5pbmNsdWRlcygnLmNvbScpKSByZXR1cm4gZmFsc2VcbiAgICBcbiAgICAvLyBTa2lwIHB1cmUgbnVtYmVycyAoYnV0IGFsbG93IHllYXIgdGFncyBsaWtlIDE5ODBzKVxuICAgIGlmICgvXlxcZCskLy50ZXN0KGxvd2VyVGFnKSAmJiBsb3dlclRhZy5sZW5ndGggPCA0KSByZXR1cm4gZmFsc2VcbiAgICBcbiAgICAvLyBTa2lwIGhleCBzdHJpbmdzIChsaWtlbHkgSURzKVxuICAgIGlmICgvXlthLWYwLTldezgsfSQvaS50ZXN0KGxvd2VyVGFnKSkgcmV0dXJuIGZhbHNlXG4gICAgXG4gICAgLy8gU2tpcCB0ZWNobmljYWwgdmFsdWVzXG4gICAgaWYgKC9eKHRydWV8ZmFsc2V8bnVsbHx1bmRlZmluZWR8bmFufGluZmluaXR5KSQvaS50ZXN0KGxvd2VyVGFnKSkgcmV0dXJuIGZhbHNlXG4gICAgXG4gICAgLy8gU2tpcCBzdWJzY3JpYmVyIGNvdW50cyBhbmQgbnVtZXJpYyBzb2NpYWwgbWVkaWEgcGF0dGVybnNcbiAgICBpZiAoL15cXGQrW2ttXT8kLy50ZXN0KGxvd2VyVGFnKSkgcmV0dXJuIGZhbHNlXG4gICAgXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIHByaXZhdGUgbm9ybWFsaXplVGFnKHRhZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoIXRhZykgcmV0dXJuICcnXG4gICAgXG4gICAgLy8gQ29udmVydCB0byBsb3dlcmNhc2UgYW5kIHRyaW1cbiAgICBsZXQgbm9ybWFsaXplZCA9IHRhZy50b0xvd2VyQ2FzZSgpLnRyaW0oKVxuICAgIFxuICAgIC8vIFJlbW92ZSBzcGVjaWFsIGNoYXJhY3RlcnMgZXhjZXB0IGh5cGhlbnNcbiAgICBub3JtYWxpemVkID0gbm9ybWFsaXplZC5yZXBsYWNlKC9bXlxcd1xccy1dL2csICcnKVxuICAgIFxuICAgIC8vIFJlcGxhY2Ugc3BhY2VzIGFuZCB1bmRlcnNjb3JlcyB3aXRoIGh5cGhlbnNcbiAgICBub3JtYWxpemVkID0gbm9ybWFsaXplZC5yZXBsYWNlKC9bXFxzX10rL2csICctJylcbiAgICBcbiAgICAvLyBSZW1vdmUgbXVsdGlwbGUgY29uc2VjdXRpdmUgaHlwaGVuc1xuICAgIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVkLnJlcGxhY2UoLy0rL2csICctJylcbiAgICBcbiAgICAvLyBSZW1vdmUgbGVhZGluZy90cmFpbGluZyBoeXBoZW5zXG4gICAgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQucmVwbGFjZSgvXi0rfC0rJC9nLCAnJylcbiAgICBcbiAgICAvLyBUYWcgbWFwcGluZ3MgZm9yIGNvbW1vbiB2YXJpYXRpb25zIGluY2x1ZGluZyBGcmVuY2ggdHJhbnNsYXRpb25zIGZyb20gWEhhbXN0ZXJcbiAgICBjb25zdCB0YWdNYXBwaW5nczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgIC8vIEVuZ2xpc2ggdmFyaWF0aW9uc1xuICAgICAgJ2JpZy1ib29icyc6ICdiaWctdGl0cycsXG4gICAgICAnYmlnLWJyZWFzdHMnOiAnYmlnLXRpdHMnLFxuICAgICAgJ3NtYWxsLWJvb2JzJzogJ3NtYWxsLXRpdHMnLFxuICAgICAgJ3NtYWxsLWJyZWFzdHMnOiAnc21hbGwtdGl0cycsXG4gICAgICAnYmlnLWJ1dHQnOiAnYmlnLWFzcycsXG4gICAgICAnYnViYmxlLWJ1dHQnOiAnYmlnLWFzcycsXG4gICAgICAnc21hbGwtYnV0dCc6ICdzbWFsbC1hc3MnLFxuICAgICAgJ2JsYWNrJzogJ2Vib255JyxcbiAgICAgICdhZnJpY2FuJzogJ2Vib255JyxcbiAgICAgICdiaic6ICdibG93am9iJyxcbiAgICAgICdibG93LWpvYic6ICdibG93am9iJyxcbiAgICAgICdoaic6ICdoYW5kam9iJyxcbiAgICAgICdoYW5kLWpvYic6ICdoYW5kam9iJyxcbiAgICAgICdmaic6ICdmb290am9iJyxcbiAgICAgICdmb290LWpvYic6ICdmb290am9iJyxcbiAgICAgICdwb3YnOiAncG92JyxcbiAgICAgICdwb2ludC1vZi12aWV3JzogJ3BvdicsXG4gICAgICAnZ2lybC1vbi1naXJsJzogJ2xlc2JpYW4nLFxuICAgICAgJ2dpcmwtZ2lybCc6ICdsZXNiaWFuJyxcbiAgICAgICdnZyc6ICdsZXNiaWFuJyxcbiAgICAgICdib3ktYm95JzogJ2dheScsXG4gICAgICAnbW0nOiAnZ2F5JyxcbiAgICAgICdnaXJsLWJveSc6ICdzdHJhaWdodCcsXG4gICAgICAnbWlsZnMnOiAnbWlsZicsXG4gICAgICAnbW9tcyc6ICdtaWxmJyxcbiAgICAgICdtb3RoZXJzJzogJ21pbGYnLFxuICAgICAgJ2NvdWdhcnMnOiAnY291Z2FyJyxcbiAgICAgICdncmFubmllcyc6ICdncmFubnknLFxuICAgICAgJ2dyYW5kbWFzJzogJ2dyYW5ueScsXG4gICAgICAnZ2lsZic6ICdncmFubnknLFxuICAgICAgXG4gICAgICAvLyBGcmVuY2ggdG8gRW5nbGlzaCBtYXBwaW5ncyAoYmFzZWQgb24geW91ciBwcm92aWRlZCBIVE1MKVxuICAgICAgJ2ZyYW7Dp2Fpc2VzJzogJ2ZyZW5jaCcsXG4gICAgICAnZnJhbmNhaXNlcyc6ICdmcmVuY2gnLFxuICAgICAgJ2V1cm9ww6llbm5lcyc6ICdldXJvcGVhbicsXG4gICAgICAnZXVyb3BlZW5uZXMnOiAnZXVyb3BlYW4nLFxuICAgICAgJ2bDqnRlJzogJ3BhcnR5JyxcbiAgICAgICdmZXRlJzogJ3BhcnR5JyxcbiAgICAgICdmw6p0ZXMnOiAncGFydHknLFxuICAgICAgJ2ZldGVzJzogJ3BhcnR5JyxcbiAgICAgICdyw6l0cm8nOiAncmV0cm8nLFxuICAgICAgJ3JldHJvJzogJ3JldHJvJyxcbiAgICAgICd2aWTDqW9zLWhkJzogJ2hkJyxcbiAgICAgICd2aWRlb3MtaGQnOiAnaGQnLFxuICAgICAgJ2NvdWdhcic6ICdjb3VnYXInLFxuICAgICAgJ2hhcmRjb3JlJzogJ2hhcmRjb3JlJyxcbiAgICAgICdtaWxmJzogJ21pbGYnLFxuICAgICAgJ21hdHVyZSc6ICdtYXR1cmUnLFxuICAgICAgJ3ZpbnRhZ2UnOiAndmludGFnZScsXG4gICAgICAnZmlsbSc6ICdtb3ZpZScsXG4gICAgICAnaGFyZGNvcmUtZnJhbsOnYWlzJzogJ2ZyZW5jaC1oYXJkY29yZScsXG4gICAgICAnaGFyZGNvcmUtZnJhbmNhaXMnOiAnZnJlbmNoLWhhcmRjb3JlJyxcbiAgICAgICd2aW50YWdlLWRlcy1hbm7DqWVzLTE5NzAnOiAndmludGFnZS0xOTcwcycsXG4gICAgICAndmludGFnZS1kZXMtYW5uZWVzLTE5NzAnOiAndmludGFnZS0xOTcwcycsXG4gICAgICAnY2xhc3NpcXVlLWZyYW7Dp2Fpcyc6ICdmcmVuY2gtY2xhc3NpYycsXG4gICAgICAnY2xhc3NpcXVlLWZyYW5jYWlzJzogJ2ZyZW5jaC1jbGFzc2ljJyxcbiAgICAgICdhbm7DqWVzLTgwJzogJzE5ODBzJyxcbiAgICAgICdhbm5lZXMtODAnOiAnMTk4MHMnLFxuICAgICAgJ21pbGYtZnJhbsOnYWlzZXMnOiAnZnJlbmNoLW1pbGYnLFxuICAgICAgJ21pbGYtZnJhbmNhaXNlcyc6ICdmcmVuY2gtbWlsZicsXG4gICAgICAnaGFyZGNvcmUtY2xhc3NpcXVlJzogJ2NsYXNzaWMtaGFyZGNvcmUnLFxuICAgICAgJ21pbGZlZCc6ICdtaWxmJyxcbiAgICAgICdoYXJkY29yZS1taWxmcyc6ICdoYXJkY29yZS1taWxmJyxcbiAgICAgICdhdC10aGUtcGFydHknOiAncGFydHknLFxuICAgICAgJ2V1cm9wZWFuLW1pbGZzJzogJ2V1cm9wZWFuLW1pbGYnLFxuICAgICAgJ2JlZm9yZS10aGUtcGFydHknOiAncGFydHknLFxuICAgICAgJ2hhcmRjb3JlLXBhcnR5JzogJ2hhcmRjb3JlLXBhcnR5JyxcbiAgICAgICdmdWxsLWhkJzogJ2hkJyxcbiAgICAgICdteS1wYXJ0eSc6ICdwYXJ0eScsXG4gICAgICAnaW4tcGFydHknOiAncGFydHknLFxuICAgICAgJ3BhcnR5aW5nJzogJ3BhcnR5JyxcbiAgICAgICd2aW50YWdlLWNsYXNzaWMtZnVsbCc6ICd2aW50YWdlLWNsYXNzaWMnLFxuICAgICAgXG4gICAgICAvLyBDb21tb24gdmFyaWF0aW9uc1xuICAgICAgJ2FtYXRldXInOiAnYW1hdGV1cicsXG4gICAgICAnYmxvbmRlJzogJ2Jsb25kZScsXG4gICAgICAnYnJ1bmV0dGUnOiAnYnJ1bmV0dGUnLFxuICAgICAgJ3JlZGhlYWQnOiAncmVkaGVhZCcsXG4gICAgICAndGVlbic6ICd0ZWVuJyxcbiAgICAgICd5b3VuZyc6ICd0ZWVuJyxcbiAgICAgICdvbGQnOiAnbWF0dXJlJyxcbiAgICAgICdlYm9ueSc6ICdlYm9ueScsXG4gICAgICAnYXNpYW4nOiAnYXNpYW4nLFxuICAgICAgJ2xhdGluYSc6ICdsYXRpbmEnLFxuICAgICAgJ2Jidyc6ICdiYncnLFxuICAgICAgJ3RpdHRpZXMnOiAndGl0cycsXG4gICAgICAnYm9vYnMnOiAndGl0cycsXG4gICAgICAnYnJlYXN0cyc6ICd0aXRzJyxcbiAgICAgICdzZXgnOiAnaGFyZGNvcmUnLFxuICAgICAgJ2Z1Y2tpbmcnOiAnaGFyZGNvcmUnLFxuICAgICAgJ3BhcnRpZXMnOiAncGFydHknLFxuICAgICAgJzE5ODBzJzogJzE5ODBzJyxcbiAgICAgICcxOTcwcyc6ICcxOTcwcydcbiAgICB9XG4gICAgXG4gICAgLy8gQXBwbHkgbWFwcGluZ3NcbiAgICBpZiAodGFnTWFwcGluZ3Nbbm9ybWFsaXplZF0pIHtcbiAgICAgIG5vcm1hbGl6ZWQgPSB0YWdNYXBwaW5nc1tub3JtYWxpemVkXVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gbm9ybWFsaXplZFxuICB9XG5cbiAgYXN5bmMgcHJvY2Vzc1hIYW1zdGVyVXJsKG9yaWdpbmFsVXJsOiBzdHJpbmcpOiBQcm9taXNlPFhIYW1zdGVyTWV0YWRhdGE+IHtcbiAgICB0cnkge1xuICAgICAgbG9nZ2VyLmluZm8oJ1Byb2Nlc3NpbmcgWEhhbXN0ZXIgVVJMIGZvciBtZXRhZGF0YSBleHRyYWN0aW9uJywgeyB1cmw6IG9yaWdpbmFsVXJsIH0pXG5cbiAgICAgIC8vIEZldGNoIHRoZSBIVE1MIHBhZ2VcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gob3JpZ2luYWxVcmwsIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS85MS4wLjQ0NzIuMTI0IFNhZmFyaS81MzcuMzYnXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggWEhhbXN0ZXIgcGFnZTogJHtyZXNwb25zZS5zdGF0dXN9YClcbiAgICAgIH1cblxuICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKVxuXG4gICAgICAvLyBFeHRyYWN0IG1ldGFkYXRhIGZyb20gdmFyaW91cyBzb3VyY2VzXG4gICAgICBjb25zdCBtZXRhZGF0YTogWEhhbXN0ZXJNZXRhZGF0YSA9IHt9XG5cbiAgICAgIC8vIEV4dHJhY3QgdGl0bGUgZnJvbSBtZXRhIHRhZ3Mgb3IgcGFnZSB0aXRsZVxuICAgICAgY29uc3QgdGl0bGVNYXRjaCA9IGh0bWwubWF0Y2goLzx0aXRsZVtePl0qPihbXjxdKyk8XFwvdGl0bGU+L2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sLm1hdGNoKC88bWV0YVtePl0qcHJvcGVydHk9XCJvZzp0aXRsZVwiW14+XSpjb250ZW50PVwiKFteXCJdKilcIltePl0qPi9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbC5tYXRjaCgvPG1ldGFbXj5dKm5hbWU9XCJ0aXRsZVwiW14+XSpjb250ZW50PVwiKFteXCJdKilcIltePl0qPi9pKVxuICAgICAgaWYgKHRpdGxlTWF0Y2gpIHtcbiAgICAgICAgbWV0YWRhdGEudGl0bGUgPSB0aXRsZU1hdGNoWzFdLnRyaW0oKVxuICAgICAgfVxuXG4gICAgICAvLyBFeHRyYWN0IGRlc2NyaXB0aW9uXG4gICAgICBjb25zdCBkZXNjTWF0Y2ggPSBodG1sLm1hdGNoKC88bWV0YVtePl0qcHJvcGVydHk9XCJvZzpkZXNjcmlwdGlvblwiW14+XSpjb250ZW50PVwiKFteXCJdKilcIltePl0qPi9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICBodG1sLm1hdGNoKC88bWV0YVtePl0qbmFtZT1cImRlc2NyaXB0aW9uXCJbXj5dKmNvbnRlbnQ9XCIoW15cIl0qKVwiW14+XSo+L2kpXG4gICAgICBpZiAoZGVzY01hdGNoKSB7XG4gICAgICAgIG1ldGFkYXRhLmRlc2NyaXB0aW9uID0gZGVzY01hdGNoWzFdLnRyaW0oKVxuICAgICAgfVxuXG4gICAgICAvLyBFeHRyYWN0IHRodW1ibmFpbCBmcm9tIG9nOmltYWdlXG4gICAgICBjb25zdCB0aHVtYk1hdGNoID0gaHRtbC5tYXRjaCgvPG1ldGFbXj5dKnByb3BlcnR5PVwib2c6aW1hZ2VcIltePl0qY29udGVudD1cIihbXlwiXSopXCJbXj5dKj4vaSlcbiAgICAgIGlmICh0aHVtYk1hdGNoKSB7XG4gICAgICAgIG1ldGFkYXRhLnRodW1ibmFpbCA9IHRodW1iTWF0Y2hbMV0gLy8gVXNlIHRoZSBjYXB0dXJlZCBncm91cCBmcm9tIG9nOmltYWdlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGYWxsYmFjazogc2VhcmNoIGZvciBkaXJlY3QgaW1hZ2UgVVJMc1xuICAgICAgICBjb25zdCBkaXJlY3RJbWFnZU1hdGNoID0gaHRtbC5tYXRjaCgvaHR0cHM6XFwvXFwvaWMtdnQtW15cIl0qXFwueGhwaW5nY2RuXFwuY29tXFwvW15cIl0qXFwuanBnL2cpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwubWF0Y2goL2h0dHBzOlxcL1xcL3RodW1iLVteXCJdKlxcLnhocGluZ2NkblxcLmNvbVxcL1teXCJdKlxcLmpwZy9nKVxuICAgICAgICBpZiAoZGlyZWN0SW1hZ2VNYXRjaCkge1xuICAgICAgICAgIG1ldGFkYXRhLnRodW1ibmFpbCA9IEFycmF5LmlzQXJyYXkoZGlyZWN0SW1hZ2VNYXRjaCkgPyBkaXJlY3RJbWFnZU1hdGNoWzBdIDogZGlyZWN0SW1hZ2VNYXRjaFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEV4dHJhY3QgcHJldmlldyBVUkwgZnJvbSBpbml0aWFscy1zY3JpcHRcbiAgICAgIGNvbnN0IHNjcmlwdFBhdHRlcm5zID0gW1xuICAgICAgICAvPHNjcmlwdCBpZD1cImluaXRpYWxzLXNjcmlwdFwiW14+XSo+KFtcXHNcXFNdKj8pPFxcL3NjcmlwdD4vaSxcbiAgICAgICAgLzxzY3JpcHRbXj5dKmlkPVwiaW5pdGlhbHMtc2NyaXB0XCJbXj5dKj4oW1xcc1xcU10qPyk8XFwvc2NyaXB0Pi9pLFxuICAgICAgICAvPHNjcmlwdFtePl0qaW5pdGlhbHNbXj5dKj4oW1xcc1xcU10qPyk8XFwvc2NyaXB0Pi9pXG4gICAgICBdXG4gICAgICBcbiAgICAgIGxldCBzY3JpcHRDb250ZW50ID0gbnVsbFxuICAgICAgXG4gICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2Ygc2NyaXB0UGF0dGVybnMpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBodG1sLm1hdGNoKHBhdHRlcm4pXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIHNjcmlwdENvbnRlbnQgPSBtYXRjaFsxXVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKHNjcmlwdENvbnRlbnQpIHtcbiAgICAgICAgLy8gTG9vayBmb3IgdHJhaWxlclVSTCBpbiB0aGUgc2NyaXB0IChtb3JlIGZsZXhpYmxlIHJlZ2V4KVxuICAgICAgICBjb25zdCBwYXR0ZXJucyA9IFtcbiAgICAgICAgICAvXCJ0cmFpbGVyVVJMXCJcXHMqOlxccypcIihbXlwiXSp0aHVtYi12W15cIl0qXFwueGhwaW5nY2RuXFwuY29tW15cIl0qXFwudFxcLm1wNFteXCJdKilcIi9naSxcbiAgICAgICAgICAvXCJ0cmFpbGVyVVJMXCJcXHMqOlxccypcIihbXlwiXSp0aHVtYi12W15cIl0qXFwueGhwaW5nY2RuXFwuY29tW15cIl0qXFwubXA0W15cIl0qKVwiL2dpLFxuICAgICAgICAgIC9cInRyYWlsZXJVUkxcIlxccyo6XFxzKlwiKFteXCJdKlxcLm1wNFteXCJdKilcIi9naVxuICAgICAgICBdXG4gICAgICAgIFxuICAgICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgcGF0dGVybnMpIHtcbiAgICAgICAgICBjb25zdCBtYXRjaGVzID0gc2NyaXB0Q29udGVudC5tYXRjaChwYXR0ZXJuKVxuICAgICAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gR2V0IHRoZSBmaXJzdCBtYXRjaCBhbmQgZXh0cmFjdCBVUkwgZnJvbSBjYXB0dXJlIGdyb3VwXG4gICAgICAgICAgICBjb25zdCBmaXJzdE1hdGNoID0gbWF0Y2hlc1swXS5tYXRjaCgvXCJ0cmFpbGVyVVJMXCJcXHMqOlxccypcIihbXlwiXSopXCIvaSlcbiAgICAgICAgICAgIGlmIChmaXJzdE1hdGNoKSB7XG4gICAgICAgICAgICAgIG1ldGFkYXRhLnByZXZpZXdVcmwgPSBmaXJzdE1hdGNoWzFdLnJlcGxhY2UoL1xcXFxcXC8vZywgJy8nKVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRmFsbGJhY2s6IHNlYXJjaCB0aGUgZW50aXJlIEhUTUwgZm9yIHRyYWlsZXJVUkxcbiAgICAgICAgY29uc3QgcGF0dGVybnMgPSBbXG4gICAgICAgICAgL1widHJhaWxlclVSTFwiXFxzKjpcXHMqXCIoW15cIl0qdGh1bWItdlteXCJdKlxcLnhocGluZ2NkblxcLmNvbVteXCJdKlxcLnRcXC5tcDRbXlwiXSopXCIvZ2ksXG4gICAgICAgICAgL1widHJhaWxlclVSTFwiXFxzKjpcXHMqXCIoW15cIl0qdGh1bWItdlteXCJdKlxcLnhocGluZ2NkblxcLmNvbVteXCJdKlxcLm1wNFteXCJdKilcIi9naSxcbiAgICAgICAgICAvXCJ0cmFpbGVyVVJMXCJcXHMqOlxccypcIihbXlwiXSpcXC5tcDRbXlwiXSopXCIvZ2lcbiAgICAgICAgXVxuICAgICAgICBcbiAgICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIHBhdHRlcm5zKSB7XG4gICAgICAgICAgY29uc3QgbWF0Y2hlcyA9IGh0bWwubWF0Y2gocGF0dGVybilcbiAgICAgICAgICBpZiAobWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0TWF0Y2ggPSBtYXRjaGVzWzBdLm1hdGNoKC9cInRyYWlsZXJVUkxcIlxccyo6XFxzKlwiKFteXCJdKilcIi9pKVxuICAgICAgICAgICAgaWYgKGZpcnN0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgbWV0YWRhdGEucHJldmlld1VybCA9IGZpcnN0TWF0Y2hbMV0ucmVwbGFjZSgvXFxcXFxcLy9nLCAnLycpXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEVuaGFuY2VkIHRhZ3MgZXh0cmFjdGlvbiAtIGZvY3VzIG9uIHZpZGVvLXRhZ3MtbGlzdC1jb250YWluZXJcbiAgICAgIGNvbnN0IHRhZ3MgPSBuZXcgU2V0PHN0cmluZz4oKVxuXG4gICAgICAvLyBGaXJzdCwgdHJ5IHRvIGV4dHJhY3QgZnJvbSB0aGUgc3BlY2lmaWMgdmlkZW8tdGFncy1saXN0LWNvbnRhaW5lciBzZWN0aW9uXG4gICAgICBjb25zdCB2aWRlb1RhZ3NDb250YWluZXJSZWdleCA9IC88bmF2W14+XSppZD1cInZpZGVvLXRhZ3MtbGlzdC1jb250YWluZXJcIltePl0qPihbXFxzXFxTXSo/KTxcXC9uYXY+L2lcbiAgICAgIGNvbnN0IHZpZGVvVGFnc0NvbnRhaW5lck1hdGNoID0gaHRtbC5tYXRjaCh2aWRlb1RhZ3NDb250YWluZXJSZWdleClcbiAgICAgIFxuICAgICAgaWYgKHZpZGVvVGFnc0NvbnRhaW5lck1hdGNoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckh0bWwgPSB2aWRlb1RhZ3NDb250YWluZXJNYXRjaFsxXVxuICAgICAgICBcbiAgICAgICAgLy8gRXh0cmFjdCB0YWcgdGV4dCBmcm9tIHNwYW5zIHdpdGggY2xhc3MgXCJib2R5LTg2NDNlIGxhYmVsLTU5ODRhIGxhYmVsLTk2YzNlXCIgb3IgXCJib2R5LWJvbGQtODY0M2UgbGFiZWwtNTk4NGEgbGFiZWwtOTZjM2VcIlxuICAgICAgICAvLyBUaGlzIHRhcmdldHMgdGhlIGFjdHVhbCB0YWcgbGFiZWxzIGluIHRoZSB2aWRlbyB0YWdzIGxpc3RcbiAgICAgICAgY29uc3QgdGFnTGFiZWxSZWdleCA9IC88c3BhbltePl0qY2xhc3M9XCJbXlwiXSooPzpib2R5LTg2NDNlfGJvZHktYm9sZC04NjQzZSlbXlwiXSpsYWJlbC01OTg0YVteXCJdKmxhYmVsLTk2YzNlW15cIl0qXCJbXj5dKj4oW148XSspPFxcL3NwYW4+L2dcbiAgICAgICAgbGV0IHRhZ0xhYmVsTWF0Y2hcbiAgICAgICAgXG4gICAgICAgIHdoaWxlICgodGFnTGFiZWxNYXRjaCA9IHRhZ0xhYmVsUmVnZXguZXhlYyhjb250YWluZXJIdG1sKSkgIT09IG51bGwpIHtcbiAgICAgICAgICBjb25zdCB0YWdUZXh0ID0gdGFnTGFiZWxNYXRjaFsxXT8udHJpbSgpXG4gICAgICAgICAgaWYgKHRhZ1RleHQgJiYgdGhpcy5pc1ZhbGlkQ29udGVudFRhZyh0YWdUZXh0KSkge1xuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IHRoaXMubm9ybWFsaXplVGFnKHRhZ1RleHQpXG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZCkge1xuICAgICAgICAgICAgICB0YWdzLmFkZChub3JtYWxpemVkKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQWxzbyBleHRyYWN0IGZyb20gaHJlZiBwYXR0ZXJucyB3aXRoaW4gdGhlIGNvbnRhaW5lciBmb3IgY2F0ZWdvcmllcyBhbmQgdGFnc1xuICAgICAgICBjb25zdCBjYXRlZ29yeUxpbmtzUmVnZXggPSAvaHJlZj1cIlteXCJdKlxcL2NhdGVnb3JpZXNcXC8oW15cIlxcL10rKVwiW14+XSo+L2dcbiAgICAgICAgbGV0IGNhdGVnb3J5TWF0Y2hcbiAgICAgICAgd2hpbGUgKChjYXRlZ29yeU1hdGNoID0gY2F0ZWdvcnlMaW5rc1JlZ2V4LmV4ZWMoY29udGFpbmVySHRtbCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgY29uc3QgY2F0ZWdvcnlTbHVnID0gY2F0ZWdvcnlNYXRjaFsxXT8udHJpbSgpXG4gICAgICAgICAgaWYgKGNhdGVnb3J5U2x1ZyAmJiB0aGlzLmlzVmFsaWRDb250ZW50VGFnKGNhdGVnb3J5U2x1ZykpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSB0aGlzLm5vcm1hbGl6ZVRhZyhjYXRlZ29yeVNsdWcpXG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZCkge1xuICAgICAgICAgICAgICB0YWdzLmFkZChub3JtYWxpemVkKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgdGFnTGlua3NSZWdleCA9IC9ocmVmPVwiW15cIl0qXFwvdGFnc1xcLyhbXlwiXFwvXSspXCJbXj5dKj4vZ1xuICAgICAgICBsZXQgdGFnTWF0Y2hcbiAgICAgICAgd2hpbGUgKCh0YWdNYXRjaCA9IHRhZ0xpbmtzUmVnZXguZXhlYyhjb250YWluZXJIdG1sKSkgIT09IG51bGwpIHtcbiAgICAgICAgICBjb25zdCB0YWdTbHVnID0gdGFnTWF0Y2hbMV0/LnRyaW0oKVxuICAgICAgICAgIGlmICh0YWdTbHVnICYmIHRoaXMuaXNWYWxpZENvbnRlbnRUYWcodGFnU2x1ZykpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSB0aGlzLm5vcm1hbGl6ZVRhZyh0YWdTbHVnKVxuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWQpIHtcbiAgICAgICAgICAgICAgdGFncy5hZGQobm9ybWFsaXplZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gSWYgbm8gdGFncyBmb3VuZCBmcm9tIGNvbnRhaW5lciwgZmFsbGJhY2sgdG8gYnJvYWRlciBleHRyYWN0aW9uXG4gICAgICBpZiAodGFncy5zaXplID09PSAwKSB7XG4gICAgICAgIC8vIEV4dHJhY3QgZnJvbSB2aXNpYmxlIGNhdGVnb3J5IGFuZCB0YWcgbGlua3MgaW4gSFRNTCAoYnJvYWRlciBmYWxsYmFjaylcbiAgICAgICAgY29uc3QgY2F0ZWdvcnlMaW5rc1JlZ2V4ID0gL2hyZWY9XCJbXlwiXSpcXC9jYXRlZ29yaWVzXFwvKFteXCJcXC9dKylcIltePl0qPlxccyo8W14+XSo+XFxzKjxzcGFuW14+XSo+KFtePF0rKTxcXC9zcGFuPi9nXG4gICAgICAgIGxldCBjYXRlZ29yeU1hdGNoXG4gICAgICAgIHdoaWxlICgoY2F0ZWdvcnlNYXRjaCA9IGNhdGVnb3J5TGlua3NSZWdleC5leGVjKGh0bWwpKSAhPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnN0IGNhdGVnb3J5U2x1ZyA9IGNhdGVnb3J5TWF0Y2hbMV0/LnRyaW0oKVxuICAgICAgICAgIGNvbnN0IGNhdGVnb3J5VGV4dCA9IGNhdGVnb3J5TWF0Y2hbMl0/LnRyaW0oKVxuICAgICAgICAgIFxuICAgICAgICAgIGlmIChjYXRlZ29yeVNsdWcgJiYgdGhpcy5pc1ZhbGlkQ29udGVudFRhZyhjYXRlZ29yeVNsdWcpKSB7XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkID0gdGhpcy5ub3JtYWxpemVUYWcoY2F0ZWdvcnlTbHVnKVxuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWQpIHRhZ3MuYWRkKG5vcm1hbGl6ZWQpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjYXRlZ29yeVRleHQgJiYgY2F0ZWdvcnlUZXh0ICE9PSBjYXRlZ29yeVNsdWcgJiYgdGhpcy5pc1ZhbGlkQ29udGVudFRhZyhjYXRlZ29yeVRleHQpKSB7XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkID0gdGhpcy5ub3JtYWxpemVUYWcoY2F0ZWdvcnlUZXh0KVxuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWQpIHRhZ3MuYWRkKG5vcm1hbGl6ZWQpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGFnTGlua3NSZWdleCA9IC9ocmVmPVwiW15cIl0qXFwvdGFnc1xcLyhbXlwiXFwvXSspXCJbXj5dKj5cXHMqPFtePl0qPlxccyo8c3BhbltePl0qPihbXjxdKyk8XFwvc3Bhbj4vZ1xuICAgICAgICBsZXQgdGFnTWF0Y2hcbiAgICAgICAgd2hpbGUgKCh0YWdNYXRjaCA9IHRhZ0xpbmtzUmVnZXguZXhlYyhodG1sKSkgIT09IG51bGwpIHtcbiAgICAgICAgICBjb25zdCB0YWdTbHVnID0gdGFnTWF0Y2hbMV0/LnRyaW0oKVxuICAgICAgICAgIGNvbnN0IHRhZ1RleHQgPSB0YWdNYXRjaFsyXT8udHJpbSgpXG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKHRhZ1NsdWcgJiYgdGhpcy5pc1ZhbGlkQ29udGVudFRhZyh0YWdTbHVnKSkge1xuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IHRoaXMubm9ybWFsaXplVGFnKHRhZ1NsdWcpXG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZCkgdGFncy5hZGQobm9ybWFsaXplZClcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRhZ1RleHQgJiYgdGFnVGV4dCAhPT0gdGFnU2x1ZyAmJiB0aGlzLmlzVmFsaWRDb250ZW50VGFnKHRhZ1RleHQpKSB7XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkID0gdGhpcy5ub3JtYWxpemVUYWcodGFnVGV4dClcbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkKSB0YWdzLmFkZChub3JtYWxpemVkKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDb252ZXJ0IFNldCB0byBBcnJheSBhbmQgYXBwbHkgdGFnIG5vcm1hbGl6YXRpb25cbiAgICAgIGxldCBmaW5hbFRhZ3MgPSBBcnJheS5mcm9tKHRhZ3MpXG4gICAgICBcbiAgICAgIC8vIE5vcm1hbGl6ZSBhbmQgY2xlYW4gdXAgdGFnc1xuICAgICAgZmluYWxUYWdzID0gZmluYWxUYWdzXG4gICAgICAgIC5tYXAodGFnID0+IHRoaXMubm9ybWFsaXplVGFnKHRhZykpXG4gICAgICAgIC5maWx0ZXIodGFnID0+IHRhZyAmJiB0YWcubGVuZ3RoID49IDIgJiYgdGFnLmxlbmd0aCA8PSA1MCkgLy8gSW5jcmVhc2VkIGxpbWl0IGZvciBsb25nZXIgY29tcG91bmQgdGFnc1xuICAgICAgICAuZmlsdGVyKCh0YWcsIGluZGV4LCBhcnJheSkgPT4gYXJyYXkuaW5kZXhPZih0YWcpID09PSBpbmRleCkgLy8gUmVtb3ZlIGR1cGxpY2F0ZXNcbiAgICAgICAgLnNvcnQoKSAvLyBTb3J0IGFscGhhYmV0aWNhbGx5IGZvciBjb25zaXN0ZW50IG91dHB1dFxuXG4gICAgICBtZXRhZGF0YS50YWdzID0gZmluYWxUYWdzLmxlbmd0aCA+IDAgPyBmaW5hbFRhZ3MgOiB1bmRlZmluZWRcblxuICAgICAgbG9nZ2VyLmluZm8oJ1hIYW1zdGVyIG1ldGFkYXRhIGV4dHJhY3RlZCcsIHtcbiAgICAgICAgdXJsOiBvcmlnaW5hbFVybCxcbiAgICAgICAgaGFzVGl0bGU6ICEhbWV0YWRhdGEudGl0bGUsXG4gICAgICAgIGhhc0Rlc2NyaXB0aW9uOiAhIW1ldGFkYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgICBoYXNUaHVtYm5haWw6ICEhbWV0YWRhdGEudGh1bWJuYWlsLFxuICAgICAgICBoYXNQcmV2aWV3VXJsOiAhIW1ldGFkYXRhLnByZXZpZXdVcmwsXG4gICAgICAgIHRhZ3NDb3VudDogbWV0YWRhdGEudGFncz8ubGVuZ3RoIHx8IDBcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBtZXRhZGF0YVxuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHByb2Nlc3MgWEhhbXN0ZXIgVVJMJywgeyBcbiAgICAgICAgdXJsOiBvcmlnaW5hbFVybCwgXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IGVycm9yIFxuICAgICAgfSlcbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCB4SGFtc3RlclNlcnZpY2UgPSBuZXcgWEhhbXN0ZXJTZXJ2aWNlSW1wbCgpIl0sIm5hbWVzIjpbImxvZ2dlciIsIlhIYW1zdGVyU2VydmljZUltcGwiLCJpc1hIYW1zdGVyVXJsIiwidXJsIiwiaW5jbHVkZXMiLCJpc1ZhbGlkQ29udGVudFRhZyIsInRhZyIsImxlbmd0aCIsImJsYWNrbGlzdCIsImxvd2VyVGFnIiwidG9Mb3dlckNhc2UiLCJ0ZXN0Iiwibm9ybWFsaXplVGFnIiwibm9ybWFsaXplZCIsInRyaW0iLCJyZXBsYWNlIiwidGFnTWFwcGluZ3MiLCJwcm9jZXNzWEhhbXN0ZXJVcmwiLCJvcmlnaW5hbFVybCIsImluZm8iLCJyZXNwb25zZSIsImZldGNoIiwiaGVhZGVycyIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJodG1sIiwidGV4dCIsIm1ldGFkYXRhIiwidGl0bGVNYXRjaCIsIm1hdGNoIiwidGl0bGUiLCJkZXNjTWF0Y2giLCJkZXNjcmlwdGlvbiIsInRodW1iTWF0Y2giLCJ0aHVtYm5haWwiLCJkaXJlY3RJbWFnZU1hdGNoIiwiQXJyYXkiLCJpc0FycmF5Iiwic2NyaXB0UGF0dGVybnMiLCJzY3JpcHRDb250ZW50IiwicGF0dGVybiIsInBhdHRlcm5zIiwibWF0Y2hlcyIsImZpcnN0TWF0Y2giLCJwcmV2aWV3VXJsIiwidGFncyIsIlNldCIsInZpZGVvVGFnc0NvbnRhaW5lclJlZ2V4IiwidmlkZW9UYWdzQ29udGFpbmVyTWF0Y2giLCJjb250YWluZXJIdG1sIiwidGFnTGFiZWxSZWdleCIsInRhZ0xhYmVsTWF0Y2giLCJleGVjIiwidGFnVGV4dCIsImFkZCIsImNhdGVnb3J5TGlua3NSZWdleCIsImNhdGVnb3J5TWF0Y2giLCJjYXRlZ29yeVNsdWciLCJ0YWdMaW5rc1JlZ2V4IiwidGFnTWF0Y2giLCJ0YWdTbHVnIiwic2l6ZSIsImNhdGVnb3J5VGV4dCIsImZpbmFsVGFncyIsImZyb20iLCJtYXAiLCJmaWx0ZXIiLCJpbmRleCIsImFycmF5IiwiaW5kZXhPZiIsInNvcnQiLCJ1bmRlZmluZWQiLCJoYXNUaXRsZSIsImhhc0Rlc2NyaXB0aW9uIiwiaGFzVGh1bWJuYWlsIiwiaGFzUHJldmlld1VybCIsInRhZ3NDb3VudCIsImVycm9yIiwibWVzc2FnZSIsInhIYW1zdGVyU2VydmljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/services/xhamster.service.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fvideos%2Fextract-metadata&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fvideos%2Fextract-metadata.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();