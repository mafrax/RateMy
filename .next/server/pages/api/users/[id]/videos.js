"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/users/[id]/videos";
exports.ids = ["pages/api/users/[id]/videos"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("bcryptjs");

/***/ }),

/***/ "next-auth/next":
/*!*********************************!*\
  !*** external "next-auth/next" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("next-auth/next");

/***/ }),

/***/ "next-auth/providers/apple":
/*!********************************************!*\
  !*** external "next-auth/providers/apple" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/apple");

/***/ }),

/***/ "next-auth/providers/credentials":
/*!**************************************************!*\
  !*** external "next-auth/providers/credentials" ***!
  \**************************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/credentials");

/***/ }),

/***/ "next-auth/providers/facebook":
/*!***********************************************!*\
  !*** external "next-auth/providers/facebook" ***!
  \***********************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/facebook");

/***/ }),

/***/ "next-auth/providers/google":
/*!*********************************************!*\
  !*** external "next-auth/providers/google" ***!
  \*********************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/google");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "zod":
/*!**********************!*\
  !*** external "zod" ***!
  \**********************/
/***/ ((module) => {

module.exports = import("zod");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fusers%2F%5Bid%5D%2Fvideos&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fusers%2F%5Bid%5D%2Fvideos.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fusers%2F%5Bid%5D%2Fvideos&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fusers%2F%5Bid%5D%2Fvideos.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_users_id_videos_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/users/[id]/videos.ts */ \"(api)/./pages/api/users/[id]/videos.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_users_id_videos_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_users_id_videos_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_users_id_videos_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_users_id_videos_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/users/[id]/videos\",\n        pathname: \"/api/users/[id]/videos\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_users_id_videos_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnVzZXJzJTJGJTVCaWQlNUQlMkZ2aWRlb3MmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRnVzZXJzJTJGJTVCaWQlNUQlMkZ2aWRlb3MudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDNkQ7QUFDN0Q7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLDBEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQywwREFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYXRlbXktbmV4dGpzLz81NGM0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvdXNlcnMvW2lkXS92aWRlb3MudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS91c2Vycy9baWRdL3ZpZGVvc1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3VzZXJzL1tpZF0vdmlkZW9zXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fusers%2F%5Bid%5D%2Fvideos&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fusers%2F%5Bid%5D%2Fvideos.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/users/[id]/videos.ts":
/*!****************************************!*\
  !*** ./pages/api/users/[id]/videos.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/next */ \"next-auth/next\");\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth_next__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _src_lib_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../src/lib/auth */ \"(api)/./src/lib/auth.ts\");\n/* harmony import */ var _src_services_video_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../src/services/video.service */ \"(api)/./src/services/video.service.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_services_video_service__WEBPACK_IMPORTED_MODULE_2__]);\n_src_services_video_service__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nasync function handler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            success: false,\n            message: \"Method not allowed\"\n        });\n    }\n    try {\n        // Get session to verify authentication\n        const session = await (0,next_auth_next__WEBPACK_IMPORTED_MODULE_0__.getServerSession)(req, res, _src_lib_auth__WEBPACK_IMPORTED_MODULE_1__.authOptions);\n        if (!session) {\n            return res.status(401).json({\n                success: false,\n                message: \"Not authenticated\"\n            });\n        }\n        const { id: userId } = req.query;\n        if (!userId || typeof userId !== \"string\") {\n            return res.status(400).json({\n                success: false,\n                message: \"Invalid user ID\"\n            });\n        }\n        // Verify user can only access their own videos (for now)\n        const sessionUserId = session.user?.id;\n        if (sessionUserId !== userId) {\n            return res.status(403).json({\n                success: false,\n                message: \"Access denied\"\n            });\n        }\n        // Get videos by user\n        const result = await _src_services_video_service__WEBPACK_IMPORTED_MODULE_2__.videoService.getVideosByUser(userId);\n        if (!result.success) {\n            return res.status(400).json({\n                success: false,\n                message: result.message || \"Failed to fetch videos\"\n            });\n        }\n        return res.status(200).json({\n            success: true,\n            data: result.data,\n            message: \"Videos retrieved successfully\"\n        });\n    } catch (error) {\n        console.error(\"API Error:\", error);\n        return res.status(500).json({\n            success: false,\n            message: \"Internal server error\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvdXNlcnMvW2lkXS92aWRlb3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDaUQ7QUFDSztBQUNlO0FBRXRELGVBQWVHLFFBQVFDLEdBQW1CLEVBQUVDLEdBQW9CO0lBQzdFLElBQUlELElBQUlFLE1BQU0sS0FBSyxPQUFPO1FBQ3hCLE9BQU9ELElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUMsU0FBUztZQUFPQyxTQUFTO1FBQXFCO0lBQzlFO0lBRUEsSUFBSTtRQUNGLHVDQUF1QztRQUN2QyxNQUFNQyxVQUFVLE1BQU1YLGdFQUFnQkEsQ0FBQ0ksS0FBS0MsS0FBS0osc0RBQVdBO1FBQzVELElBQUksQ0FBQ1UsU0FBUztZQUNaLE9BQU9OLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7Z0JBQUVDLFNBQVM7Z0JBQU9DLFNBQVM7WUFBb0I7UUFDN0U7UUFFQSxNQUFNLEVBQUVFLElBQUlDLE1BQU0sRUFBRSxHQUFHVCxJQUFJVSxLQUFLO1FBRWhDLElBQUksQ0FBQ0QsVUFBVSxPQUFPQSxXQUFXLFVBQVU7WUFDekMsT0FBT1IsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztnQkFBRUMsU0FBUztnQkFBT0MsU0FBUztZQUFrQjtRQUMzRTtRQUVBLHlEQUF5RDtRQUN6RCxNQUFNSyxnQkFBaUJKLFFBQVFLLElBQUksRUFBVUo7UUFDN0MsSUFBSUcsa0JBQWtCRixRQUFRO1lBQzVCLE9BQU9SLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7Z0JBQUVDLFNBQVM7Z0JBQU9DLFNBQVM7WUFBZ0I7UUFDekU7UUFFQSxxQkFBcUI7UUFDckIsTUFBTU8sU0FBUyxNQUFNZixxRUFBWUEsQ0FBQ2dCLGVBQWUsQ0FBQ0w7UUFFbEQsSUFBSSxDQUFDSSxPQUFPUixPQUFPLEVBQUU7WUFDbkIsT0FBT0osSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztnQkFDMUJDLFNBQVM7Z0JBQ1RDLFNBQVNPLE9BQU9QLE9BQU8sSUFBSTtZQUM3QjtRQUNGO1FBRUEsT0FBT0wsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUMxQkMsU0FBUztZQUNUVSxNQUFNRixPQUFPRSxJQUFJO1lBQ2pCVCxTQUFTO1FBQ1g7SUFFRixFQUFFLE9BQU9VLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLGNBQWNBO1FBQzVCLE9BQU9mLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFDMUJDLFNBQVM7WUFDVEMsU0FBUztRQUNYO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3JhdGVteS1uZXh0anMvLi9wYWdlcy9hcGkvdXNlcnMvW2lkXS92aWRlb3MudHM/ZDEyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCdcbmltcG9ydCB7IGdldFNlcnZlclNlc3Npb24gfSBmcm9tICduZXh0LWF1dGgvbmV4dCdcbmltcG9ydCB7IGF1dGhPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2xpYi9hdXRoJ1xuaW1wb3J0IHsgdmlkZW9TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL3NlcnZpY2VzL3ZpZGVvLnNlcnZpY2UnXG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UpIHtcbiAgaWYgKHJlcS5tZXRob2QgIT09ICdHRVQnKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5qc29uKHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdNZXRob2Qgbm90IGFsbG93ZWQnIH0pXG4gIH1cblxuICB0cnkge1xuICAgIC8vIEdldCBzZXNzaW9uIHRvIHZlcmlmeSBhdXRoZW50aWNhdGlvblxuICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBnZXRTZXJ2ZXJTZXNzaW9uKHJlcSwgcmVzLCBhdXRoT3B0aW9ucylcbiAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnTm90IGF1dGhlbnRpY2F0ZWQnIH0pXG4gICAgfVxuXG4gICAgY29uc3QgeyBpZDogdXNlcklkIH0gPSByZXEucXVlcnlcblxuICAgIGlmICghdXNlcklkIHx8IHR5cGVvZiB1c2VySWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ0ludmFsaWQgdXNlciBJRCcgfSlcbiAgICB9XG5cbiAgICAvLyBWZXJpZnkgdXNlciBjYW4gb25seSBhY2Nlc3MgdGhlaXIgb3duIHZpZGVvcyAoZm9yIG5vdylcbiAgICBjb25zdCBzZXNzaW9uVXNlcklkID0gKHNlc3Npb24udXNlciBhcyBhbnkpPy5pZFxuICAgIGlmIChzZXNzaW9uVXNlcklkICE9PSB1c2VySWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnQWNjZXNzIGRlbmllZCcgfSlcbiAgICB9XG5cbiAgICAvLyBHZXQgdmlkZW9zIGJ5IHVzZXJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2aWRlb1NlcnZpY2UuZ2V0VmlkZW9zQnlVc2VyKHVzZXJJZClcbiAgICBcbiAgICBpZiAoIXJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgbWVzc2FnZTogcmVzdWx0Lm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBmZXRjaCB2aWRlb3MnXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YTogcmVzdWx0LmRhdGEsXG4gICAgICBtZXNzYWdlOiAnVmlkZW9zIHJldHJpZXZlZCBzdWNjZXNzZnVsbHknXG4gICAgfSlcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0FQSSBFcnJvcjonLCBlcnJvcilcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBtZXNzYWdlOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJ1xuICAgIH0pXG4gIH1cbn0iXSwibmFtZXMiOlsiZ2V0U2VydmVyU2Vzc2lvbiIsImF1dGhPcHRpb25zIiwidmlkZW9TZXJ2aWNlIiwiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsInN0YXR1cyIsImpzb24iLCJzdWNjZXNzIiwibWVzc2FnZSIsInNlc3Npb24iLCJpZCIsInVzZXJJZCIsInF1ZXJ5Iiwic2Vzc2lvblVzZXJJZCIsInVzZXIiLCJyZXN1bHQiLCJnZXRWaWRlb3NCeVVzZXIiLCJkYXRhIiwiZXJyb3IiLCJjb25zb2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./pages/api/users/[id]/videos.ts\n");

/***/ }),

/***/ "(api)/./src/lib/auth.ts":
/*!*************************!*\
  !*** ./src/lib/auth.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions)\n/* harmony export */ });\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/providers/credentials */ \"next-auth/providers/credentials\");\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/google */ \"next-auth/providers/google\");\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_auth_providers_facebook__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-auth/providers/facebook */ \"next-auth/providers/facebook\");\n/* harmony import */ var next_auth_providers_facebook__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_facebook__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_auth_providers_apple__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next-auth/providers/apple */ \"next-auth/providers/apple\");\n/* harmony import */ var next_auth_providers_apple__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_apple__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./db */ \"(api)/./src/lib/db.ts\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\nconst authOptions = {\n    providers: [\n        next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1___default()({\n            clientId: process.env.GOOGLE_CLIENT_ID || \"dummy\",\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"dummy\"\n        }),\n        next_auth_providers_facebook__WEBPACK_IMPORTED_MODULE_2___default()({\n            clientId: process.env.FACEBOOK_CLIENT_ID || \"dummy\",\n            clientSecret: process.env.FACEBOOK_CLIENT_SECRET || \"dummy\"\n        }),\n        next_auth_providers_apple__WEBPACK_IMPORTED_MODULE_3___default()({\n            clientId: process.env.APPLE_ID || \"dummy\",\n            clientSecret: process.env.APPLE_SECRET || \"dummy\"\n        }),\n        next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0___default()({\n            name: \"credentials\",\n            credentials: {\n                email: {\n                    label: \"Email\",\n                    type: \"email\"\n                },\n                password: {\n                    label: \"Password\",\n                    type: \"password\"\n                }\n            },\n            async authorize (credentials) {\n                try {\n                    if (!credentials?.email || !credentials?.password) {\n                        return null;\n                    }\n                    const user = await _db__WEBPACK_IMPORTED_MODULE_4__.db.user.findUnique({\n                        where: {\n                            email: credentials.email\n                        }\n                    });\n                    if (!user || !user.password) {\n                        return null;\n                    }\n                    const isPasswordValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_5___default().compare(credentials.password, user.password);\n                    if (!isPasswordValid) {\n                        return null;\n                    }\n                    return {\n                        id: user.id,\n                        email: user.email,\n                        name: user.firstName ? `${user.firstName} ${user.lastName || \"\"}`.trim() : user.username,\n                        username: user.username,\n                        firstName: user.firstName,\n                        lastName: user.lastName\n                    };\n                } catch (error) {\n                    console.error(\"Auth error:\", error);\n                    return null;\n                }\n            }\n        })\n    ],\n    session: {\n        strategy: \"jwt\",\n        maxAge: 30 * 24 * 60 * 60\n    },\n    pages: {\n        signIn: \"/auth/signin\"\n    },\n    callbacks: {\n        async jwt ({ token, user }) {\n            if (user) {\n                token.username = user.username;\n                token.firstName = user.firstName;\n                token.lastName = user.lastName;\n            }\n            return token;\n        },\n        async session ({ session, token }) {\n            if (token && session.user) {\n                session.user.id = token.sub;\n                session.user.username = token.username;\n                session.user.firstName = token.firstName;\n                session.user.lastName = token.lastName;\n            }\n            return session;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL2F1dGgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQ2lFO0FBQ1Y7QUFDSTtBQUNOO0FBQzVCO0FBQ0k7QUFFdEIsTUFBTU0sY0FBK0I7SUFDMUNDLFdBQVc7UUFDVE4saUVBQWNBLENBQUM7WUFDYk8sVUFBVUMsUUFBUUMsR0FBRyxDQUFDQyxnQkFBZ0IsSUFBSTtZQUMxQ0MsY0FBY0gsUUFBUUMsR0FBRyxDQUFDRyxvQkFBb0IsSUFBSTtRQUNwRDtRQUNBWCxtRUFBZ0JBLENBQUM7WUFDZk0sVUFBVUMsUUFBUUMsR0FBRyxDQUFDSSxrQkFBa0IsSUFBSTtZQUM1Q0YsY0FBY0gsUUFBUUMsR0FBRyxDQUFDSyxzQkFBc0IsSUFBSTtRQUN0RDtRQUNBWixnRUFBYUEsQ0FBQztZQUNaSyxVQUFVQyxRQUFRQyxHQUFHLENBQUNNLFFBQVEsSUFBSTtZQUNsQ0osY0FBY0gsUUFBUUMsR0FBRyxDQUFDTyxZQUFZLElBQUk7UUFDNUM7UUFDQWpCLHNFQUFtQkEsQ0FBQztZQUNsQmtCLE1BQU07WUFDTkMsYUFBYTtnQkFDWEMsT0FBTztvQkFBRUMsT0FBTztvQkFBU0MsTUFBTTtnQkFBUTtnQkFDdkNDLFVBQVU7b0JBQUVGLE9BQU87b0JBQVlDLE1BQU07Z0JBQVc7WUFDbEQ7WUFDQSxNQUFNRSxXQUFVTCxXQUFXO2dCQUN6QixJQUFJO29CQUNGLElBQUksQ0FBQ0EsYUFBYUMsU0FBUyxDQUFDRCxhQUFhSSxVQUFVO3dCQUNqRCxPQUFPO29CQUNUO29CQUVBLE1BQU1FLE9BQU8sTUFBTXJCLG1DQUFFQSxDQUFDcUIsSUFBSSxDQUFDQyxVQUFVLENBQUM7d0JBQ3BDQyxPQUFPOzRCQUNMUCxPQUFPRCxZQUFZQyxLQUFLO3dCQUMxQjtvQkFDRjtvQkFFQSxJQUFJLENBQUNLLFFBQVEsQ0FBQ0EsS0FBS0YsUUFBUSxFQUFFO3dCQUMzQixPQUFPO29CQUNUO29CQUVBLE1BQU1LLGtCQUFrQixNQUFNdkIsdURBQWMsQ0FBQ2MsWUFBWUksUUFBUSxFQUFFRSxLQUFLRixRQUFRO29CQUNoRixJQUFJLENBQUNLLGlCQUFpQjt3QkFDcEIsT0FBTztvQkFDVDtvQkFFQSxPQUFPO3dCQUNMRSxJQUFJTCxLQUFLSyxFQUFFO3dCQUNYVixPQUFPSyxLQUFLTCxLQUFLO3dCQUNqQkYsTUFBTU8sS0FBS00sU0FBUyxHQUFHLENBQUMsRUFBRU4sS0FBS00sU0FBUyxDQUFDLENBQUMsRUFBRU4sS0FBS08sUUFBUSxJQUFJLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLEtBQUtSLEtBQUtTLFFBQVE7d0JBQ3hGQSxVQUFVVCxLQUFLUyxRQUFRO3dCQUN2QkgsV0FBV04sS0FBS00sU0FBUzt3QkFDekJDLFVBQVVQLEtBQUtPLFFBQVE7b0JBQ3pCO2dCQUNGLEVBQUUsT0FBT0csT0FBTztvQkFDZEMsUUFBUUQsS0FBSyxDQUFDLGVBQWVBO29CQUM3QixPQUFPO2dCQUNUO1lBQ0Y7UUFDRjtLQUNEO0lBQ0RFLFNBQVM7UUFDUEMsVUFBVTtRQUNWQyxRQUFRLEtBQUssS0FBSyxLQUFLO0lBQ3pCO0lBQ0FDLE9BQU87UUFDTEMsUUFBUTtJQUNWO0lBQ0FDLFdBQVc7UUFDVCxNQUFNQyxLQUFJLEVBQUVDLEtBQUssRUFBRW5CLElBQUksRUFBRTtZQUN2QixJQUFJQSxNQUFNO2dCQUNSbUIsTUFBTVYsUUFBUSxHQUFHLEtBQWNBLFFBQVE7Z0JBQ3ZDVSxNQUFNYixTQUFTLEdBQUcsS0FBY0EsU0FBUztnQkFDekNhLE1BQU1aLFFBQVEsR0FBRyxLQUFjQSxRQUFRO1lBQ3pDO1lBQ0EsT0FBT1k7UUFDVDtRQUNBLE1BQU1QLFNBQVEsRUFBRUEsT0FBTyxFQUFFTyxLQUFLLEVBQUU7WUFDOUIsSUFBSUEsU0FBU1AsUUFBUVosSUFBSSxFQUFFO2dCQUN4QlksUUFBUVosSUFBSSxDQUFTSyxFQUFFLEdBQUdjLE1BQU1DLEdBQUc7Z0JBQ2xDUixRQUFRWixJQUFJLENBQVNTLFFBQVEsR0FBR1UsTUFBTVYsUUFBUTtnQkFDOUNHLFFBQVFaLElBQUksQ0FBU00sU0FBUyxHQUFHYSxNQUFNYixTQUFTO2dCQUNoRE0sUUFBUVosSUFBSSxDQUFTTyxRQUFRLEdBQUdZLE1BQU1aLFFBQVE7WUFDbEQ7WUFDQSxPQUFPSztRQUNUO0lBQ0Y7QUFDRixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmF0ZW15LW5leHRqcy8uL3NyYy9saWIvYXV0aC50cz82NjkyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBdXRoT3B0aW9ucyB9IGZyb20gJ25leHQtYXV0aCdcbmltcG9ydCBDcmVkZW50aWFsc1Byb3ZpZGVyIGZyb20gJ25leHQtYXV0aC9wcm92aWRlcnMvY3JlZGVudGlhbHMnXG5pbXBvcnQgR29vZ2xlUHJvdmlkZXIgZnJvbSAnbmV4dC1hdXRoL3Byb3ZpZGVycy9nb29nbGUnXG5pbXBvcnQgRmFjZWJvb2tQcm92aWRlciBmcm9tICduZXh0LWF1dGgvcHJvdmlkZXJzL2ZhY2Vib29rJ1xuaW1wb3J0IEFwcGxlUHJvdmlkZXIgZnJvbSAnbmV4dC1hdXRoL3Byb3ZpZGVycy9hcHBsZSdcbmltcG9ydCB7IGRiIH0gZnJvbSAnLi9kYidcbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0anMnXG5cbmV4cG9ydCBjb25zdCBhdXRoT3B0aW9uczogTmV4dEF1dGhPcHRpb25zID0ge1xuICBwcm92aWRlcnM6IFtcbiAgICBHb29nbGVQcm92aWRlcih7XG4gICAgICBjbGllbnRJZDogcHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9JRCB8fCAnZHVtbXknLFxuICAgICAgY2xpZW50U2VjcmV0OiBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX1NFQ1JFVCB8fCAnZHVtbXknLFxuICAgIH0pLFxuICAgIEZhY2Vib29rUHJvdmlkZXIoe1xuICAgICAgY2xpZW50SWQ6IHByb2Nlc3MuZW52LkZBQ0VCT09LX0NMSUVOVF9JRCB8fCAnZHVtbXknLFxuICAgICAgY2xpZW50U2VjcmV0OiBwcm9jZXNzLmVudi5GQUNFQk9PS19DTElFTlRfU0VDUkVUIHx8ICdkdW1teScsXG4gICAgfSksXG4gICAgQXBwbGVQcm92aWRlcih7XG4gICAgICBjbGllbnRJZDogcHJvY2Vzcy5lbnYuQVBQTEVfSUQgfHwgJ2R1bW15JyxcbiAgICAgIGNsaWVudFNlY3JldDogcHJvY2Vzcy5lbnYuQVBQTEVfU0VDUkVUIHx8ICdkdW1teScsXG4gICAgfSksXG4gICAgQ3JlZGVudGlhbHNQcm92aWRlcih7XG4gICAgICBuYW1lOiAnY3JlZGVudGlhbHMnLFxuICAgICAgY3JlZGVudGlhbHM6IHtcbiAgICAgICAgZW1haWw6IHsgbGFiZWw6ICdFbWFpbCcsIHR5cGU6ICdlbWFpbCcgfSxcbiAgICAgICAgcGFzc3dvcmQ6IHsgbGFiZWw6ICdQYXNzd29yZCcsIHR5cGU6ICdwYXNzd29yZCcgfVxuICAgICAgfSxcbiAgICAgIGFzeW5jIGF1dGhvcml6ZShjcmVkZW50aWFscykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghY3JlZGVudGlhbHM/LmVtYWlsIHx8ICFjcmVkZW50aWFscz8ucGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IGRiLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgICBlbWFpbDogY3JlZGVudGlhbHMuZW1haWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuXG4gICAgICAgICAgaWYgKCF1c2VyIHx8ICF1c2VyLnBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGlzUGFzc3dvcmRWYWxpZCA9IGF3YWl0IGJjcnlwdC5jb21wYXJlKGNyZWRlbnRpYWxzLnBhc3N3b3JkLCB1c2VyLnBhc3N3b3JkKVxuICAgICAgICAgIGlmICghaXNQYXNzd29yZFZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogdXNlci5pZCxcbiAgICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICAgICAgbmFtZTogdXNlci5maXJzdE5hbWUgPyBgJHt1c2VyLmZpcnN0TmFtZX0gJHt1c2VyLmxhc3ROYW1lIHx8ICcnfWAudHJpbSgpIDogdXNlci51c2VybmFtZSxcbiAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lLFxuICAgICAgICAgICAgZmlyc3ROYW1lOiB1c2VyLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiB1c2VyLmxhc3ROYW1lLFxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdBdXRoIGVycm9yOicsIGVycm9yKVxuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICBdLFxuICBzZXNzaW9uOiB7XG4gICAgc3RyYXRlZ3k6ICdqd3QnLFxuICAgIG1heEFnZTogMzAgKiAyNCAqIDYwICogNjAsIC8vIDMwIGRheXNcbiAgfSxcbiAgcGFnZXM6IHtcbiAgICBzaWduSW46ICcvYXV0aC9zaWduaW4nXG4gIH0sXG4gIGNhbGxiYWNrczoge1xuICAgIGFzeW5jIGp3dCh7IHRva2VuLCB1c2VyIH0pIHtcbiAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgIHRva2VuLnVzZXJuYW1lID0gKHVzZXIgYXMgYW55KS51c2VybmFtZVxuICAgICAgICB0b2tlbi5maXJzdE5hbWUgPSAodXNlciBhcyBhbnkpLmZpcnN0TmFtZVxuICAgICAgICB0b2tlbi5sYXN0TmFtZSA9ICh1c2VyIGFzIGFueSkubGFzdE5hbWVcbiAgICAgIH1cbiAgICAgIHJldHVybiB0b2tlblxuICAgIH0sXG4gICAgYXN5bmMgc2Vzc2lvbih7IHNlc3Npb24sIHRva2VuIH0pIHtcbiAgICAgIGlmICh0b2tlbiAmJiBzZXNzaW9uLnVzZXIpIHtcbiAgICAgICAgKHNlc3Npb24udXNlciBhcyBhbnkpLmlkID0gdG9rZW4uc3ViIVxuICAgICAgICA7KHNlc3Npb24udXNlciBhcyBhbnkpLnVzZXJuYW1lID0gdG9rZW4udXNlcm5hbWUgYXMgc3RyaW5nXG4gICAgICAgIDsoc2Vzc2lvbi51c2VyIGFzIGFueSkuZmlyc3ROYW1lID0gdG9rZW4uZmlyc3ROYW1lIGFzIHN0cmluZ1xuICAgICAgICA7KHNlc3Npb24udXNlciBhcyBhbnkpLmxhc3ROYW1lID0gdG9rZW4ubGFzdE5hbWUgYXMgc3RyaW5nXG4gICAgICB9XG4gICAgICByZXR1cm4gc2Vzc2lvblxuICAgIH1cbiAgfVxufSJdLCJuYW1lcyI6WyJDcmVkZW50aWFsc1Byb3ZpZGVyIiwiR29vZ2xlUHJvdmlkZXIiLCJGYWNlYm9va1Byb3ZpZGVyIiwiQXBwbGVQcm92aWRlciIsImRiIiwiYmNyeXB0IiwiYXV0aE9wdGlvbnMiLCJwcm92aWRlcnMiLCJjbGllbnRJZCIsInByb2Nlc3MiLCJlbnYiLCJHT09HTEVfQ0xJRU5UX0lEIiwiY2xpZW50U2VjcmV0IiwiR09PR0xFX0NMSUVOVF9TRUNSRVQiLCJGQUNFQk9PS19DTElFTlRfSUQiLCJGQUNFQk9PS19DTElFTlRfU0VDUkVUIiwiQVBQTEVfSUQiLCJBUFBMRV9TRUNSRVQiLCJuYW1lIiwiY3JlZGVudGlhbHMiLCJlbWFpbCIsImxhYmVsIiwidHlwZSIsInBhc3N3b3JkIiwiYXV0aG9yaXplIiwidXNlciIsImZpbmRVbmlxdWUiLCJ3aGVyZSIsImlzUGFzc3dvcmRWYWxpZCIsImNvbXBhcmUiLCJpZCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwidHJpbSIsInVzZXJuYW1lIiwiZXJyb3IiLCJjb25zb2xlIiwic2Vzc2lvbiIsInN0cmF0ZWd5IiwibWF4QWdlIiwicGFnZXMiLCJzaWduSW4iLCJjYWxsYmFja3MiLCJqd3QiLCJ0b2tlbiIsInN1YiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/lib/auth.ts\n");

/***/ }),

/***/ "(api)/./src/lib/config.ts":
/*!***************************!*\
  !*** ./src/lib/config.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   getEnvVar: () => (/* binding */ getEnvVar),\n/* harmony export */   getEnvVarAsBoolean: () => (/* binding */ getEnvVarAsBoolean),\n/* harmony export */   getEnvVarAsNumber: () => (/* binding */ getEnvVarAsNumber),\n/* harmony export */   isDevelopment: () => (/* binding */ isDevelopment),\n/* harmony export */   isProduction: () => (/* binding */ isProduction),\n/* harmony export */   isTest: () => (/* binding */ isTest)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(api)/./src/lib/constants.ts\");\n\nfunction getConfig() {\n    const env = \"development\" || 0;\n    const isDevelopment = env === _constants__WEBPACK_IMPORTED_MODULE_0__.NODE_ENV.DEVELOPMENT;\n    const isProduction = env === _constants__WEBPACK_IMPORTED_MODULE_0__.NODE_ENV.PRODUCTION;\n    // Validate required environment variables\n    const requiredVars = [\n        \"DATABASE_URL\",\n        \"NEXTAUTH_SECRET\",\n        \"NEXTAUTH_URL\"\n    ];\n    for (const varName of requiredVars){\n        if (!process.env[varName]) {\n            throw new Error(`Missing required environment variable: ${varName}`);\n        }\n    }\n    return {\n        app: {\n            name: process.env.APP_NAME || \"RateMe\",\n            version: process.env.APP_VERSION || \"1.0.0\",\n            env,\n            port: parseInt(process.env.PORT || \"3000\", 10),\n            url: process.env.NEXTAUTH_URL\n        },\n        database: {\n            url: process.env.DATABASE_URL\n        },\n        auth: {\n            secret: process.env.NEXTAUTH_SECRET,\n            url: process.env.NEXTAUTH_URL,\n            sessionMaxAge: parseInt(process.env.SESSION_MAX_AGE || \"2592000\", 10)\n        },\n        logging: {\n            level: process.env.LOG_LEVEL || (isDevelopment ? \"debug\" : \"info\"),\n            pretty: isDevelopment\n        },\n        redis: process.env.REDIS_URL ? {\n            url: process.env.REDIS_URL,\n            password: process.env.REDIS_PASSWORD\n        } : undefined,\n        external: {\n            youtube: process.env.YOUTUBE_API_KEY ? {\n                apiKey: process.env.YOUTUBE_API_KEY\n            } : undefined,\n            vimeo: process.env.VIMEO_CLIENT_ID && process.env.VIMEO_CLIENT_SECRET ? {\n                clientId: process.env.VIMEO_CLIENT_ID,\n                clientSecret: process.env.VIMEO_CLIENT_SECRET\n            } : undefined\n        }\n    };\n}\n// Export singleton config instance\nconst config = getConfig();\n// Type-safe environment variable access\nfunction getEnvVar(name, defaultValue) {\n    const value = process.env[name];\n    if (value === undefined) {\n        if (defaultValue !== undefined) {\n            return defaultValue;\n        }\n        throw new Error(`Environment variable ${name} is not set`);\n    }\n    return value;\n}\nfunction getEnvVarAsNumber(name, defaultValue) {\n    const value = process.env[name];\n    if (value === undefined) {\n        if (defaultValue !== undefined) {\n            return defaultValue;\n        }\n        throw new Error(`Environment variable ${name} is not set`);\n    }\n    const parsed = parseInt(value, 10);\n    if (isNaN(parsed)) {\n        throw new Error(`Environment variable ${name} is not a valid number: ${value}`);\n    }\n    return parsed;\n}\nfunction getEnvVarAsBoolean(name, defaultValue) {\n    const value = process.env[name];\n    if (value === undefined) {\n        if (defaultValue !== undefined) {\n            return defaultValue;\n        }\n        throw new Error(`Environment variable ${name} is not set`);\n    }\n    return value.toLowerCase() === \"true\";\n}\n// Environment checks\nconst isDevelopment = config.app.env === _constants__WEBPACK_IMPORTED_MODULE_0__.NODE_ENV.DEVELOPMENT;\nconst isProduction = config.app.env === _constants__WEBPACK_IMPORTED_MODULE_0__.NODE_ENV.PRODUCTION;\nconst isTest = config.app.env === _constants__WEBPACK_IMPORTED_MODULE_0__.NODE_ENV.TEST;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/config.ts\n");

/***/ }),

/***/ "(api)/./src/lib/constants.ts":
/*!******************************!*\
  !*** ./src/lib/constants.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_ROUTES: () => (/* binding */ API_ROUTES),\n/* harmony export */   APP_DESCRIPTION: () => (/* binding */ APP_DESCRIPTION),\n/* harmony export */   APP_NAME: () => (/* binding */ APP_NAME),\n/* harmony export */   APP_VERSION: () => (/* binding */ APP_VERSION),\n/* harmony export */   CACHE_KEYS: () => (/* binding */ CACHE_KEYS),\n/* harmony export */   CACHE_TTL: () => (/* binding */ CACHE_TTL),\n/* harmony export */   DEFAULTS: () => (/* binding */ DEFAULTS),\n/* harmony export */   ERROR_CODES: () => (/* binding */ ERROR_CODES),\n/* harmony export */   EXTERNAL_SERVICES: () => (/* binding */ EXTERNAL_SERVICES),\n/* harmony export */   FEATURES: () => (/* binding */ FEATURES),\n/* harmony export */   HTTP_STATUS: () => (/* binding */ HTTP_STATUS),\n/* harmony export */   NODE_ENV: () => (/* binding */ NODE_ENV),\n/* harmony export */   PAGINATION: () => (/* binding */ PAGINATION),\n/* harmony export */   RATING_LEVELS: () => (/* binding */ RATING_LEVELS),\n/* harmony export */   SEO: () => (/* binding */ SEO),\n/* harmony export */   SOCIAL_PLATFORMS: () => (/* binding */ SOCIAL_PLATFORMS),\n/* harmony export */   UPLOAD_LIMITS: () => (/* binding */ UPLOAD_LIMITS),\n/* harmony export */   USER_LIMITS: () => (/* binding */ USER_LIMITS),\n/* harmony export */   VALIDATION_PATTERNS: () => (/* binding */ VALIDATION_PATTERNS),\n/* harmony export */   VIDEO_LIMITS: () => (/* binding */ VIDEO_LIMITS),\n/* harmony export */   VIDEO_PLATFORMS: () => (/* binding */ VIDEO_PLATFORMS)\n/* harmony export */ });\n// Application constants\nconst APP_NAME = \"RateMe\";\nconst APP_DESCRIPTION = \"A modern video rating platform\";\nconst APP_VERSION = \"1.0.0\";\n// API constants\nconst API_ROUTES = {\n    AUTH: {\n        SIGNIN: \"/api/auth/signin\",\n        SIGNUP: \"/api/auth/register\",\n        SIGNOUT: \"/api/auth/signout\"\n    },\n    VIDEOS: {\n        BASE: \"/api/videos\",\n        BY_ID: (id)=>`/api/videos/${id}`,\n        RATE: (id)=>`/api/videos/${id}/rate`\n    },\n    USERS: {\n        BASE: \"/api/users\",\n        BY_ID: (id)=>`/api/users/${id}`,\n        FOLLOW: (id)=>`/api/users/${id}/follow`\n    }\n};\n// UI constants\nconst PAGINATION = {\n    DEFAULT_PAGE_SIZE: 12,\n    MAX_PAGE_SIZE: 50\n};\nconst VIDEO_LIMITS = {\n    MAX_TITLE_LENGTH: 200,\n    MAX_DESCRIPTION_LENGTH: 1000\n};\nconst USER_LIMITS = {\n    MIN_USERNAME_LENGTH: 3,\n    MAX_USERNAME_LENGTH: 30,\n    MIN_PASSWORD_LENGTH: 6,\n    MAX_PASSWORD_LENGTH: 128\n};\n// Validation patterns\nconst VALIDATION_PATTERNS = {\n    EMAIL: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n    USERNAME: /^[a-zA-Z0-9_]{3,30}$/,\n    YOUTUBE_URL: /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/,\n    VIMEO_URL: /(?:https?:\\/\\/)?(?:www\\.)?vimeo\\.com\\/(\\d+)/\n};\n// Error codes\nconst ERROR_CODES = {\n    // Authentication errors\n    INVALID_CREDENTIALS: \"INVALID_CREDENTIALS\",\n    USER_NOT_FOUND: \"USER_NOT_FOUND\",\n    USER_ALREADY_EXISTS: \"USER_ALREADY_EXISTS\",\n    UNAUTHORIZED: \"UNAUTHORIZED\",\n    SESSION_EXPIRED: \"SESSION_EXPIRED\",\n    // Validation errors\n    VALIDATION_ERROR: \"VALIDATION_ERROR\",\n    INVALID_INPUT: \"INVALID_INPUT\",\n    MISSING_REQUIRED_FIELD: \"MISSING_REQUIRED_FIELD\",\n    // Resource errors\n    RESOURCE_NOT_FOUND: \"RESOURCE_NOT_FOUND\",\n    RESOURCE_ALREADY_EXISTS: \"RESOURCE_ALREADY_EXISTS\",\n    RESOURCE_FORBIDDEN: \"RESOURCE_FORBIDDEN\",\n    // Server errors\n    INTERNAL_SERVER_ERROR: \"INTERNAL_SERVER_ERROR\",\n    DATABASE_ERROR: \"DATABASE_ERROR\",\n    EXTERNAL_SERVICE_ERROR: \"EXTERNAL_SERVICE_ERROR\",\n    // Rate limiting\n    RATE_LIMIT_EXCEEDED: \"RATE_LIMIT_EXCEEDED\"\n};\n// HTTP status codes\nconst HTTP_STATUS = {\n    OK: 200,\n    CREATED: 201,\n    NO_CONTENT: 204,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    FORBIDDEN: 403,\n    NOT_FOUND: 404,\n    METHOD_NOT_ALLOWED: 405,\n    CONFLICT: 409,\n    UNPROCESSABLE_ENTITY: 422,\n    TOO_MANY_REQUESTS: 429,\n    INTERNAL_SERVER_ERROR: 500,\n    BAD_GATEWAY: 502,\n    SERVICE_UNAVAILABLE: 503\n};\n// Cache keys\nconst CACHE_KEYS = {\n    VIDEOS: \"videos\",\n    USER: (id)=>`user:${id}`,\n    VIDEO: (id)=>`video:${id}`,\n    TAGS: \"tags\",\n    USER_VIDEOS: (userId)=>`user:${userId}:videos`\n};\n// Cache TTL (in seconds)\nconst CACHE_TTL = {\n    SHORT: 300,\n    MEDIUM: 1800,\n    LONG: 3600,\n    VERY_LONG: 86400\n};\n// Environment types\nconst NODE_ENV = {\n    DEVELOPMENT: \"development\",\n    PRODUCTION: \"production\",\n    TEST: \"test\"\n};\n// Supported video platforms\nconst VIDEO_PLATFORMS = {\n    YOUTUBE: \"youtube\",\n    VIMEO: \"vimeo\"\n};\n// Rating levels\nconst RATING_LEVELS = {\n    MIN: 1,\n    MAX: 5,\n    DEFAULT: 3\n};\n// Default values\nconst DEFAULTS = {\n    AVATAR_URL: \"/images/default-avatar.png\",\n    VIDEO_THUMBNAIL: \"/images/default-video-thumbnail.png\",\n    PAGINATION_LIMIT: PAGINATION.DEFAULT_PAGE_SIZE,\n    RATING_LEVEL: RATING_LEVELS.DEFAULT\n};\n// Feature flags\nconst FEATURES = {\n    VIDEO_UPLOAD: true,\n    USER_REGISTRATION: true,\n    VIDEO_RATING: true,\n    USER_FOLLOWING: true,\n    SEARCH: true,\n    ADMIN_PANEL: false\n};\n// External service URLs\nconst EXTERNAL_SERVICES = {\n    YOUTUBE_API: \"https://www.googleapis.com/youtube/v3\",\n    VIMEO_API: \"https://api.vimeo.com\"\n};\n// File upload limits\nconst UPLOAD_LIMITS = {\n    MAX_FILE_SIZE: 10 * 1024 * 1024,\n    ALLOWED_IMAGE_TYPES: [\n        \"image/jpeg\",\n        \"image/png\",\n        \"image/gif\",\n        \"image/webp\"\n    ],\n    ALLOWED_VIDEO_TYPES: [\n        \"video/mp4\",\n        \"video/webm\",\n        \"video/ogg\"\n    ]\n};\n// SEO constants\nconst SEO = {\n    DEFAULT_TITLE: APP_NAME,\n    TITLE_TEMPLATE: `%s | ${APP_NAME}`,\n    DEFAULT_DESCRIPTION: APP_DESCRIPTION,\n    TWITTER_HANDLE: \"@rateme\",\n    SITE_URL: process.env.NEXTAUTH_URL || \"http://localhost:3000\"\n};\n// Social sharing\nconst SOCIAL_PLATFORMS = {\n    TWITTER: \"twitter\",\n    FACEBOOK: \"facebook\",\n    LINKEDIN: \"linkedin\",\n    REDDIT: \"reddit\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/constants.ts\n");

/***/ }),

/***/ "(api)/./src/lib/db.ts":
/*!***********************!*\
  !*** ./src/lib/db.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   db: () => (/* binding */ db)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst db = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = db;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL2RiLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUU3QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLEtBQUtGLGdCQUFnQkcsTUFBTSxJQUFJLElBQUlKLHdEQUFZQSxHQUFFO0FBRTlELElBQUlLLElBQXlCLEVBQWNKLGdCQUFnQkcsTUFBTSxHQUFHRCIsInNvdXJjZXMiOlsid2VicGFjazovL3JhdGVteS1uZXh0anMvLi9zcmMvbGliL2RiLnRzPzllNGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnXG5cbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbFRoaXMgYXMgdW5rbm93biBhcyB7XG4gIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBjb25zdCBkYiA9IGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPz8gbmV3IFByaXNtYUNsaWVudCgpXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID0gZGIiXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsImRiIiwicHJpc21hIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/lib/db.ts\n");

/***/ }),

/***/ "(api)/./src/lib/errors.ts":
/*!***************************!*\
  !*** ./src/lib/errors.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppError: () => (/* binding */ AppError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   AuthorizationError: () => (/* binding */ AuthorizationError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   DatabaseError: () => (/* binding */ DatabaseError),\n/* harmony export */   ExternalServiceError: () => (/* binding */ ExternalServiceError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   ValidationError: () => (/* binding */ ValidationError),\n/* harmony export */   asyncWrapper: () => (/* binding */ asyncWrapper),\n/* harmony export */   createConflictError: () => (/* binding */ createConflictError),\n/* harmony export */   createNotFoundError: () => (/* binding */ createNotFoundError),\n/* harmony export */   createValidationError: () => (/* binding */ createValidationError),\n/* harmony export */   extractErrorCode: () => (/* binding */ extractErrorCode),\n/* harmony export */   extractErrorMessage: () => (/* binding */ extractErrorMessage),\n/* harmony export */   extractStatusCode: () => (/* binding */ extractStatusCode),\n/* harmony export */   handlePromiseRejection: () => (/* binding */ handlePromiseRejection),\n/* harmony export */   isAppError: () => (/* binding */ isAppError),\n/* harmony export */   isOperationalError: () => (/* binding */ isOperationalError),\n/* harmony export */   serializeError: () => (/* binding */ serializeError)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(api)/./src/lib/constants.ts\");\n\nclass AppError extends Error {\n    constructor(message, code = _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.INTERNAL_SERVER_ERROR, statusCode = _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.INTERNAL_SERVER_ERROR, isOperational = true, context){\n        super(message);\n        this.name = this.constructor.name;\n        this.code = code;\n        this.statusCode = statusCode;\n        this.isOperational = isOperational;\n        this.context = context;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n// Specific error classes\nclass ValidationError extends AppError {\n    constructor(message, field, context){\n        super(message, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.VALIDATION_ERROR, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.BAD_REQUEST, true, {\n            field,\n            ...context\n        });\n    }\n}\nclass AuthenticationError extends AppError {\n    constructor(message = \"Authentication failed\", context){\n        super(message, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.UNAUTHORIZED, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.UNAUTHORIZED, true, context);\n    }\n}\nclass AuthorizationError extends AppError {\n    constructor(message = \"Access forbidden\", context){\n        super(message, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.RESOURCE_FORBIDDEN, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.FORBIDDEN, true, context);\n    }\n}\nclass NotFoundError extends AppError {\n    constructor(resource = \"Resource\", context){\n        super(`${resource} not found`, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.RESOURCE_NOT_FOUND, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.NOT_FOUND, true, context);\n    }\n}\nclass ConflictError extends AppError {\n    constructor(message, context){\n        super(message, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.RESOURCE_ALREADY_EXISTS, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.CONFLICT, true, context);\n    }\n}\nclass DatabaseError extends AppError {\n    constructor(message, context){\n        super(message, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.DATABASE_ERROR, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.INTERNAL_SERVER_ERROR, true, context);\n    }\n}\nclass ExternalServiceError extends AppError {\n    constructor(service, message, context){\n        super(`External service error (${service}): ${message}`, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.EXTERNAL_SERVICE_ERROR, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.BAD_GATEWAY, true, context);\n    }\n}\nclass RateLimitError extends AppError {\n    constructor(message = \"Rate limit exceeded\", context){\n        super(message, _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.RATE_LIMIT_EXCEEDED, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.TOO_MANY_REQUESTS, true, context);\n    }\n}\n// Error factory functions\nfunction createValidationError(field, message, value) {\n    return new ValidationError(message, field, {\n        value\n    });\n}\nfunction createNotFoundError(resource, id) {\n    return new NotFoundError(resource, {\n        id\n    });\n}\nfunction createConflictError(resource, field, value) {\n    return new ConflictError(`${resource} with ${field} '${value}' already exists`, {\n        resource,\n        field,\n        value\n    });\n}\n// Error handling utilities\nfunction isAppError(error) {\n    return error instanceof AppError;\n}\nfunction isOperationalError(error) {\n    if (isAppError(error)) {\n        return error.isOperational;\n    }\n    return false;\n}\nfunction extractErrorMessage(error) {\n    if (error instanceof Error) {\n        return error.message;\n    }\n    if (typeof error === \"string\") {\n        return error;\n    }\n    return \"An unknown error occurred\";\n}\nfunction extractErrorCode(error) {\n    if (isAppError(error)) {\n        return error.code;\n    }\n    return _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.INTERNAL_SERVER_ERROR;\n}\nfunction extractStatusCode(error) {\n    if (isAppError(error)) {\n        return error.statusCode;\n    }\n    return _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.INTERNAL_SERVER_ERROR;\n}\nfunction serializeError(error, includeStack = false) {\n    const serialized = {\n        message: extractErrorMessage(error),\n        code: extractErrorCode(error),\n        statusCode: extractStatusCode(error)\n    };\n    if (isAppError(error) && error.context) {\n        serialized.context = error.context;\n    }\n    if (includeStack && error instanceof Error) {\n        serialized.stack = error.stack;\n    }\n    return serialized;\n}\n// Async error wrapper\nfunction asyncWrapper(fn) {\n    return async (...args)=>{\n        try {\n            return await fn(...args);\n        } catch (error) {\n            if (isOperationalError(error)) {\n                throw error;\n            }\n            // Convert non-operational errors to operational ones\n            throw new AppError(extractErrorMessage(error), _constants__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODES.INTERNAL_SERVER_ERROR, _constants__WEBPACK_IMPORTED_MODULE_0__.HTTP_STATUS.INTERNAL_SERVER_ERROR, false, {\n                originalError: error\n            });\n        }\n    };\n}\n// Promise error handler\nfunction handlePromiseRejection(promise) {\n    return promise.catch((error)=>{\n        if (!isOperationalError(error)) {\n            // Log unexpected errors\n            console.error(\"Unhandled promise rejection:\", error);\n        }\n        throw error;\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/errors.ts\n");

/***/ }),

/***/ "(api)/./src/lib/logger.ts":
/*!***************************!*\
  !*** ./src/lib/logger.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   logApiError: () => (/* binding */ logApiError),\n/* harmony export */   logApiRequest: () => (/* binding */ logApiRequest),\n/* harmony export */   logDatabaseConnection: () => (/* binding */ logDatabaseConnection),\n/* harmony export */   logDatabaseQuery: () => (/* binding */ logDatabaseQuery),\n/* harmony export */   logError: () => (/* binding */ logError),\n/* harmony export */   logHealthCheck: () => (/* binding */ logHealthCheck),\n/* harmony export */   logNetworkInfo: () => (/* binding */ logNetworkInfo),\n/* harmony export */   logStartup: () => (/* binding */ logStartup),\n/* harmony export */   logSystemEvent: () => (/* binding */ logSystemEvent),\n/* harmony export */   logUserAction: () => (/* binding */ logUserAction),\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"(api)/./src/lib/config.ts\");\n\nvar LogLevel;\n(function(LogLevel) {\n    LogLevel[LogLevel[\"ERROR\"] = 0] = \"ERROR\";\n    LogLevel[LogLevel[\"WARN\"] = 1] = \"WARN\";\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n    LogLevel[LogLevel[\"DEBUG\"] = 3] = \"DEBUG\";\n})(LogLevel || (LogLevel = {}));\nclass ConsoleLogger {\n    constructor(level){\n        this.level = this.parseLogLevel(level);\n    }\n    parseLogLevel(level) {\n        switch(level.toLowerCase()){\n            case \"error\":\n                return 0;\n            case \"warn\":\n                return 1;\n            case \"info\":\n                return 2;\n            case \"debug\":\n                return 3;\n            default:\n                return 2;\n        }\n    }\n    shouldLog(level) {\n        return level <= this.level;\n    }\n    formatMessage(level, message, context) {\n        const timestamp = new Date().toISOString();\n        const baseMessage = `[${timestamp}] ${level.toUpperCase()}: ${message}`;\n        if (context && Object.keys(context).length > 0) {\n            if (_config__WEBPACK_IMPORTED_MODULE_0__.config.logging.pretty) {\n                return `${baseMessage}\\n${JSON.stringify(context, null, 2)}`;\n            } else {\n                return `${baseMessage} ${JSON.stringify(context)}`;\n            }\n        }\n        return baseMessage;\n    }\n    error(message, context) {\n        if (this.shouldLog(0)) {\n            console.error(this.formatMessage(\"error\", message, context));\n        }\n    }\n    warn(message, context) {\n        if (this.shouldLog(1)) {\n            console.warn(this.formatMessage(\"warn\", message, context));\n        }\n    }\n    info(message, context) {\n        if (this.shouldLog(2)) {\n            console.info(this.formatMessage(\"info\", message, context));\n        }\n    }\n    debug(message, context) {\n        if (this.shouldLog(3)) {\n            console.debug(this.formatMessage(\"debug\", message, context));\n        }\n    }\n}\n// Create singleton logger instance\nconst logger = new ConsoleLogger(_config__WEBPACK_IMPORTED_MODULE_0__.config.logging.level);\n// Utility functions for structured logging\nfunction logError(error, context) {\n    logger.error(error.message, {\n        ...context,\n        stack: error.stack,\n        name: error.name\n    });\n}\nfunction logApiRequest(method, url, userId, duration) {\n    logger.info(\"API Request\", {\n        method,\n        url,\n        userId,\n        duration: duration ? `${duration}ms` : undefined\n    });\n}\nfunction logApiError(method, url, error, userId) {\n    logger.error(\"API Error\", {\n        method,\n        url,\n        userId,\n        error: error.message,\n        stack: error.stack\n    });\n}\nfunction logDatabaseQuery(query, duration, error) {\n    if (error) {\n        logger.error(\"Database Query Error\", {\n            query,\n            duration: duration ? `${duration}ms` : undefined,\n            error: error.message\n        });\n    } else {\n        logger.debug(\"Database Query\", {\n            query,\n            duration: duration ? `${duration}ms` : undefined\n        });\n    }\n}\nfunction logUserAction(action, userId, context) {\n    logger.info(\"User Action\", {\n        action,\n        userId,\n        ...context\n    });\n}\nfunction logSystemEvent(event, context) {\n    logger.info(\"System Event\", {\n        event,\n        ...context\n    });\n}\nfunction logStartup(component, status, context) {\n    const level = status === \"failed\" ? \"error\" : \"info\";\n    logger[level](`🚀 ${component} ${status.toUpperCase()}`, {\n        component,\n        status,\n        timestamp: new Date().toISOString(),\n        ...context\n    });\n}\nfunction logHealthCheck(component, healthy, context) {\n    const status = healthy ? \"healthy\" : \"unhealthy\";\n    const level = healthy ? \"info\" : \"error\";\n    logger[level](`💚 Health Check: ${component} is ${status}`, {\n        component,\n        healthy,\n        ...context\n    });\n}\nfunction logNetworkInfo(port, host = \"localhost\", context) {\n    logger.info(\"\\uD83C\\uDF10 Server Network Configuration\", {\n        port,\n        host,\n        url: `http://${host}:${port}`,\n        ...context\n    });\n}\nfunction logDatabaseConnection(status, context) {\n    const level = status === \"failed\" ? \"error\" : \"info\";\n    const emoji = status === \"connected\" ? \"✅\" : status === \"connecting\" ? \"\\uD83D\\uDD04\" : \"❌\";\n    logger[level](`${emoji} Database ${status.toUpperCase()}`, {\n        status,\n        ...context\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/logger.ts\n");

/***/ }),

/***/ "(api)/./src/lib/performance-monitor.ts":
/*!****************************************!*\
  !*** ./src/lib/performance-monitor.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PerformanceMonitor: () => (/* binding */ PerformanceMonitor),\n/* harmony export */   performanceMonitor: () => (/* binding */ performanceMonitor),\n/* harmony export */   timeRatingOperation: () => (/* binding */ timeRatingOperation)\n/* harmony export */ });\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ \"(api)/./src/lib/logger.ts\");\n\nclass PerformanceMonitor {\n    // Start timing an operation\n    start(operationId, operation, metadata) {\n        this.timers.set(operationId, performance.now());\n        if (metadata) {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`Performance monitor: Starting ${operation}`, metadata);\n        }\n    }\n    // End timing an operation and record the metric\n    end(operationId, operation, metadata) {\n        const startTime = this.timers.get(operationId);\n        if (!startTime) {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn(`Performance monitor: No start time found for operation ${operationId}`);\n            return 0;\n        }\n        const duration = performance.now() - startTime;\n        this.timers.delete(operationId);\n        const metric = {\n            operation,\n            duration,\n            timestamp: Date.now(),\n            metadata\n        };\n        this.metrics.push(metric);\n        // Keep only the most recent metrics\n        if (this.metrics.length > this.maxMetrics) {\n            this.metrics = this.metrics.slice(-this.maxMetrics);\n        }\n        // Log slow operations (> 1000ms)\n        if (duration > 1000) {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn(`Slow operation detected: ${operation}`, {\n                duration,\n                operationId,\n                ...metadata\n            });\n        } else if (duration > 100) {\n            // Log medium operations for debugging\n            _logger__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`Performance: ${operation} took ${duration.toFixed(2)}ms`, {\n                operationId,\n                ...metadata\n            });\n        }\n        return duration;\n    }\n    // Time a function execution\n    async timeFunction(operation, fn, metadata) {\n        const operationId = `${operation}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        this.start(operationId, operation, metadata);\n        try {\n            const result = await fn();\n            const duration = this.end(operationId, operation, metadata);\n            return {\n                result,\n                duration\n            };\n        } catch (error) {\n            const duration = this.end(operationId, operation, {\n                ...metadata,\n                error: true\n            });\n            throw error;\n        }\n    }\n    // Get performance statistics\n    getStats(operation) {\n        const filteredMetrics = operation ? this.metrics.filter((m)=>m.operation === operation) : this.metrics;\n        if (filteredMetrics.length === 0) {\n            return {\n                totalOperations: 0,\n                averageDuration: 0,\n                minDuration: 0,\n                maxDuration: 0,\n                recentOperations: 0,\n                slowOperations: 0\n            };\n        }\n        const durations = filteredMetrics.map((m)=>m.duration);\n        const recentCutoff = Date.now() - 5 * 60 * 1000 // Last 5 minutes\n        ;\n        return {\n            totalOperations: filteredMetrics.length,\n            averageDuration: durations.reduce((a, b)=>a + b, 0) / durations.length,\n            minDuration: Math.min(...durations),\n            maxDuration: Math.max(...durations),\n            recentOperations: filteredMetrics.filter((m)=>m.timestamp > recentCutoff).length,\n            slowOperations: filteredMetrics.filter((m)=>m.duration > 1000).length\n        };\n    }\n    // Get recent slow operations\n    getSlowOperations(limit = 10) {\n        return this.metrics.filter((m)=>m.duration > 1000).sort((a, b)=>b.timestamp - a.timestamp).slice(0, limit).map((m)=>({\n                operation: m.operation,\n                duration: m.duration,\n                timestamp: m.timestamp,\n                metadata: m.metadata\n            }));\n    }\n    // Get operation breakdown\n    getOperationBreakdown() {\n        const breakdown = {};\n        this.metrics.forEach((metric)=>{\n            if (!breakdown[metric.operation]) {\n                breakdown[metric.operation] = {\n                    count: 0,\n                    totalDuration: 0,\n                    averageDuration: 0,\n                    maxDuration: 0\n                };\n            }\n            const op = breakdown[metric.operation];\n            op.count += 1;\n            op.totalDuration += metric.duration;\n            op.maxDuration = Math.max(op.maxDuration, metric.duration);\n        });\n        // Calculate averages\n        Object.values(breakdown).forEach((op)=>{\n            op.averageDuration = op.totalDuration / op.count;\n        });\n        return breakdown;\n    }\n    // Clear all metrics\n    clear() {\n        this.metrics = [];\n        this.timers.clear();\n        _logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Performance monitor cleared\");\n    }\n    // Export metrics for analysis\n    exportMetrics() {\n        return [\n            ...this.metrics\n        ];\n    }\n    constructor(){\n        this.metrics = [];\n        this.maxMetrics = 1000 // Keep last 1000 operations\n        ;\n        this.timers = new Map();\n    }\n}\n// Export singleton instance\nconst performanceMonitor = new PerformanceMonitor();\n// Helper function for timing rating operations specifically\nconst timeRatingOperation = async (operation, fn, metadata)=>{\n    const { result } = await performanceMonitor.timeFunction(`rating_${operation}`, fn, metadata);\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/performance-monitor.ts\n");

/***/ }),

/***/ "(api)/./src/lib/validation.ts":
/*!*******************************!*\
  !*** ./src/lib/validation.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createVideoSchema: () => (/* binding */ createVideoSchema),\n/* harmony export */   emailSchema: () => (/* binding */ emailSchema),\n/* harmony export */   isValidEmail: () => (/* binding */ isValidEmail),\n/* harmony export */   isValidPassword: () => (/* binding */ isValidPassword),\n/* harmony export */   isValidUsername: () => (/* binding */ isValidUsername),\n/* harmony export */   isValidVideoUrl: () => (/* binding */ isValidVideoUrl),\n/* harmony export */   paginationSchema: () => (/* binding */ paginationSchema),\n/* harmony export */   passwordSchema: () => (/* binding */ passwordSchema),\n/* harmony export */   ratingSchema: () => (/* binding */ ratingSchema),\n/* harmony export */   safeValidateSchema: () => (/* binding */ safeValidateSchema),\n/* harmony export */   sanitizeArray: () => (/* binding */ sanitizeArray),\n/* harmony export */   sanitizeString: () => (/* binding */ sanitizeString),\n/* harmony export */   sanitizeTags: () => (/* binding */ sanitizeTags),\n/* harmony export */   searchSchema: () => (/* binding */ searchSchema),\n/* harmony export */   signInSchema: () => (/* binding */ signInSchema),\n/* harmony export */   signUpSchema: () => (/* binding */ signUpSchema),\n/* harmony export */   updateUserSchema: () => (/* binding */ updateUserSchema),\n/* harmony export */   updateVideoSchema: () => (/* binding */ updateVideoSchema),\n/* harmony export */   urlSchema: () => (/* binding */ urlSchema),\n/* harmony export */   usernameSchema: () => (/* binding */ usernameSchema),\n/* harmony export */   uuidSchema: () => (/* binding */ uuidSchema),\n/* harmony export */   validateArrayOfStrings: () => (/* binding */ validateArrayOfStrings),\n/* harmony export */   validateOptionalString: () => (/* binding */ validateOptionalString),\n/* harmony export */   validatePartialSchema: () => (/* binding */ validatePartialSchema),\n/* harmony export */   validateSchema: () => (/* binding */ validateSchema),\n/* harmony export */   videoFilterQuerySchema: () => (/* binding */ videoFilterQuerySchema),\n/* harmony export */   videoFilterSchema: () => (/* binding */ videoFilterSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"zod\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"(api)/./src/lib/constants.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ \"(api)/./src/lib/errors.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([zod__WEBPACK_IMPORTED_MODULE_0__]);\nzod__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Base validation schemas\nconst emailSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.string().email(\"Please enter a valid email address\").min(1, \"Email is required\");\nconst passwordSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(_constants__WEBPACK_IMPORTED_MODULE_1__.USER_LIMITS.MIN_PASSWORD_LENGTH, `Password must be at least ${_constants__WEBPACK_IMPORTED_MODULE_1__.USER_LIMITS.MIN_PASSWORD_LENGTH} characters long`).max(_constants__WEBPACK_IMPORTED_MODULE_1__.USER_LIMITS.MAX_PASSWORD_LENGTH, `Password must be at most ${_constants__WEBPACK_IMPORTED_MODULE_1__.USER_LIMITS.MAX_PASSWORD_LENGTH} characters long`);\nconst usernameSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(_constants__WEBPACK_IMPORTED_MODULE_1__.USER_LIMITS.MIN_USERNAME_LENGTH, `Username must be at least ${_constants__WEBPACK_IMPORTED_MODULE_1__.USER_LIMITS.MIN_USERNAME_LENGTH} characters long`).max(_constants__WEBPACK_IMPORTED_MODULE_1__.USER_LIMITS.MAX_USERNAME_LENGTH, `Username must be at most ${_constants__WEBPACK_IMPORTED_MODULE_1__.USER_LIMITS.MAX_USERNAME_LENGTH} characters long`).regex(_constants__WEBPACK_IMPORTED_MODULE_1__.VALIDATION_PATTERNS.USERNAME, \"Username can only contain letters, numbers, and underscores\");\nconst urlSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.string().url(\"Please enter a valid URL\").min(1, \"URL is required\");\n// User validation schemas\nconst signInSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    email: emailSchema,\n    password: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Password is required\")\n});\nconst signUpSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    email: emailSchema,\n    username: usernameSchema,\n    password: passwordSchema,\n    confirmPassword: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"First name is required\").max(50, \"First name is too long\"),\n    lastName: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Last name is required\").max(50, \"Last name is too long\")\n}).refine((data)=>data.password === data.confirmPassword, {\n    message: \"Passwords do not match\",\n    path: [\n        \"confirmPassword\"\n    ]\n});\nconst updateUserSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().max(50, \"First name is too long\").optional(),\n    lastName: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().max(50, \"Last name is too long\").optional(),\n    city: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().max(100, \"City name is too long\").optional(),\n    birthDay: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().optional(),\n    gender: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"male\",\n        \"female\",\n        \"other\"\n    ]).optional()\n}).partial();\n// Video validation schemas\nconst createVideoSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().max(_constants__WEBPACK_IMPORTED_MODULE_1__.VIDEO_LIMITS.MAX_TITLE_LENGTH, `Title must be at most ${_constants__WEBPACK_IMPORTED_MODULE_1__.VIDEO_LIMITS.MAX_TITLE_LENGTH} characters long`).optional(),\n    originalUrl: urlSchema,\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().max(_constants__WEBPACK_IMPORTED_MODULE_1__.VIDEO_LIMITS.MAX_DESCRIPTION_LENGTH, `Description must be at most ${_constants__WEBPACK_IMPORTED_MODULE_1__.VIDEO_LIMITS.MAX_DESCRIPTION_LENGTH} characters long`).optional(),\n    isNsfw: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n    tags: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1).max(50)).optional().default([]),\n    tagRatings: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1).max(50),\n        rating: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(0).max(5)\n    })).optional().default([]),\n    embedUrl: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    thumbnail: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().url().optional().nullable(),\n    previewUrl: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().url().optional().nullable()\n});\nconst updateVideoSchema = createVideoSchema.partial();\n// Tag rating filter schema\nconst tagRatingFilterSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    tagName: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    minRating: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(1).max(5),\n    maxRating: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(1).max(5)\n});\n// Schema for validating query parameters (strings from URL)\nconst videoFilterQuerySchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    search: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    tags: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string())\n    ]).optional().default([]).transform((val)=>{\n        if (!val || val.length === 0) return [];\n        return Array.isArray(val) ? val : [\n            val\n        ];\n    }),\n    tagRatings: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional().transform((val)=>{\n        if (!val) return [];\n        try {\n            const parsed = JSON.parse(val);\n            return Array.isArray(parsed) ? zod__WEBPACK_IMPORTED_MODULE_0__.z.array(tagRatingFilterSchema).parse(parsed) : [];\n        } catch  {\n            return [];\n        }\n    }),\n    includeNsfw: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional().default(\"true\").transform((val)=>val === \"true\"),\n    userId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().uuid().optional(),\n    sortBy: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"createdAt\",\n        \"title\",\n        \"ratings\"\n    ]).default(\"createdAt\"),\n    sortOrder: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"asc\",\n        \"desc\"\n    ]).default(\"desc\"),\n    page: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional().default(\"1\").transform((val)=>parseInt(val, 10)).pipe(zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().min(1)),\n    limit: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional().default(\"12\").transform((val)=>parseInt(val, 10)).pipe(zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().min(1).max(50))\n});\n// Schema for validating already-typed filter objects (for service layer)\nconst videoFilterSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    search: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    tags: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).default([]),\n    tagRatings: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(tagRatingFilterSchema).default([]),\n    includeNsfw: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(true),\n    userId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().uuid().optional(),\n    sortBy: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"createdAt\",\n        \"title\",\n        \"ratings\"\n    ]).default(\"createdAt\"),\n    sortOrder: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"asc\",\n        \"desc\"\n    ]).default(\"desc\"),\n    page: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().min(1).default(1),\n    limit: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().min(1).max(50).default(12)\n});\n// Rating validation schema\nconst ratingSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    tagId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().cuid(\"Invalid tag ID\"),\n    level: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().min(1, \"Rating must be at least 1\").max(5, \"Rating must be at most 5\")\n});\n// Query parameter schemas\nconst paginationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    page: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().transform(Number).pipe(zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().min(1).default(1)),\n    limit: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().transform(Number).pipe(zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().min(1).max(50).default(12))\n});\nconst searchSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    q: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Search query is required\").max(100, \"Search query is too long\")\n});\n// ID validation schemas\nconst uuidSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.string().uuid(\"Invalid ID format\");\n// Validation utility functions\nfunction validateSchema(schema, data) {\n    try {\n        return schema.parse(data);\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_0__.z.ZodError) {\n            const firstError = error.errors[0];\n            throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError(firstError.message, firstError.path.join(\".\"), {\n                field: firstError.path.join(\".\"),\n                value: firstError.code === \"invalid_type\" ? data : undefined,\n                errors: error.errors\n            });\n        }\n        throw error;\n    }\n}\nfunction validatePartialSchema(schema, data) {\n    return validateSchema(schema.partial(), data);\n}\nfunction safeValidateSchema(schema, data) {\n    try {\n        const validatedData = validateSchema(schema, data);\n        return {\n            success: true,\n            data: validatedData\n        };\n    } catch (error) {\n        if (error instanceof _errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError) {\n            return {\n                success: false,\n                error\n            };\n        }\n        return {\n            success: false,\n            error: new _errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError(\"Validation failed\", undefined, {\n                originalError: error\n            })\n        };\n    }\n}\n// Field-specific validators\nfunction isValidEmail(email) {\n    return _constants__WEBPACK_IMPORTED_MODULE_1__.VALIDATION_PATTERNS.EMAIL.test(email);\n}\nfunction isValidUsername(username) {\n    return username.length >= _constants__WEBPACK_IMPORTED_MODULE_1__.USER_LIMITS.MIN_USERNAME_LENGTH && username.length <= _constants__WEBPACK_IMPORTED_MODULE_1__.USER_LIMITS.MAX_USERNAME_LENGTH && _constants__WEBPACK_IMPORTED_MODULE_1__.VALIDATION_PATTERNS.USERNAME.test(username);\n}\nfunction isValidPassword(password) {\n    return password.length >= _constants__WEBPACK_IMPORTED_MODULE_1__.USER_LIMITS.MIN_PASSWORD_LENGTH && password.length <= _constants__WEBPACK_IMPORTED_MODULE_1__.USER_LIMITS.MAX_PASSWORD_LENGTH;\n}\nfunction isValidVideoUrl(url) {\n    try {\n        new URL(url) // Check if it's a valid URL\n        ;\n        return true // Accept any valid URL now that we support multiple platforms\n        ;\n    } catch  {\n        return false;\n    }\n}\n// Custom validation helpers\nfunction validateArrayOfStrings(array, fieldName, maxLength) {\n    if (!Array.isArray(array)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError(`${fieldName} must be an array`, fieldName);\n    }\n    if (maxLength && array.length > maxLength) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError(`${fieldName} cannot have more than ${maxLength} items`, fieldName, {\n            maxLength,\n            currentLength: array.length\n        });\n    }\n    return array.map((item, index)=>{\n        if (typeof item !== \"string\") {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError(`${fieldName}[${index}] must be a string`, `${fieldName}[${index}]`, {\n                value: item,\n                type: typeof item\n            });\n        }\n        return item.trim();\n    }).filter((item)=>item.length > 0);\n}\nfunction validateOptionalString(value, fieldName, maxLength) {\n    if (value === null || value === undefined || value === \"\") {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError(`${fieldName} must be a string`, fieldName, {\n            value,\n            type: typeof value\n        });\n    }\n    if (maxLength && value.length > maxLength) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError(`${fieldName} cannot be longer than ${maxLength} characters`, fieldName, {\n            maxLength,\n            currentLength: value.length\n        });\n    }\n    return value.trim();\n}\n// Sanitization helpers\nfunction sanitizeString(input) {\n    return input.trim().replace(/\\s+/g, \" \");\n}\nfunction sanitizeArray(input) {\n    return input.map((item)=>sanitizeString(item)).filter((item)=>item.length > 0).filter((item, index, arr)=>arr.indexOf(item) === index) // Remove duplicates\n    ;\n}\nfunction sanitizeTags(tags) {\n    return sanitizeArray(tags).map((tag)=>tag.toLowerCase().trim()).filter((tag)=>tag.length >= 2 && tag.length <= 50) // Reasonable tag length limits\n    .filter((tag)=>/^[a-z0-9\\s-_]+$/i.test(tag)) // Only allow alphanumeric, spaces, hyphens, underscores\n    ;\n// Removed tag limit - allow unlimited tags\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/validation.ts\n");

/***/ }),

/***/ "(api)/./src/repositories/base.repository.ts":
/*!*********************************************!*\
  !*** ./src/repositories/base.repository.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseRepository: () => (/* binding */ BaseRepository)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/db */ \"(api)/./src/lib/db.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/logger */ \"(api)/./src/lib/logger.ts\");\n\n\nclass BaseRepository {\n    async findById(id) {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db[this.tableName].findUnique({\n                where: {\n                    id\n                }\n            });\n            return result;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(`Error finding ${this.tableName} by id`, {\n                id,\n                error\n            });\n            throw error;\n        }\n    }\n    async findMany(filters) {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db[this.tableName].findMany(filters);\n            return result;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(`Error finding many ${this.tableName}`, {\n                filters,\n                error\n            });\n            throw error;\n        }\n    }\n    async create(data) {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db[this.tableName].create({\n                data\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.info(`Created ${this.tableName}`, {\n                id: result.id\n            });\n            return result;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(`Error creating ${this.tableName}`, {\n                data,\n                error\n            });\n            throw error;\n        }\n    }\n    async update(id, data) {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db[this.tableName].update({\n                where: {\n                    id\n                },\n                data\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.info(`Updated ${this.tableName}`, {\n                id\n            });\n            return result;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(`Error updating ${this.tableName}`, {\n                id,\n                data,\n                error\n            });\n            throw error;\n        }\n    }\n    async delete(id) {\n        try {\n            await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db[this.tableName].delete({\n                where: {\n                    id\n                }\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.info(`Deleted ${this.tableName}`, {\n                id\n            });\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(`Error deleting ${this.tableName}`, {\n                id,\n                error\n            });\n            throw error;\n        }\n    }\n    async count(filters) {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db[this.tableName].count(filters);\n            return result;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(`Error counting ${this.tableName}`, {\n                filters,\n                error\n            });\n            throw error;\n        }\n    }\n    async findManyWithPagination(filters = {}, page = 1, limit = 10) {\n        try {\n            const skip = (page - 1) * limit;\n            const [items, total] = await Promise.all([\n                _lib_db__WEBPACK_IMPORTED_MODULE_0__.db[this.tableName].findMany({\n                    ...filters,\n                    skip,\n                    take: limit\n                }),\n                _lib_db__WEBPACK_IMPORTED_MODULE_0__.db[this.tableName].count({\n                    where: filters.where\n                })\n            ]);\n            const totalPages = Math.ceil(total / limit);\n            return {\n                items,\n                total,\n                totalPages\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(`Error finding ${this.tableName} with pagination`, {\n                filters,\n                page,\n                limit,\n                error\n            });\n            throw error;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/repositories/base.repository.ts\n");

/***/ }),

/***/ "(api)/./src/repositories/rating.repository.ts":
/*!***********************************************!*\
  !*** ./src/repositories/rating.repository.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RatingRepositoryImpl: () => (/* binding */ RatingRepositoryImpl),\n/* harmony export */   ratingRepository: () => (/* binding */ ratingRepository)\n/* harmony export */ });\n/* harmony import */ var _base_repository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.repository */ \"(api)/./src/repositories/base.repository.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/db */ \"(api)/./src/lib/db.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/logger */ \"(api)/./src/lib/logger.ts\");\n/* harmony import */ var _lib_performance_monitor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/performance-monitor */ \"(api)/./src/lib/performance-monitor.ts\");\n\n\n\n\nclass RatingRepositoryImpl extends _base_repository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    async findByVideoId(videoId) {\n        try {\n            const ratings = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.rating.findMany({\n                where: {\n                    videoId\n                },\n                include: {\n                    user: {\n                        select: {\n                            id: true,\n                            username: true,\n                            firstName: true,\n                            lastName: true,\n                            avatar: true\n                        }\n                    },\n                    tag: true\n                },\n                orderBy: {\n                    createdAt: \"desc\"\n                }\n            });\n            return ratings;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding ratings by video id\", {\n                videoId,\n                error\n            });\n            throw error;\n        }\n    }\n    async findByUserId(userId) {\n        try {\n            const ratings = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.rating.findMany({\n                where: {\n                    userId\n                },\n                include: {\n                    video: {\n                        include: {\n                            user: {\n                                select: {\n                                    id: true,\n                                    username: true,\n                                    firstName: true,\n                                    lastName: true,\n                                    avatar: true\n                                }\n                            }\n                        }\n                    },\n                    tag: true\n                },\n                orderBy: {\n                    createdAt: \"desc\"\n                }\n            });\n            return ratings;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding ratings by user id\", {\n                userId,\n                error\n            });\n            throw error;\n        }\n    }\n    async findByUserAndVideo(userId, videoId) {\n        try {\n            const ratings = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.rating.findMany({\n                where: {\n                    userId,\n                    videoId\n                },\n                include: {\n                    tag: true\n                }\n            });\n            return ratings;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding ratings by user and video\", {\n                userId,\n                videoId,\n                error\n            });\n            throw error;\n        }\n    }\n    async upsertRating(videoId, userId, tagId, level) {\n        try {\n            const rating = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.rating.upsert({\n                where: {\n                    videoId_userId_tagId: {\n                        videoId,\n                        userId,\n                        tagId\n                    }\n                },\n                update: {\n                    level\n                },\n                create: {\n                    videoId,\n                    userId,\n                    tagId,\n                    level\n                },\n                include: {\n                    user: {\n                        select: {\n                            id: true,\n                            username: true,\n                            firstName: true,\n                            lastName: true,\n                            avatar: true\n                        }\n                    },\n                    tag: true\n                }\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(\"Upserted rating\", {\n                videoId,\n                userId,\n                tagId,\n                level\n            });\n            return rating;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error upserting rating\", {\n                videoId,\n                userId,\n                tagId,\n                level,\n                error\n            });\n            throw error;\n        }\n    }\n    async deleteRating(videoId, userId, tagId) {\n        try {\n            await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.rating.delete({\n                where: {\n                    videoId_userId_tagId: {\n                        videoId,\n                        userId,\n                        tagId\n                    }\n                }\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(\"Deleted rating\", {\n                videoId,\n                userId,\n                tagId\n            });\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error deleting rating\", {\n                videoId,\n                userId,\n                tagId,\n                error\n            });\n            throw error;\n        }\n    }\n    async getAverageRating(videoId, tagId) {\n        try {\n            const where = {\n                videoId\n            };\n            if (tagId) {\n                where.tagId = tagId;\n            }\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.rating.aggregate({\n                where,\n                _avg: {\n                    level: true\n                }\n            });\n            return result._avg.level || 0;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error getting average rating\", {\n                videoId,\n                tagId,\n                error\n            });\n            throw error;\n        }\n    }\n    async getRatingDistribution(videoId, tagId) {\n        try {\n            const where = {\n                videoId\n            };\n            if (tagId) {\n                where.tagId = tagId;\n            }\n            const distribution = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.rating.groupBy({\n                by: [\n                    \"level\"\n                ],\n                where,\n                _count: {\n                    level: true\n                },\n                orderBy: {\n                    level: \"asc\"\n                }\n            });\n            return distribution.map((item)=>({\n                    level: item.level,\n                    count: item._count.level\n                }));\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error getting rating distribution\", {\n                videoId,\n                tagId,\n                error\n            });\n            throw error;\n        }\n    }\n    async getUserRatingForVideo(userId, videoId, tagId) {\n        try {\n            const rating = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.rating.findUnique({\n                where: {\n                    videoId_userId_tagId: {\n                        videoId,\n                        userId,\n                        tagId\n                    }\n                },\n                include: {\n                    tag: true\n                }\n            });\n            return rating;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error getting user rating for video\", {\n                userId,\n                videoId,\n                tagId,\n                error\n            });\n            throw error;\n        }\n    }\n    async getTopRatedVideos(limit = 10, tagId) {\n        try {\n            const where = {};\n            if (tagId) {\n                where.tagId = tagId;\n            }\n            const topRated = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.rating.groupBy({\n                by: [\n                    \"videoId\"\n                ],\n                where,\n                _avg: {\n                    level: true\n                },\n                _count: {\n                    level: true\n                },\n                having: {\n                    level: {\n                        _count: {\n                            gte: 3 // At least 3 ratings to be considered\n                        }\n                    }\n                },\n                orderBy: {\n                    _avg: {\n                        level: \"desc\"\n                    }\n                },\n                take: limit\n            });\n            return topRated.map((item)=>({\n                    videoId: item.videoId,\n                    averageRating: item._avg.level || 0,\n                    ratingCount: item._count.level\n                }));\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error getting top rated videos\", {\n                limit,\n                tagId,\n                error\n            });\n            throw error;\n        }\n    }\n    async bulkUpsertRatings(ratings) {\n        return (0,_lib_performance_monitor__WEBPACK_IMPORTED_MODULE_3__.timeRatingOperation)(\"bulk_upsert\", async ()=>{\n            try {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(\"Starting bulk rating upsert\", {\n                    count: ratings.length\n                });\n                // Use transaction for consistency\n                const result = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.$transaction(async (tx)=>{\n                    const upsertPromises = ratings.map((rating)=>tx.rating.upsert({\n                            where: {\n                                videoId_userId_tagId: {\n                                    videoId: rating.videoId,\n                                    userId: rating.userId,\n                                    tagId: rating.tagId\n                                }\n                            },\n                            update: {\n                                level: rating.level,\n                                updatedAt: new Date()\n                            },\n                            create: {\n                                videoId: rating.videoId,\n                                userId: rating.userId,\n                                tagId: rating.tagId,\n                                level: rating.level\n                            },\n                            include: {\n                                user: {\n                                    select: {\n                                        id: true,\n                                        username: true,\n                                        firstName: true,\n                                        lastName: true,\n                                        avatar: true\n                                    }\n                                },\n                                tag: true\n                            }\n                        }));\n                    return Promise.all(upsertPromises);\n                });\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(\"Bulk rating upsert completed\", {\n                    count: ratings.length,\n                    successful: result.length\n                });\n                return result;\n            } catch (error) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error in bulk rating upsert\", {\n                    count: ratings.length,\n                    error\n                });\n                throw error;\n            }\n        }, {\n            ratingsCount: ratings.length\n        });\n    }\n    async getRatingsByVideoIds(videoIds) {\n        try {\n            if (videoIds.length === 0) return new Map();\n            const ratings = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.rating.findMany({\n                where: {\n                    videoId: {\n                        in: videoIds\n                    }\n                },\n                include: {\n                    user: {\n                        select: {\n                            id: true,\n                            username: true,\n                            firstName: true,\n                            lastName: true,\n                            avatar: true\n                        }\n                    },\n                    tag: true\n                },\n                orderBy: {\n                    createdAt: \"desc\"\n                }\n            });\n            // Group ratings by video ID\n            const ratingsByVideo = new Map();\n            ratings.forEach((rating)=>{\n                if (!ratingsByVideo.has(rating.videoId)) {\n                    ratingsByVideo.set(rating.videoId, []);\n                }\n                ratingsByVideo.get(rating.videoId).push(rating);\n            });\n            return ratingsByVideo;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error getting ratings by video IDs\", {\n                videoIds: videoIds.length,\n                error\n            });\n            throw error;\n        }\n    }\n    async getAverageRatingsByVideoIds(videoIds, tagId) {\n        try {\n            if (videoIds.length === 0) return new Map();\n            const where = {\n                videoId: {\n                    in: videoIds\n                }\n            };\n            if (tagId) {\n                where.tagId = tagId;\n            }\n            const averages = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.rating.groupBy({\n                by: [\n                    \"videoId\"\n                ],\n                where,\n                _avg: {\n                    level: true\n                }\n            });\n            const averageMap = new Map();\n            averages.forEach((avg)=>{\n                averageMap.set(avg.videoId, avg._avg.level || 0);\n            });\n            return averageMap;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error getting average ratings by video IDs\", {\n                videoIds: videoIds.length,\n                tagId,\n                error\n            });\n            throw error;\n        }\n    }\n    constructor(...args){\n        super(...args);\n        this.tableName = \"rating\";\n    }\n}\n// Export singleton instance\nconst ratingRepository = new RatingRepositoryImpl();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/repositories/rating.repository.ts\n");

/***/ }),

/***/ "(api)/./src/repositories/tag.repository.ts":
/*!********************************************!*\
  !*** ./src/repositories/tag.repository.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TagRepositoryImpl: () => (/* binding */ TagRepositoryImpl),\n/* harmony export */   tagRepository: () => (/* binding */ tagRepository)\n/* harmony export */ });\n/* harmony import */ var _base_repository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.repository */ \"(api)/./src/repositories/base.repository.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/db */ \"(api)/./src/lib/db.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/logger */ \"(api)/./src/lib/logger.ts\");\n\n\n\nclass TagRepositoryImpl extends _base_repository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    async findByName(name) {\n        try {\n            const tag = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.tag.findUnique({\n                where: {\n                    name\n                }\n            });\n            return tag;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding tag by name\", {\n                name,\n                error\n            });\n            throw error;\n        }\n    }\n    async findOrCreate(name) {\n        try {\n            const tag = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.tag.upsert({\n                where: {\n                    name\n                },\n                update: {},\n                create: {\n                    name\n                }\n            });\n            return tag;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding or creating tag\", {\n                name,\n                error\n            });\n            throw error;\n        }\n    }\n    async findManyByNames(names) {\n        try {\n            const tags = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.tag.findMany({\n                where: {\n                    name: {\n                        in: names\n                    }\n                }\n            });\n            return tags;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding tags by names\", {\n                names,\n                error\n            });\n            throw error;\n        }\n    }\n    async searchTags(query, limit = 10) {\n        try {\n            const tags = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.tag.findMany({\n                where: {\n                    name: {\n                        contains: query,\n                        mode: \"insensitive\"\n                    }\n                },\n                take: limit,\n                orderBy: {\n                    name: \"asc\"\n                }\n            });\n            return tags;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error searching tags\", {\n                query,\n                limit,\n                error\n            });\n            throw error;\n        }\n    }\n    async getPopularTags(limit = 20) {\n        try {\n            const tags = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.tag.findMany({\n                include: {\n                    _count: {\n                        select: {\n                            videos: true\n                        }\n                    }\n                },\n                orderBy: {\n                    videos: {\n                        _count: \"desc\"\n                    }\n                },\n                take: limit\n            });\n            return tags;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error getting popular tags\", {\n                limit,\n                error\n            });\n            throw error;\n        }\n    }\n    async getTagsWithVideoCount() {\n        try {\n            const tagsWithCount = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.tag.findMany({\n                include: {\n                    _count: {\n                        select: {\n                            videos: true\n                        }\n                    }\n                },\n                orderBy: {\n                    name: \"asc\"\n                }\n            });\n            return tagsWithCount.map((tag)=>({\n                    ...tag,\n                    videoCount: tag._count.videos\n                }));\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error getting tags with video count\", {\n                error\n            });\n            throw error;\n        }\n    }\n    async getTagsByVideoId(videoId) {\n        try {\n            const videoTags = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.videoTag.findMany({\n                where: {\n                    videoId\n                },\n                include: {\n                    tag: true\n                }\n            });\n            return videoTags.map((vt)=>vt.tag);\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error getting tags by video id\", {\n                videoId,\n                error\n            });\n            throw error;\n        }\n    }\n    async createMultiple(names) {\n        try {\n            // Filter out existing tags\n            const existingTags = await this.findManyByNames(names);\n            const existingNames = existingTags.map((tag)=>tag.name);\n            const newNames = names.filter((name)=>!existingNames.includes(name));\n            if (newNames.length === 0) {\n                return existingTags;\n            }\n            // Create new tags\n            const newTags = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.tag.createMany({\n                data: newNames.map((name)=>({\n                        name\n                    })),\n                skipDuplicates: true\n            });\n            // Return all tags (existing + new)\n            return this.findManyByNames(names);\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error creating multiple tags\", {\n                names,\n                error\n            });\n            throw error;\n        }\n    }\n    async getTagUsageStats(tagId) {\n        try {\n            const [videoCount, ratingStats] = await Promise.all([\n                _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.videoTag.count({\n                    where: {\n                        tagId\n                    }\n                }),\n                _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.rating.aggregate({\n                    where: {\n                        tagId\n                    },\n                    _count: {\n                        level: true\n                    },\n                    _avg: {\n                        level: true\n                    }\n                })\n            ]);\n            return {\n                totalVideos: videoCount,\n                totalRatings: ratingStats._count.level,\n                averageRating: ratingStats._avg.level || 0\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error getting tag usage stats\", {\n                tagId,\n                error\n            });\n            throw error;\n        }\n    }\n    async getTrendingTags(days = 7, limit = 10) {\n        try {\n            const dateThreshold = new Date();\n            dateThreshold.setDate(dateThreshold.getDate() - days);\n            const trendingTags = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.tag.findMany({\n                include: {\n                    videos: {\n                        where: {\n                            video: {\n                                createdAt: {\n                                    gte: dateThreshold\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n            const tagsWithCounts = trendingTags.map((tag)=>({\n                    ...tag,\n                    recentVideos: tag.videos.length\n                })).filter((tag)=>tag.recentVideos > 0).sort((a, b)=>b.recentVideos - a.recentVideos).slice(0, limit);\n            return tagsWithCounts;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error getting trending tags\", {\n                days,\n                limit,\n                error\n            });\n            throw error;\n        }\n    }\n    async findAllWithCounts() {\n        try {\n            const tags = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.tag.findMany({\n                include: {\n                    _count: {\n                        select: {\n                            videos: true\n                        }\n                    }\n                },\n                orderBy: {\n                    name: \"asc\"\n                }\n            });\n            return tags;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding all tags with counts\", {\n                error\n            });\n            throw error;\n        }\n    }\n    async findPopular(limit = 20) {\n        try {\n            const tags = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.tag.findMany({\n                include: {\n                    _count: {\n                        select: {\n                            videos: true\n                        }\n                    }\n                },\n                orderBy: {\n                    videos: {\n                        _count: \"desc\"\n                    }\n                },\n                take: limit\n            });\n            return tags;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding popular tags\", {\n                limit,\n                error\n            });\n            throw error;\n        }\n    }\n    async search(query, limit = 10) {\n        try {\n            const tags = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.tag.findMany({\n                where: {\n                    name: {\n                        contains: query,\n                        mode: \"insensitive\"\n                    }\n                },\n                take: limit,\n                orderBy: {\n                    name: \"asc\"\n                }\n            });\n            return tags;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error searching tags\", {\n                query,\n                limit,\n                error\n            });\n            throw error;\n        }\n    }\n    constructor(...args){\n        super(...args);\n        this.tableName = \"tag\";\n    }\n}\n// Export singleton instance\nconst tagRepository = new TagRepositoryImpl();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/repositories/tag.repository.ts\n");

/***/ }),

/***/ "(api)/./src/repositories/user.repository.ts":
/*!*********************************************!*\
  !*** ./src/repositories/user.repository.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UserRepositoryImpl: () => (/* binding */ UserRepositoryImpl),\n/* harmony export */   userRepository: () => (/* binding */ userRepository)\n/* harmony export */ });\n/* harmony import */ var _base_repository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.repository */ \"(api)/./src/repositories/base.repository.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/db */ \"(api)/./src/lib/db.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/logger */ \"(api)/./src/lib/logger.ts\");\n\n\n\nclass UserRepositoryImpl extends _base_repository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    async findByEmail(email) {\n        try {\n            const user = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.user.findUnique({\n                where: {\n                    email\n                }\n            });\n            return user;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding user by email\", {\n                email,\n                error\n            });\n            throw error;\n        }\n    }\n    async findByEmailWithPassword(email) {\n        try {\n            const user = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.user.findUnique({\n                where: {\n                    email\n                },\n                select: {\n                    id: true,\n                    name: true,\n                    email: true,\n                    emailVerified: true,\n                    image: true,\n                    username: true,\n                    firstName: true,\n                    lastName: true,\n                    password: true,\n                    avatar: true,\n                    city: true,\n                    birthDay: true,\n                    gender: true,\n                    createdAt: true,\n                    updatedAt: true\n                }\n            });\n            return user;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding user by email with password\", {\n                email,\n                error\n            });\n            throw error;\n        }\n    }\n    async findByUsername(username) {\n        try {\n            const user = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.user.findUnique({\n                where: {\n                    username\n                }\n            });\n            return user;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding user by username\", {\n                username,\n                error\n            });\n            throw error;\n        }\n    }\n    async findByEmailOrUsername(email, username) {\n        try {\n            const user = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.user.findFirst({\n                where: {\n                    OR: [\n                        {\n                            email\n                        },\n                        {\n                            username\n                        }\n                    ]\n                }\n            });\n            return user;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding user by email or username\", {\n                email,\n                username,\n                error\n            });\n            throw error;\n        }\n    }\n    async findFollowers(userId) {\n        try {\n            const followers = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.user.findMany({\n                where: {\n                    following: {\n                        some: {\n                            followingId: userId\n                        }\n                    }\n                },\n                select: {\n                    id: true,\n                    name: true,\n                    email: true,\n                    emailVerified: true,\n                    image: true,\n                    username: true,\n                    firstName: true,\n                    lastName: true,\n                    password: true,\n                    avatar: true,\n                    city: true,\n                    birthDay: true,\n                    gender: true,\n                    createdAt: true,\n                    updatedAt: true\n                }\n            });\n            return followers;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding followers\", {\n                userId,\n                error\n            });\n            throw error;\n        }\n    }\n    async findFollowing(userId) {\n        try {\n            const following = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.user.findMany({\n                where: {\n                    followers: {\n                        some: {\n                            followerId: userId\n                        }\n                    }\n                },\n                select: {\n                    id: true,\n                    name: true,\n                    email: true,\n                    emailVerified: true,\n                    image: true,\n                    username: true,\n                    firstName: true,\n                    lastName: true,\n                    password: true,\n                    avatar: true,\n                    city: true,\n                    birthDay: true,\n                    gender: true,\n                    createdAt: true,\n                    updatedAt: true\n                }\n            });\n            return following;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding following\", {\n                userId,\n                error\n            });\n            throw error;\n        }\n    }\n    async isFollowing(followerId, followingId) {\n        try {\n            const follow = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.follow.findUnique({\n                where: {\n                    followerId_followingId: {\n                        followerId,\n                        followingId\n                    }\n                }\n            });\n            return !!follow;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error checking if user is following\", {\n                followerId,\n                followingId,\n                error\n            });\n            throw error;\n        }\n    }\n    async follow(followerId, followingId) {\n        try {\n            await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.follow.create({\n                data: {\n                    followerId,\n                    followingId\n                }\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(\"User followed\", {\n                followerId,\n                followingId\n            });\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error following user\", {\n                followerId,\n                followingId,\n                error\n            });\n            throw error;\n        }\n    }\n    async unfollow(followerId, followingId) {\n        try {\n            await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.follow.delete({\n                where: {\n                    followerId_followingId: {\n                        followerId,\n                        followingId\n                    }\n                }\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(\"User unfollowed\", {\n                followerId,\n                followingId\n            });\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error unfollowing user\", {\n                followerId,\n                followingId,\n                error\n            });\n            throw error;\n        }\n    }\n    async getFollowCounts(userId) {\n        try {\n            const [followers, following] = await Promise.all([\n                _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.follow.count({\n                    where: {\n                        followingId: userId\n                    }\n                }),\n                _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.follow.count({\n                    where: {\n                        followerId: userId\n                    }\n                })\n            ]);\n            return {\n                followers,\n                following\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error getting follow counts\", {\n                userId,\n                error\n            });\n            throw error;\n        }\n    }\n    async findWithStats(id) {\n        try {\n            const user = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.user.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    _count: {\n                        select: {\n                            followers: true,\n                            following: true,\n                            videos: true\n                        }\n                    }\n                }\n            });\n            return user;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding user with stats\", {\n                id,\n                error\n            });\n            throw error;\n        }\n    }\n    async searchUsers(query, limit = 10) {\n        try {\n            const users = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.user.findMany({\n                where: {\n                    OR: [\n                        {\n                            username: {\n                                contains: query,\n                                mode: \"insensitive\"\n                            }\n                        },\n                        {\n                            firstName: {\n                                contains: query,\n                                mode: \"insensitive\"\n                            }\n                        },\n                        {\n                            lastName: {\n                                contains: query,\n                                mode: \"insensitive\"\n                            }\n                        }\n                    ]\n                },\n                take: limit,\n                select: {\n                    id: true,\n                    name: true,\n                    email: true,\n                    emailVerified: true,\n                    image: true,\n                    username: true,\n                    firstName: true,\n                    lastName: true,\n                    password: true,\n                    avatar: true,\n                    city: true,\n                    birthDay: true,\n                    gender: true,\n                    createdAt: true,\n                    updatedAt: true\n                }\n            });\n            return users;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error searching users\", {\n                query,\n                limit,\n                error\n            });\n            throw error;\n        }\n    }\n    constructor(...args){\n        super(...args);\n        this.tableName = \"user\";\n    }\n}\n// Export singleton instance\nconst userRepository = new UserRepositoryImpl();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/repositories/user.repository.ts\n");

/***/ }),

/***/ "(api)/./src/repositories/video.repository.ts":
/*!**********************************************!*\
  !*** ./src/repositories/video.repository.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VideoRepositoryImpl: () => (/* binding */ VideoRepositoryImpl),\n/* harmony export */   videoRepository: () => (/* binding */ videoRepository)\n/* harmony export */ });\n/* harmony import */ var _base_repository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.repository */ \"(api)/./src/repositories/base.repository.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/db */ \"(api)/./src/lib/db.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/logger */ \"(api)/./src/lib/logger.ts\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/constants */ \"(api)/./src/lib/constants.ts\");\n\n\n\n\nclass VideoRepositoryImpl extends _base_repository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    async findByUserId(userId) {\n        try {\n            const videos = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.video.findMany({\n                where: {\n                    userId\n                },\n                include: {\n                    user: {\n                        select: {\n                            id: true,\n                            username: true,\n                            firstName: true,\n                            lastName: true,\n                            avatar: true\n                        }\n                    },\n                    tags: {\n                        include: {\n                            tag: true\n                        }\n                    },\n                    ratings: {\n                        include: {\n                            user: {\n                                select: {\n                                    id: true,\n                                    username: true,\n                                    firstName: true,\n                                    lastName: true,\n                                    avatar: true\n                                }\n                            },\n                            tag: true\n                        }\n                    },\n                    _count: {\n                        select: {\n                            ratings: true\n                        }\n                    }\n                },\n                orderBy: {\n                    createdAt: \"desc\"\n                }\n            });\n            return videos;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding videos by user id\", {\n                userId,\n                error\n            });\n            throw error;\n        }\n    }\n    async findByTags(tags) {\n        try {\n            const videos = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.video.findMany({\n                where: {\n                    tags: {\n                        some: {\n                            tag: {\n                                name: {\n                                    in: tags\n                                }\n                            }\n                        }\n                    }\n                },\n                include: {\n                    user: {\n                        select: {\n                            id: true,\n                            username: true,\n                            firstName: true,\n                            lastName: true,\n                            avatar: true\n                        }\n                    },\n                    tags: {\n                        include: {\n                            tag: true\n                        }\n                    },\n                    ratings: {\n                        include: {\n                            user: {\n                                select: {\n                                    id: true,\n                                    username: true,\n                                    firstName: true,\n                                    lastName: true,\n                                    avatar: true\n                                }\n                            },\n                            tag: true\n                        }\n                    },\n                    _count: {\n                        select: {\n                            ratings: true\n                        }\n                    }\n                },\n                orderBy: {\n                    createdAt: \"desc\"\n                }\n            });\n            return videos;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding videos by tags\", {\n                tags,\n                error\n            });\n            throw error;\n        }\n    }\n    async search(query, includeNsfw = true) {\n        try {\n            const videos = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.video.findMany({\n                where: {\n                    AND: [\n                        {\n                            OR: [\n                                {\n                                    title: {\n                                        contains: query,\n                                        mode: \"insensitive\"\n                                    }\n                                },\n                                {\n                                    description: {\n                                        contains: query,\n                                        mode: \"insensitive\"\n                                    }\n                                },\n                                {\n                                    tags: {\n                                        some: {\n                                            tag: {\n                                                name: {\n                                                    contains: query,\n                                                    mode: \"insensitive\"\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        ...includeNsfw ? [] : [\n                            {\n                                isNsfw: false\n                            }\n                        ]\n                    ]\n                },\n                include: {\n                    user: {\n                        select: {\n                            id: true,\n                            username: true,\n                            firstName: true,\n                            lastName: true,\n                            avatar: true\n                        }\n                    },\n                    tags: {\n                        include: {\n                            tag: true\n                        }\n                    },\n                    ratings: {\n                        include: {\n                            user: {\n                                select: {\n                                    id: true,\n                                    username: true,\n                                    firstName: true,\n                                    lastName: true,\n                                    avatar: true\n                                }\n                            },\n                            tag: true\n                        }\n                    },\n                    _count: {\n                        select: {\n                            ratings: true\n                        }\n                    }\n                },\n                orderBy: {\n                    createdAt: \"desc\"\n                }\n            });\n            return videos;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error searching videos\", {\n                query,\n                error\n            });\n            throw error;\n        }\n    }\n    async findWithRatings(id) {\n        try {\n            const video = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.video.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    user: {\n                        select: {\n                            id: true,\n                            username: true,\n                            firstName: true,\n                            lastName: true,\n                            avatar: true\n                        }\n                    },\n                    tags: {\n                        include: {\n                            tag: true\n                        }\n                    },\n                    ratings: {\n                        include: {\n                            user: {\n                                select: {\n                                    id: true,\n                                    username: true,\n                                    firstName: true,\n                                    lastName: true,\n                                    avatar: true\n                                }\n                            },\n                            tag: true\n                        }\n                    },\n                    _count: {\n                        select: {\n                            ratings: true\n                        }\n                    }\n                }\n            });\n            return video;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding video with ratings\", {\n                id,\n                error\n            });\n            throw error;\n        }\n    }\n    async findWithFilters(filters) {\n        try {\n            const { search, tags, tagRatings, includeNsfw = true, userId, sortBy = \"createdAt\", sortOrder = \"desc\", page = 1, limit = _lib_constants__WEBPACK_IMPORTED_MODULE_3__.PAGINATION.DEFAULT_PAGE_SIZE } = filters;\n            const where = {};\n            // Add search filter\n            if (search) {\n                where.OR = [\n                    {\n                        title: {\n                            contains: search,\n                            mode: \"insensitive\"\n                        }\n                    },\n                    {\n                        description: {\n                            contains: search,\n                            mode: \"insensitive\"\n                        }\n                    }\n                ];\n            }\n            // Add tags filter\n            if (tags && tags.length > 0) {\n                where.tags = {\n                    some: {\n                        tag: {\n                            name: {\n                                in: tags\n                            }\n                        }\n                    }\n                };\n            }\n            // Add user filter\n            if (userId) {\n                where.userId = userId;\n            }\n            // Add NSFW filter\n            if (!includeNsfw) {\n                where.isNsfw = false;\n            }\n            // Add tagRatings filter - we'll filter by having the specified tags first\n            // then post-process to check rating ranges\n            if (tagRatings && tagRatings.length > 0) {\n                const tagNames = tagRatings.map((tr)=>tr.tagName);\n                // Ensure videos have all the specified tags\n                where.tags = {\n                    some: {\n                        tag: {\n                            name: {\n                                in: tagNames\n                            }\n                        }\n                    }\n                };\n            }\n            const skip = (page - 1) * limit;\n            // Build orderBy\n            const orderBy = {};\n            if (sortBy === \"ratings\") {\n                orderBy._count = {\n                    ratings: sortOrder\n                };\n            } else {\n                orderBy[sortBy] = sortOrder;\n            }\n            let [videos, total] = await Promise.all([\n                _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.video.findMany({\n                    where,\n                    include: {\n                        user: {\n                            select: {\n                                id: true,\n                                username: true,\n                                firstName: true,\n                                lastName: true,\n                                avatar: true\n                            }\n                        },\n                        tags: {\n                            include: {\n                                tag: true\n                            }\n                        },\n                        ratings: {\n                            include: {\n                                user: {\n                                    select: {\n                                        id: true,\n                                        username: true,\n                                        firstName: true,\n                                        lastName: true,\n                                        avatar: true\n                                    }\n                                },\n                                tag: true\n                            }\n                        },\n                        _count: {\n                            select: {\n                                ratings: true\n                            }\n                        }\n                    },\n                    orderBy,\n                    skip,\n                    take: limit * 2\n                }),\n                _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.video.count({\n                    where\n                })\n            ]);\n            // Apply tagRatings filter in post-processing\n            if (tagRatings && tagRatings.length > 0) {\n                videos = videos.filter((video)=>{\n                    // Check if video has all required tags with ratings in the specified ranges\n                    return tagRatings.every(({ tagName, minRating, maxRating })=>{\n                        // Find the tag in the video\n                        const videoTag = video.tags.find((vt)=>vt.tag.name === tagName);\n                        if (!videoTag) return false;\n                        // Calculate average rating for this tag on this video\n                        const tagRatings = video.ratings.filter((r)=>r.tag.name === tagName);\n                        if (tagRatings.length === 0) return false;\n                        const averageRating = tagRatings.reduce((sum, r)=>sum + r.level, 0) / tagRatings.length;\n                        // Check if average rating is within the specified range\n                        return averageRating >= minRating && averageRating <= maxRating;\n                    });\n                });\n                // Update total count after filtering\n                total = videos.length;\n                // Apply pagination after filtering\n                videos = videos.slice(0, limit);\n            }\n            const totalPages = Math.ceil(total / limit);\n            return {\n                videos,\n                total,\n                totalPages\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error finding videos with filters\", {\n                filters,\n                error\n            });\n            throw error;\n        }\n    }\n    async createWithTags(videoData, tagNames) {\n        try {\n            const video = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.video.create({\n                data: {\n                    ...videoData,\n                    tags: {\n                        create: tagNames.map((tagName)=>({\n                                tag: {\n                                    connectOrCreate: {\n                                        where: {\n                                            name: tagName\n                                        },\n                                        create: {\n                                            name: tagName\n                                        }\n                                    }\n                                }\n                            }))\n                    }\n                },\n                include: {\n                    user: {\n                        select: {\n                            id: true,\n                            username: true,\n                            firstName: true,\n                            lastName: true,\n                            avatar: true\n                        }\n                    },\n                    tags: {\n                        include: {\n                            tag: true\n                        }\n                    },\n                    _count: {\n                        select: {\n                            ratings: true\n                        }\n                    }\n                }\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(\"Created video with tags\", {\n                videoId: video.id,\n                tagNames\n            });\n            return video;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error creating video with tags\", {\n                videoData,\n                tagNames,\n                error\n            });\n            throw error;\n        }\n    }\n    async getVideoStats(videoId) {\n        try {\n            const [totalRatings, ratingsByTag] = await Promise.all([\n                _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.rating.count({\n                    where: {\n                        videoId\n                    }\n                }),\n                _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.rating.groupBy({\n                    by: [\n                        \"tagId\"\n                    ],\n                    where: {\n                        videoId\n                    },\n                    _avg: {\n                        level: true\n                    },\n                    _count: {\n                        level: true\n                    }\n                })\n            ]);\n            // Get tag names\n            const tagIds = ratingsByTag.map((r)=>r.tagId);\n            const tags = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.tag.findMany({\n                where: {\n                    id: {\n                        in: tagIds\n                    }\n                }\n            });\n            const tagMap = tags.reduce((acc, tag)=>{\n                acc[tag.id] = tag.name;\n                return acc;\n            }, {});\n            const averageRatingByTag = ratingsByTag.map((rating)=>({\n                    tagName: tagMap[rating.tagId] || \"Unknown\",\n                    averageRating: rating._avg.level || 0,\n                    count: rating._count.level\n                }));\n            return {\n                totalRatings,\n                averageRatingByTag\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error getting video stats\", {\n                videoId,\n                error\n            });\n            throw error;\n        }\n    }\n    async getTrendingVideos(limit = 10) {\n        try {\n            // Get videos with most ratings in the last 7 days\n            const sevenDaysAgo = new Date();\n            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n            const videos = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.video.findMany({\n                where: {\n                    createdAt: {\n                        gte: sevenDaysAgo\n                    }\n                },\n                include: {\n                    user: {\n                        select: {\n                            id: true,\n                            username: true,\n                            firstName: true,\n                            lastName: true,\n                            avatar: true\n                        }\n                    },\n                    tags: {\n                        include: {\n                            tag: true\n                        }\n                    },\n                    _count: {\n                        select: {\n                            ratings: true\n                        }\n                    }\n                },\n                orderBy: {\n                    ratings: {\n                        _count: \"desc\"\n                    }\n                },\n                take: limit\n            });\n            return videos;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error getting trending videos\", {\n                limit,\n                error\n            });\n            throw error;\n        }\n    }\n    async addTagToVideo(videoId, tagId) {\n        try {\n            await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.videoTag.create({\n                data: {\n                    videoId,\n                    tagId\n                }\n            });\n        } catch (error) {\n            // Handle duplicate key error (tag already exists on video)\n            if (error instanceof Error && error.message.includes(\"Unique constraint\")) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(\"Tag already exists on video\", {\n                    videoId,\n                    tagId\n                });\n                return;\n            }\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error adding tag to video\", {\n                videoId,\n                tagId,\n                error\n            });\n            throw error;\n        }\n    }\n    async removeTagFromVideo(videoId, tagId) {\n        try {\n            await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.videoTag.deleteMany({\n                where: {\n                    videoId,\n                    tagId\n                }\n            });\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error removing tag from video\", {\n                videoId,\n                tagId,\n                error\n            });\n            throw error;\n        }\n    }\n    constructor(...args){\n        super(...args);\n        this.tableName = \"video\";\n    }\n}\n// Export singleton instance\nconst videoRepository = new VideoRepositoryImpl();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/repositories/video.repository.ts\n");

/***/ }),

/***/ "(api)/./src/services/nsfw.service.ts":
/*!**************************************!*\
  !*** ./src/services/nsfw.service.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NSFWService: () => (/* binding */ NSFWService),\n/* harmony export */   nsfwService: () => (/* binding */ nsfwService)\n/* harmony export */ });\n/* harmony import */ var _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/repositories/video.repository */ \"(api)/./src/repositories/video.repository.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/logger */ \"(api)/./src/lib/logger.ts\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/errors */ \"(api)/./src/lib/errors.ts\");\n\n\n\nclass NSFWService {\n    /**\n   * Automatically detect if a video is NSFW based on title and description\n   * Uses keyword matching for basic detection\n   */ async detectNSFW(title, description) {\n        const nsfwKeywords = [\n            // Explicit terms\n            \"porn\",\n            \"sex\",\n            \"nude\",\n            \"naked\",\n            \"adult\",\n            \"xxx\",\n            \"nsfw\",\n            \"explicit\",\n            \"erotic\",\n            \"fetish\",\n            \"masturbat\",\n            \"orgasm\",\n            // Body parts (common in NSFW content)\n            \"boobs\",\n            \"tits\",\n            \"ass\",\n            \"pussy\",\n            \"dick\",\n            \"cock\",\n            \"penis\",\n            \"vagina\",\n            \"breast\",\n            \"nipple\",\n            // Action words\n            \"fuck\",\n            \"fucking\",\n            \"bang\",\n            \"screw\",\n            \"cum\",\n            \"cumming\",\n            // Slang and abbreviations  \n            \"milf\",\n            \"dilf\",\n            \"bbc\",\n            \"bwc\",\n            \"bj\",\n            \"blowjob\",\n            // Common NSFW site indicators\n            \"onlyfans\",\n            \"pornhub\",\n            \"xvideos\",\n            \"xhamster\",\n            // Age-related (concerning)\n            \"teen\",\n            \"18+\",\n            \"19+\",\n            \"young\",\n            \"schoolgirl\",\n            // Context clues\n            \"tight\",\n            \"wet\",\n            \"hard\",\n            \"horny\",\n            \"kinky\",\n            \"dirty\"\n        ];\n        const textToCheck = `${title} ${description || \"\"}`.toLowerCase();\n        const isNSFW = nsfwKeywords.some((keyword)=>textToCheck.includes(keyword.toLowerCase()));\n        if (isNSFW) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.info(\"NSFW content detected\", {\n                title: title.substring(0, 50) + \"...\",\n                detectionMethod: \"keyword_matching\",\n                keywords: nsfwKeywords.filter((k)=>textToCheck.includes(k))\n            });\n        }\n        return isNSFW;\n    }\n    /**\n   * Mark a video as NSFW or safe (manual override)\n   */ async markVideo(videoId, isNSFW, userId) {\n        try {\n            // Validate input\n            if (!videoId?.trim()) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError(\"Video ID is required\");\n            }\n            if (!userId?.trim()) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError(\"User ID is required\");\n            }\n            // Check if video exists\n            const video = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.findById(videoId);\n            if (!video) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.NotFoundError(\"Video not found\");\n            }\n            // Update the video's NSFW status\n            await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.update(videoId, {\n                isNsfw: isNSFW\n            });\n            // Log the action\n            (0,_lib_logger__WEBPACK_IMPORTED_MODULE_1__.logUserAction)(isNSFW ? \"mark_video_nsfw\" : \"mark_video_safe\", userId, {\n                videoId,\n                videoTitle: video.title,\n                previousStatus: video.isNsfw,\n                newStatus: isNSFW\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.info(\"Video NSFW status updated\", {\n                videoId,\n                isNSFW,\n                userId,\n                action: isNSFW ? \"marked_nsfw\" : \"marked_safe\"\n            });\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(\"Failed to update video NSFW status\", {\n                videoId,\n                isNSFW,\n                userId,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            throw error;\n        }\n    }\n    /**\n   * Bulk scan and update NSFW status for all videos\n   * Useful for initial setup or periodic re-scanning\n   */ async bulkScanVideos(userId) {\n        try {\n            const videos = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.findAll();\n            let scanned = 0;\n            let updated = 0;\n            for (const video of videos){\n                scanned++;\n                const detectedNSFW = await this.detectNSFW(video.title, video.description || undefined);\n                // Only update if detection differs from current status\n                if (detectedNSFW !== video.isNsfw) {\n                    await this.markVideo(video.id, detectedNSFW, userId);\n                    updated++;\n                }\n            }\n            (0,_lib_logger__WEBPACK_IMPORTED_MODULE_1__.logUserAction)(\"bulk_nsfw_scan\", userId, {\n                videosScanned: scanned,\n                videosUpdated: updated\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.info(\"Bulk NSFW scan completed\", {\n                scanned,\n                updated,\n                userId\n            });\n            return {\n                scanned,\n                updated\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(\"Bulk NSFW scan failed\", {\n                userId,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            throw error;\n        }\n    }\n    /**\n   * Get NSFW statistics\n   */ async getNSFWStats() {\n        try {\n            const allVideos = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.findAll();\n            const total = allVideos.length;\n            const nsfwCount = allVideos.filter((v)=>v.isNsfw).length;\n            const safeCount = total - nsfwCount;\n            const percentage = total > 0 ? nsfwCount / total * 100 : 0;\n            return {\n                total,\n                nsfwCount,\n                safeCount,\n                percentage: Math.round(percentage * 100) / 100 // Round to 2 decimal places\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(\"Failed to get NSFW stats\", {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            throw error;\n        }\n    }\n}\n// Create singleton instance\nconst nsfwService = new NSFWService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/services/nsfw.service.ts\n");

/***/ }),

/***/ "(api)/./src/services/reddit.service.ts":
/*!****************************************!*\
  !*** ./src/services/reddit.service.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   redditService: () => (/* binding */ redditService)\n/* harmony export */ });\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/logger */ \"(api)/./src/lib/logger.ts\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/errors */ \"(api)/./src/lib/errors.ts\");\n\n\nclass RedditService {\n    /**\n   * Check if URL is a Reddit URL\n   */ isRedditUrl(url) {\n        return /(?:https?:\\/\\/)?(?:www\\.|old\\.|m\\.|np\\.)?reddit\\.com\\/r\\/\\w+\\/comments\\/\\w+/i.test(url);\n    }\n    /**\n   * Extract Reddit post information from URL\n   */ extractPostInfo(url) {\n        const redditRegex = /(?:https?:\\/\\/)?(?:www\\.|old\\.|m\\.|np\\.)?reddit\\.com\\/r\\/(\\w+)\\/comments\\/([a-zA-Z0-9]+)(?:\\/([^/]+))?/i;\n        const match = url.match(redditRegex);\n        if (!match) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"Invalid Reddit URL format\");\n        }\n        return {\n            subreddit: match[1],\n            postId: match[2],\n            slug: match[3]\n        };\n    }\n    /**\n   * Get Reddit post metadata\n   */ async getPostMetadata(url) {\n        try {\n            const { subreddit, postId } = this.extractPostInfo(url);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Fetching Reddit post metadata\", {\n                subreddit,\n                postId\n            });\n            // Use Reddit JSON API to get post data\n            const jsonUrl = `${this.BASE_URL}/r/${subreddit}/comments/${postId}.json`;\n            const response = await fetch(jsonUrl, {\n                headers: {\n                    \"User-Agent\": \"RateMy Video Platform/1.0 (Educational Content Aggregator)\",\n                    \"Accept\": \"application/json\"\n                }\n            });\n            if (!response.ok) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.APIError(`Failed to fetch Reddit post: ${response.status}`);\n            }\n            const data = await response.json();\n            if (!Array.isArray(data) || data.length === 0) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"Invalid Reddit post response\");\n            }\n            const postData = data[0].data.children[0].data;\n            if (!postData) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"Reddit post not found\");\n            }\n            // Extract video information\n            const videoInfo = this.extractVideoInfo(postData);\n            const metadata = {\n                postId: postData.id,\n                subreddit: postData.subreddit,\n                title: postData.title,\n                author: postData.author,\n                description: postData.selftext || undefined,\n                videoUrl: videoInfo.videoUrl,\n                thumbnailUrl: videoInfo.thumbnailUrl,\n                isNsfw: postData.over_18 || false,\n                upvotes: postData.ups || 0,\n                comments: postData.num_comments || 0,\n                createdAt: postData.created_utc || 0,\n                domain: postData.domain\n            };\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Successfully extracted Reddit metadata\", {\n                postId: metadata.postId,\n                title: metadata.title,\n                hasVideo: !!metadata.videoUrl,\n                isNsfw: metadata.isNsfw\n            });\n            return metadata;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to fetch Reddit metadata\", {\n                url,\n                error\n            });\n            throw error;\n        }\n    }\n    /**\n   * Extract video information from Reddit post data\n   */ extractVideoInfo(postData) {\n        let videoUrl;\n        let thumbnailUrl;\n        // Check Reddit Video (v.redd.it)\n        if (postData.is_video && postData.media?.reddit_video) {\n            videoUrl = postData.media.reddit_video.hls_url || postData.media.reddit_video.fallback_url;\n            thumbnailUrl = postData.preview?.images?.[0]?.source?.url;\n        } else if (postData.domain) {\n            if (postData.domain.includes(\"redgifs.com\")) {\n                // RedGifs content embedded in Reddit\n                videoUrl = postData.url;\n                thumbnailUrl = postData.thumbnail !== \"default\" ? postData.thumbnail : undefined;\n            } else if (postData.domain.includes(\"gfycat.com\")) {\n                // Gfycat content\n                videoUrl = postData.url;\n                thumbnailUrl = postData.thumbnail !== \"default\" ? postData.thumbnail : undefined;\n            } else if (postData.domain.includes(\"imgur.com\")) {\n                // Imgur content\n                if (postData.url.includes(\".gif\") || postData.url.includes(\".mp4\")) {\n                    videoUrl = postData.url;\n                }\n            } else if (postData.domain.includes(\"streamable.com\")) {\n                // Streamable content\n                videoUrl = postData.url;\n            }\n        }\n        // Fallback: check if URL itself is a video\n        if (!videoUrl && postData.url) {\n            const url = postData.url.toLowerCase();\n            if (url.includes(\".mp4\") || url.includes(\".webm\") || url.includes(\".gif\")) {\n                videoUrl = postData.url;\n            }\n        }\n        // Clean up thumbnail URL if it exists\n        if (thumbnailUrl && thumbnailUrl.includes(\"&amp;\")) {\n            thumbnailUrl = thumbnailUrl.replace(/&amp;/g, \"&\");\n        }\n        return {\n            videoUrl,\n            thumbnailUrl\n        };\n    }\n    /**\n   * Convert Reddit URL to embed format\n   */ getEmbedUrl(url) {\n        try {\n            const { subreddit, postId } = this.extractPostInfo(url);\n            // Reddit doesn't have a direct embed format like YouTube\n            // We'll use the Reddit URL directly or create an iframe-friendly version\n            return `${this.BASE_URL}/r/${subreddit}/comments/${postId}/embed/`;\n        } catch (error) {\n            // Fallback to original URL\n            return url;\n        }\n    }\n    /**\n   * Process Reddit URL for video upload\n   */ async processRedditUrl(url) {\n        try {\n            const metadata = await this.getPostMetadata(url);\n            // Determine embed URL based on content type\n            let embedUrl;\n            if (metadata.videoUrl && metadata.domain === \"redgifs.com\") {\n                // Handle RedGifs content embedded in Reddit posts\n                const redgifsMatch = metadata.videoUrl.match(/redgifs\\.com\\/watch\\/([a-zA-Z0-9]+)/);\n                if (redgifsMatch) {\n                    const gifId = redgifsMatch[1];\n                    // Try direct MP4 first, fallback to iframe\n                    const directUrl = `https://media.redgifs.com/${this.capitalizeGifId(gifId)}.mp4`;\n                    try {\n                        const testResponse = await fetch(directUrl, {\n                            method: \"HEAD\"\n                        });\n                        embedUrl = testResponse.ok ? directUrl : `https://www.redgifs.com/ifr/${gifId}?poster=0`;\n                    } catch  {\n                        embedUrl = `https://www.redgifs.com/ifr/${gifId}?poster=0`;\n                    }\n                } else {\n                    embedUrl = metadata.videoUrl;\n                }\n            } else if (metadata.videoUrl) {\n                // Use the direct video URL if available\n                embedUrl = metadata.videoUrl;\n            } else {\n                // Fallback to Reddit embed (won't work well for video)\n                embedUrl = this.getEmbedUrl(url);\n            }\n            // Generate relevant tags\n            const tags = [\n                \"reddit\",\n                `r/${metadata.subreddit}`,\n                ...metadata.isNsfw ? [\n                    \"nsfw\"\n                ] : [\n                    \"sfw\"\n                ],\n                ...metadata.domain ? [\n                    metadata.domain\n                ] : []\n            ];\n            return {\n                embedUrl,\n                thumbnail: metadata.thumbnailUrl,\n                metadata,\n                tags: tags // Removed tag limit\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to process Reddit URL\", {\n                url,\n                error\n            });\n            throw error;\n        }\n    }\n    /**\n   * Get subreddit information\n   */ async getSubredditInfo(subredditName) {\n        try {\n            const response = await fetch(`${this.BASE_URL}/r/${subredditName}/about.json`, {\n                headers: {\n                    \"User-Agent\": \"RateMy Video Platform/1.0 (Educational Content Aggregator)\",\n                    \"Accept\": \"application/json\"\n                }\n            });\n            if (!response.ok) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.APIError(`Failed to fetch subreddit info: ${response.status}`);\n            }\n            const data = await response.json();\n            const subredditData = data.data;\n            return {\n                name: subredditData.display_name,\n                title: subredditData.title,\n                description: subredditData.public_description || subredditData.description,\n                isNsfw: subredditData.over18 || false,\n                subscribers: subredditData.subscribers || 0\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to fetch subreddit info\", {\n                subredditName,\n                error\n            });\n            throw error;\n        }\n    }\n    constructor(){\n        this.BASE_URL = \"https://www.reddit.com\";\n    }\n}\nconst redditService = new RedditService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/services/reddit.service.ts\n");

/***/ }),

/***/ "(api)/./src/services/redgifs.service.ts":
/*!*****************************************!*\
  !*** ./src/services/redgifs.service.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   redGifsService: () => (/* binding */ redGifsService)\n/* harmony export */ });\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/logger */ \"(api)/./src/lib/logger.ts\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/errors */ \"(api)/./src/lib/errors.ts\");\n\n\nclass RedGifsService {\n    /**\n   * Get temporary token for API access\n   */ async getToken() {\n        // Check if current token is still valid\n        if (this.token && Date.now() < this.tokenExpiry) {\n            return this.token;\n        }\n        try {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Requesting new RedGifs API token\");\n            const response = await fetch(`${this.BASE_URL}/auth/temporary`, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (!response.ok) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.APIError(`Failed to get RedGifs token: ${response.status}`);\n            }\n            const data = await response.json();\n            if (!data.token) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.APIError(\"No token returned from RedGifs API\");\n            }\n            this.token = data.token;\n            // Set expiry to 1 hour from now (tokens typically last 24h but we refresh early)\n            this.tokenExpiry = Date.now() + 60 * 60 * 1000;\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Successfully obtained RedGifs API token\");\n            return this.token;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to get RedGifs token\", {\n                error\n            });\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.APIError(\"Failed to authenticate with RedGifs API\");\n        }\n    }\n    /**\n   * Make authenticated request to RedGifs API\n   */ async makeRequest(endpoint, options = {}) {\n        const token = await this.getToken();\n        const response = await fetch(`${this.BASE_URL}${endpoint}`, {\n            ...options,\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\": \"application/json\",\n                ...options.headers\n            }\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"RedGifs API error\", {\n                endpoint,\n                status: response.status,\n                error: errorText\n            });\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.APIError(`RedGifs API error: ${response.status} - ${errorText}`);\n        }\n        return response.json();\n    }\n    /**\n   * Extract RedGifs ID from URL\n   */ extractGifId(url) {\n        const patterns = [\n            /redgifs\\.com\\/watch\\/([a-zA-Z0-9]+)/,\n            /redgifs\\.com\\/ifr\\/([a-zA-Z0-9]+)/,\n            /redgifs\\.com\\/([a-zA-Z0-9]+)$/,\n            /\\/([a-zA-Z0-9]+)$/\n        ];\n        for (const pattern of patterns){\n            const match = url.match(pattern);\n            if (match && match[1]) {\n                return match[1].toLowerCase();\n            }\n        }\n        throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"Invalid RedGifs URL format\");\n    }\n    /**\n   * Check if URL is a RedGifs URL\n   */ isRedGifsUrl(url) {\n        return url.includes(\"redgifs.com\") || url.includes(\"redgifs.com\");\n    }\n    /**\n   * Get metadata for a specific gif by ID\n   */ async getGifMetadata(gifId) {\n        try {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Fetching RedGifs metadata\", {\n                gifId\n            });\n            const response = await this.makeRequest(`/gifs/${gifId}`);\n            if (!response.gif) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"Gif not found\");\n            }\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Successfully fetched RedGifs metadata\", {\n                gifId,\n                title: response.gif.title,\n                tags: response.gif.tags?.length || 0\n            });\n            return response.gif;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to fetch RedGifs metadata\", {\n                gifId,\n                error\n            });\n            throw error;\n        }\n    }\n    /**\n   * Get metadata from RedGifs URL\n   */ async getMetadataFromUrl(url) {\n        if (!this.isRedGifsUrl(url)) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"URL is not a RedGifs URL\");\n        }\n        const gifId = this.extractGifId(url);\n        return this.getGifMetadata(gifId);\n    }\n    /**\n   * Convert RedGifs URL to embed format\n   * Returns the iframe URL that shows just the gif without the full website interface\n   */ getEmbedUrl(gifId) {\n        // Use the iframe URL that shows only the gif content\n        return `https://www.redgifs.com/ifr/${gifId}?poster=0`;\n    }\n    /**\n   * Get direct gif URL from metadata\n   */ getDirectGifUrl(metadata) {\n        // Return the HD URL if available, otherwise SD, otherwise fallback to embed\n        return metadata.urls?.hd || metadata.urls?.sd || this.getEmbedUrl(metadata.id);\n    }\n    /**\n   * Get thumbnail URL for a gif\n   */ getThumbnailUrl(gifId) {\n        return `https://thumbs4.redgifs.com/${gifId}-poster.jpg`;\n    }\n    /**\n   * Search for gifs by tags or query\n   */ async searchGifs(query, options = {}) {\n        try {\n            const { page = 1, count = 20, order = \"trending\" } = options;\n            const params = new URLSearchParams({\n                search_text: query,\n                order,\n                count: count.toString(),\n                page: page.toString()\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Searching RedGifs\", {\n                query,\n                options\n            });\n            const response = await this.makeRequest(`/gifs/search?${params}`);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"RedGifs search completed\", {\n                query,\n                results: response.gifs?.length || 0,\n                total: response.total\n            });\n            return {\n                gifs: response.gifs || [],\n                total: response.total || 0,\n                page: response.page || page\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to search RedGifs\", {\n                query,\n                options,\n                error\n            });\n            throw error;\n        }\n    }\n    /**\n   * Get trending gifs\n   */ async getTrendingGifs(count = 10) {\n        try {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Fetching trending RedGifs\", {\n                count\n            });\n            const response = await this.makeRequest(`/gifs/trending?count=${count}`);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Successfully fetched trending gifs\", {\n                count: response.gifs?.length || 0\n            });\n            return response.gifs || [];\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to fetch trending gifs\", {\n                count,\n                error\n            });\n            throw error;\n        }\n    }\n    /**\n   * Validate and process RedGifs URL for upload\n   */ async processRedGifsUrl(url) {\n        try {\n            const metadata = await this.getMetadataFromUrl(url);\n            const gifId = this.extractGifId(url);\n            // Use direct gif URL for better embedding experience\n            const embedUrl = this.getDirectGifUrl(metadata);\n            return {\n                embedUrl,\n                thumbnail: this.getThumbnailUrl(gifId),\n                metadata,\n                tags: metadata.tags || []\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to process RedGifs URL\", {\n                url,\n                error\n            });\n            throw error;\n        }\n    }\n    constructor(){\n        this.BASE_URL = \"https://api.redgifs.com/v2\";\n        this.token = null;\n        this.tokenExpiry = 0;\n    }\n}\nconst redGifsService = new RedGifsService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/services/redgifs.service.ts\n");

/***/ }),

/***/ "(api)/./src/services/video-metadata.service.ts":
/*!************************************************!*\
  !*** ./src/services/video-metadata.service.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VideoMetadataService: () => (/* binding */ VideoMetadataService),\n/* harmony export */   videoMetadataService: () => (/* binding */ videoMetadataService)\n/* harmony export */ });\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/logger */ \"(api)/./src/lib/logger.ts\");\n\nclass VideoMetadataService {\n    async extractMetadata(originalUrl) {\n        try {\n            // Check for direct video file URLs\n            if (this.isDirectVideoFile(originalUrl)) {\n                return this.extractDirectVideoMetadata(originalUrl);\n            }\n            // Try to match against supported platforms\n            for (const [platform, config] of Object.entries(this.supportedPlatforms)){\n                for (const pattern of config.patterns){\n                    const match = originalUrl.match(pattern);\n                    if (match) {\n                        const videoId = match[1];\n                        _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(`Extracting metadata for ${platform}`, {\n                            videoId,\n                            originalUrl\n                        });\n                        return await config.extract(videoId);\n                    }\n                }\n            }\n            // Try generic oEmbed extraction\n            const oEmbedResult = await this.extractOEmbedMetadata(originalUrl);\n            if (oEmbedResult) {\n                return oEmbedResult;\n            }\n            // Fallback to URL-based extraction\n            return this.extractFallbackMetadata(originalUrl);\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting video metadata\", {\n                originalUrl,\n                error\n            });\n            return this.extractFallbackMetadata(originalUrl);\n        }\n    }\n    isDirectVideoFile(url) {\n        const videoExtensions = [\n            \".mp4\",\n            \".mov\",\n            \".avi\",\n            \".mkv\",\n            \".webm\",\n            \".flv\",\n            \".wmv\",\n            \".m4v\"\n        ];\n        const urlPath = new URL(url).pathname.toLowerCase();\n        return videoExtensions.some((ext)=>urlPath.endsWith(ext));\n    }\n    extractDirectVideoMetadata(originalUrl) {\n        const url = new URL(originalUrl);\n        const filename = url.pathname.split(\"/\").pop() || \"video\";\n        const title = filename.replace(/\\.[^/.]+$/, \"\").replace(/[-_]/g, \" \");\n        return {\n            title: this.titleCase(title),\n            description: `Direct video file: ${filename}`,\n            tags: [\n                \"video\",\n                \"direct-upload\"\n            ],\n            platform: \"direct\",\n            thumbnail: undefined\n        };\n    }\n    async extractYouTubeMetadata(videoId) {\n        try {\n            // Use YouTube oEmbed API for basic metadata\n            const response = await fetch(`https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=${videoId}&format=json`);\n            if (!response.ok) {\n                throw new Error(`YouTube API error: ${response.status}`);\n            }\n            const data = await response.json();\n            // Extract tags from title and description using keywords\n            const tags = this.extractTagsFromText(`${data.title} ${data.author_name}`);\n            return {\n                title: data.title || `YouTube Video ${videoId}`,\n                description: `Video by ${data.author_name}`,\n                tags,\n                thumbnail: data.thumbnail_url\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting YouTube metadata\", {\n                videoId,\n                error\n            });\n            return {\n                title: `YouTube Video ${videoId}`,\n                description: \"\",\n                tags: [\n                    \"youtube\"\n                ],\n                thumbnail: `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`\n            };\n        }\n    }\n    async extractVimeoMetadata(videoId) {\n        try {\n            // Use Vimeo oEmbed API\n            const response = await fetch(`https://vimeo.com/api/oembed.json?url=https://vimeo.com/${videoId}`);\n            if (!response.ok) {\n                throw new Error(`Vimeo API error: ${response.status}`);\n            }\n            const data = await response.json();\n            // Extract tags from title and author\n            const tags = this.extractTagsFromText(`${data.title} ${data.author_name}`);\n            return {\n                title: data.title || `Vimeo Video ${videoId}`,\n                description: data.description || `Video by ${data.author_name}`,\n                tags,\n                thumbnail: data.thumbnail_url,\n                duration: data.duration\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting Vimeo metadata\", {\n                videoId,\n                error\n            });\n            return {\n                title: `Vimeo Video ${videoId}`,\n                description: \"\",\n                tags: [\n                    \"vimeo\"\n                ]\n            };\n        }\n    }\n    async extractTikTokMetadata(videoId) {\n        try {\n            // TikTok doesn't have a public API, so we'll use URL parsing and generic extraction\n            const url = `https://www.tiktok.com/@user/video/${videoId}`;\n            const oEmbedResult = await this.extractOEmbedMetadata(url);\n            if (oEmbedResult) {\n                return {\n                    ...oEmbedResult,\n                    platform: \"tiktok\",\n                    tags: [\n                        ...oEmbedResult.tags || [],\n                        \"tiktok\",\n                        \"short-form\"\n                    ]\n                };\n            }\n            return {\n                title: `TikTok Video ${videoId}`,\n                description: \"TikTok short-form video content\",\n                tags: [\n                    \"tiktok\",\n                    \"short-form\",\n                    \"social\"\n                ],\n                platform: \"tiktok\"\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting TikTok metadata\", {\n                videoId,\n                error\n            });\n            return {\n                title: `TikTok Video ${videoId}`,\n                description: \"TikTok short-form video content\",\n                tags: [\n                    \"tiktok\",\n                    \"short-form\"\n                ],\n                platform: \"tiktok\"\n            };\n        }\n    }\n    async extractInstagramMetadata(videoId) {\n        try {\n            // Instagram oEmbed API\n            const url = `https://www.instagram.com/p/${videoId}/`;\n            const response = await fetch(`https://graph.facebook.com/v8.0/instagram_oembed?url=${encodeURIComponent(url)}&access_token=your_token`);\n            // Since we don't have an access token, fall back to URL parsing\n            const oEmbedResult = await this.extractOEmbedMetadata(url);\n            if (oEmbedResult) {\n                return {\n                    ...oEmbedResult,\n                    platform: \"instagram\",\n                    tags: [\n                        ...oEmbedResult.tags || [],\n                        \"instagram\",\n                        \"social\"\n                    ]\n                };\n            }\n            return {\n                title: `Instagram Video ${videoId}`,\n                description: \"Instagram video content\",\n                tags: [\n                    \"instagram\",\n                    \"social\",\n                    \"video\"\n                ],\n                platform: \"instagram\"\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting Instagram metadata\", {\n                videoId,\n                error\n            });\n            return {\n                title: `Instagram Video ${videoId}`,\n                description: \"Instagram video content\",\n                tags: [\n                    \"instagram\",\n                    \"social\"\n                ],\n                platform: \"instagram\"\n            };\n        }\n    }\n    async extractTwitterMetadata(videoId) {\n        try {\n            // Twitter oEmbed API\n            const url = `https://twitter.com/user/status/${videoId}`;\n            const response = await fetch(`https://publish.twitter.com/oembed?url=${encodeURIComponent(url)}`);\n            if (response.ok) {\n                const data = await response.json();\n                const tags = this.extractTagsFromText(data.html || \"\");\n                return {\n                    title: data.title || `Twitter Video ${videoId}`,\n                    description: \"Twitter video content\",\n                    tags: [\n                        ...tags,\n                        \"twitter\",\n                        \"social\"\n                    ],\n                    platform: \"twitter\"\n                };\n            }\n            return {\n                title: `Twitter Video ${videoId}`,\n                description: \"Twitter video content\",\n                tags: [\n                    \"twitter\",\n                    \"social\",\n                    \"video\"\n                ],\n                platform: \"twitter\"\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting Twitter metadata\", {\n                videoId,\n                error\n            });\n            return {\n                title: `Twitter Video ${videoId}`,\n                description: \"Twitter video content\",\n                tags: [\n                    \"twitter\",\n                    \"social\"\n                ],\n                platform: \"twitter\"\n            };\n        }\n    }\n    async extractDailymotionMetadata(videoId) {\n        try {\n            // Dailymotion oEmbed API\n            const response = await fetch(`https://www.dailymotion.com/services/oembed?url=https://www.dailymotion.com/video/${videoId}&format=json`);\n            if (response.ok) {\n                const data = await response.json();\n                const tags = this.extractTagsFromText(`${data.title} ${data.author_name}`);\n                return {\n                    title: data.title || `Dailymotion Video ${videoId}`,\n                    description: `Video by ${data.author_name}`,\n                    tags: [\n                        ...tags,\n                        \"dailymotion\"\n                    ],\n                    thumbnail: data.thumbnail_url,\n                    platform: \"dailymotion\"\n                };\n            }\n            return {\n                title: `Dailymotion Video ${videoId}`,\n                description: \"Dailymotion video content\",\n                tags: [\n                    \"dailymotion\",\n                    \"video\"\n                ],\n                platform: \"dailymotion\"\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting Dailymotion metadata\", {\n                videoId,\n                error\n            });\n            return {\n                title: `Dailymotion Video ${videoId}`,\n                description: \"Dailymotion video content\",\n                tags: [\n                    \"dailymotion\"\n                ],\n                platform: \"dailymotion\"\n            };\n        }\n    }\n    async extractTwitchMetadata(videoId) {\n        try {\n            // Twitch doesn't have public oEmbed, so we'll use generic extraction\n            const isClip = videoId.length < 15 // Clips have shorter IDs\n            ;\n            const url = isClip ? `https://clips.twitch.tv/${videoId}` : `https://www.twitch.tv/videos/${videoId}`;\n            return {\n                title: isClip ? `Twitch Clip ${videoId}` : `Twitch Video ${videoId}`,\n                description: isClip ? \"Twitch gaming clip\" : \"Twitch gaming video\",\n                tags: [\n                    \"twitch\",\n                    \"gaming\",\n                    \"streaming\",\n                    isClip ? \"clip\" : \"vod\"\n                ],\n                platform: \"twitch\"\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting Twitch metadata\", {\n                videoId,\n                error\n            });\n            return {\n                title: `Twitch Content ${videoId}`,\n                description: \"Twitch gaming content\",\n                tags: [\n                    \"twitch\",\n                    \"gaming\"\n                ],\n                platform: \"twitch\"\n            };\n        }\n    }\n    async extractOEmbedMetadata(originalUrl) {\n        try {\n            // Try common oEmbed endpoints\n            const oEmbedEndpoints = [\n                `https://noembed.com/embed?url=${encodeURIComponent(originalUrl)}`,\n                `https://iframe.ly/api/oembed?url=${encodeURIComponent(originalUrl)}&api_key=your_key`\n            ];\n            for (const endpoint of oEmbedEndpoints){\n                try {\n                    const response = await fetch(endpoint);\n                    if (response.ok) {\n                        const data = await response.json();\n                        if (data.title) {\n                            const tags = this.extractTagsFromText(`${data.title} ${data.description || \"\"} ${data.author_name || \"\"}`);\n                            return {\n                                title: data.title,\n                                description: data.description || \"\",\n                                tags,\n                                thumbnail: data.thumbnail_url,\n                                platform: \"generic\"\n                            };\n                        }\n                    }\n                } catch (err) {\n                    continue;\n                }\n            }\n            return null;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error extracting oEmbed metadata\", {\n                originalUrl,\n                error\n            });\n            return null;\n        }\n    }\n    extractFallbackMetadata(originalUrl) {\n        // Extract domain and basic info from URL\n        try {\n            const url = new URL(originalUrl);\n            const domain = url.hostname.replace(\"www.\", \"\");\n            const pathSegments = url.pathname.split(\"/\").filter(Boolean);\n            // Generate a basic title from URL\n            const title = pathSegments.length > 0 ? this.titleCase(pathSegments[pathSegments.length - 1].replace(/[-_]/g, \" \")) : `Video from ${domain}`;\n            return {\n                title,\n                description: `Video from ${domain}`,\n                tags: [\n                    domain.split(\".\")[0]\n                ]\n            };\n        } catch (error) {\n            return {\n                title: \"Uploaded Video\",\n                description: \"\",\n                tags: [\n                    \"video\"\n                ]\n            };\n        }\n    }\n    extractTagsFromText(text) {\n        if (!text) return [];\n        const commonVideoTags = [\n            \"music\",\n            \"gaming\",\n            \"sports\",\n            \"news\",\n            \"education\",\n            \"entertainment\",\n            \"technology\",\n            \"science\",\n            \"cooking\",\n            \"travel\",\n            \"fashion\",\n            \"fitness\",\n            \"comedy\",\n            \"tutorial\",\n            \"review\",\n            \"unboxing\",\n            \"vlog\",\n            \"documentary\",\n            \"animation\",\n            \"film\",\n            \"art\",\n            \"design\",\n            \"programming\",\n            \"business\",\n            \"lifestyle\",\n            \"health\",\n            \"beauty\",\n            \"diy\",\n            \"how-to\",\n            \"tips\",\n            \"guide\"\n        ];\n        const tags = [];\n        const lowerText = text.toLowerCase();\n        // Check for common video tags in the text\n        commonVideoTags.forEach((tag)=>{\n            if (lowerText.includes(tag)) {\n                tags.push(tag);\n            }\n        });\n        // Extract hashtags if present\n        const hashtagMatches = text.match(/#\\w+/g);\n        if (hashtagMatches) {\n            hashtagMatches.forEach((hashtag)=>{\n                tags.push(hashtag.substring(1).toLowerCase());\n            });\n        }\n        // If no specific tags found, try to categorize based on keywords\n        if (tags.length === 0) {\n            if (/music|song|album|artist|band|concert/i.test(text)) tags.push(\"music\");\n            if (/game|gaming|play|xbox|playstation|nintendo/i.test(text)) tags.push(\"gaming\");\n            if (/tutorial|how.?to|guide|learn|lesson/i.test(text)) tags.push(\"tutorial\");\n            if (/review|unboxing|test|comparison/i.test(text)) tags.push(\"review\");\n            if (/funny|comedy|humor|laugh|joke/i.test(text)) tags.push(\"comedy\");\n            if (/food|cooking|recipe|kitchen|chef/i.test(text)) tags.push(\"cooking\");\n            if (/tech|technology|software|app|coding|programming/i.test(text)) tags.push(\"technology\");\n            if (/news|breaking|update|report/i.test(text)) tags.push(\"news\");\n            if (/sport|football|basketball|soccer|tennis/i.test(text)) tags.push(\"sports\");\n            if (/travel|vacation|trip|adventure|explore/i.test(text)) tags.push(\"travel\");\n        }\n        // Ensure we have at least one tag\n        if (tags.length === 0) {\n            tags.push(\"video\");\n        }\n        // Remove duplicates and limit to 5 tags\n        return Array.from(new Set(tags)).slice(0, 5);\n    }\n    titleCase(str) {\n        return str.replace(/\\w\\S*/g, (txt)=>txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n    }\n    constructor(){\n        this.supportedPlatforms = {\n            youtube: {\n                patterns: [\n                    /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/,\n                    /(?:https?:\\/\\/)?(?:www\\.)?youtube\\.com\\/embed\\/([a-zA-Z0-9_-]{11})/\n                ],\n                extract: (videoId)=>this.extractYouTubeMetadata(videoId)\n            },\n            vimeo: {\n                patterns: [\n                    /(?:https?:\\/\\/)?(?:www\\.)?vimeo\\.com\\/(\\d+)/,\n                    /(?:https?:\\/\\/)?player\\.vimeo\\.com\\/video\\/(\\d+)/\n                ],\n                extract: (videoId)=>this.extractVimeoMetadata(videoId)\n            },\n            tiktok: {\n                patterns: [\n                    /(?:https?:\\/\\/)?(?:www\\.)?tiktok\\.com\\/@[\\w.-]+\\/video\\/(\\d+)/,\n                    /(?:https?:\\/\\/)?vm\\.tiktok\\.com\\/([a-zA-Z0-9]+)/\n                ],\n                extract: (videoId)=>this.extractTikTokMetadata(videoId)\n            },\n            instagram: {\n                patterns: [\n                    /(?:https?:\\/\\/)?(?:www\\.)?instagram\\.com\\/(?:p|reel)\\/([a-zA-Z0-9_-]+)/,\n                    /(?:https?:\\/\\/)?(?:www\\.)?instagram\\.com\\/tv\\/([a-zA-Z0-9_-]+)/\n                ],\n                extract: (videoId)=>this.extractInstagramMetadata(videoId)\n            },\n            twitter: {\n                patterns: [\n                    /(?:https?:\\/\\/)?(?:www\\.)?(?:twitter\\.com|x\\.com)\\/\\w+\\/status\\/(\\d+)/\n                ],\n                extract: (videoId)=>this.extractTwitterMetadata(videoId)\n            },\n            dailymotion: {\n                patterns: [\n                    /(?:https?:\\/\\/)?(?:www\\.)?dailymotion\\.com\\/video\\/([a-zA-Z0-9]+)/\n                ],\n                extract: (videoId)=>this.extractDailymotionMetadata(videoId)\n            },\n            twitch: {\n                patterns: [\n                    /(?:https?:\\/\\/)?(?:www\\.)?twitch\\.tv\\/videos\\/(\\d+)/,\n                    /(?:https?:\\/\\/)?clips\\.twitch\\.tv\\/([a-zA-Z0-9_-]+)/\n                ],\n                extract: (videoId)=>this.extractTwitchMetadata(videoId)\n            }\n        };\n    }\n}\nconst videoMetadataService = new VideoMetadataService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/services/video-metadata.service.ts\n");

/***/ }),

/***/ "(api)/./src/services/video.service.ts":
/*!***************************************!*\
  !*** ./src/services/video.service.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VideoServiceImpl: () => (/* binding */ VideoServiceImpl),\n/* harmony export */   videoService: () => (/* binding */ videoService)\n/* harmony export */ });\n/* harmony import */ var _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../repositories/video.repository */ \"(api)/./src/repositories/video.repository.ts\");\n/* harmony import */ var _repositories_rating_repository__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../repositories/rating.repository */ \"(api)/./src/repositories/rating.repository.ts\");\n/* harmony import */ var _repositories_tag_repository__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../repositories/tag.repository */ \"(api)/./src/repositories/tag.repository.ts\");\n/* harmony import */ var _repositories_user_repository__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../repositories/user.repository */ \"(api)/./src/repositories/user.repository.ts\");\n/* harmony import */ var _video_metadata_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./video-metadata.service */ \"(api)/./src/services/video-metadata.service.ts\");\n/* harmony import */ var _nsfw_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./nsfw.service */ \"(api)/./src/services/nsfw.service.ts\");\n/* harmony import */ var _redgifs_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./redgifs.service */ \"(api)/./src/services/redgifs.service.ts\");\n/* harmony import */ var _reddit_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./reddit.service */ \"(api)/./src/services/reddit.service.ts\");\n/* harmony import */ var _xhamster_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./xhamster.service */ \"(api)/./src/services/xhamster.service.ts\");\n/* harmony import */ var _lib_validation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../lib/validation */ \"(api)/./src/lib/validation.ts\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../lib/errors */ \"(api)/./src/lib/errors.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../lib/logger */ \"(api)/./src/lib/logger.ts\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../lib/constants */ \"(api)/./src/lib/constants.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_validation__WEBPACK_IMPORTED_MODULE_9__]);\n_lib_validation__WEBPACK_IMPORTED_MODULE_9__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass VideoServiceImpl {\n    async getVideos(filters) {\n        return (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.asyncWrapper)(async ()=>{\n            const validatedFilters = filters ? (0,_lib_validation__WEBPACK_IMPORTED_MODULE_9__.validateSchema)(_lib_validation__WEBPACK_IMPORTED_MODULE_9__.videoFilterSchema, filters) : {};\n            const result = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.findWithFilters(validatedFilters);\n            return {\n                success: true,\n                data: result.videos,\n                pagination: {\n                    page: validatedFilters.page || 1,\n                    limit: validatedFilters.limit || 12,\n                    total: result.total,\n                    totalPages: result.totalPages\n                }\n            };\n        })();\n    }\n    async getVideoById(id) {\n        return (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.asyncWrapper)(async ()=>{\n            const video = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.findWithRatings(id);\n            if (!video) {\n                throw (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.createNotFoundError)(\"Video\", id);\n            }\n            return {\n                success: true,\n                data: video\n            };\n        })();\n    }\n    async createVideo(data, userId) {\n        return (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.asyncWrapper)(async ()=>{\n            // Validate input - originalUrl is required\n            const validatedData = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_9__.validateSchema)(_lib_validation__WEBPACK_IMPORTED_MODULE_9__.createVideoSchema, {\n                title: data.title || \"\",\n                originalUrl: data.originalUrl,\n                description: data.description || \"\",\n                tags: []\n            });\n            // Verify user exists\n            const user = await _repositories_user_repository__WEBPACK_IMPORTED_MODULE_3__.userRepository.findById(userId);\n            if (!user) {\n                throw (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.createNotFoundError)(\"User\", userId);\n            }\n            // Check if metadata was already provided from extract-metadata step\n            let extractedMetadata, embedUrl, finalThumbnail, previewUrl;\n            if (data.embedUrl && data.thumbnail !== undefined) {\n                // Use provided metadata from extract-metadata flow\n                extractedMetadata = {\n                    title: data.title || \"\",\n                    description: data.description || \"\",\n                    tags: [],\n                    thumbnail: data.thumbnail\n                };\n                embedUrl = data.embedUrl;\n                finalThumbnail = data.thumbnail;\n                previewUrl = data.previewUrl || null;\n            } else if (_redgifs_service__WEBPACK_IMPORTED_MODULE_6__.redGifsService.isRedGifsUrl(validatedData.originalUrl)) {\n                try {\n                    const redGifsData = await _redgifs_service__WEBPACK_IMPORTED_MODULE_6__.redGifsService.processRedGifsUrl(validatedData.originalUrl);\n                    extractedMetadata = {\n                        title: redGifsData.metadata.title,\n                        description: redGifsData.metadata.description || \"\",\n                        tags: redGifsData.tags,\n                        thumbnail: redGifsData.thumbnail\n                    };\n                    embedUrl = redGifsData.embedUrl // This will be the direct video URL\n                    ;\n                    finalThumbnail = redGifsData.thumbnail;\n                    _lib_logger__WEBPACK_IMPORTED_MODULE_11__.logger.info(\"RedGifs processing successful for video creation\", {\n                        url: validatedData.originalUrl,\n                        tagsExtracted: redGifsData.tags?.length || 0,\n                        hasTagRatings: !!data.tagRatings,\n                        tagRatingsCount: data.tagRatings?.length || 0\n                    });\n                } catch (error) {\n                    _lib_logger__WEBPACK_IMPORTED_MODULE_11__.logger.error(\"Failed to process RedGifs URL, falling back to standard processing\", {\n                        error\n                    });\n                    extractedMetadata = await _video_metadata_service__WEBPACK_IMPORTED_MODULE_4__.videoMetadataService.extractMetadata(validatedData.originalUrl);\n                    embedUrl = this.convertToEmbedUrl(validatedData.originalUrl);\n                    finalThumbnail = extractedMetadata.thumbnail || null;\n                }\n            } else if (_reddit_service__WEBPACK_IMPORTED_MODULE_7__.redditService.isRedditUrl(validatedData.originalUrl)) {\n                try {\n                    const redditData = await _reddit_service__WEBPACK_IMPORTED_MODULE_7__.redditService.processRedditUrl(validatedData.originalUrl);\n                    extractedMetadata = {\n                        title: redditData.metadata.title,\n                        description: redditData.metadata.description || \"\",\n                        tags: redditData.tags,\n                        thumbnail: redditData.thumbnail\n                    };\n                    embedUrl = redditData.embedUrl;\n                    finalThumbnail = redditData.thumbnail;\n                } catch (error) {\n                    _lib_logger__WEBPACK_IMPORTED_MODULE_11__.logger.error(\"Failed to process Reddit URL, falling back to standard processing\", {\n                        error\n                    });\n                    extractedMetadata = await _video_metadata_service__WEBPACK_IMPORTED_MODULE_4__.videoMetadataService.extractMetadata(validatedData.originalUrl);\n                    embedUrl = this.convertToEmbedUrl(validatedData.originalUrl);\n                    finalThumbnail = extractedMetadata.thumbnail || null;\n                }\n            } else if (_xhamster_service__WEBPACK_IMPORTED_MODULE_8__.xHamsterService.isXHamsterUrl(validatedData.originalUrl)) {\n                try {\n                    const xHamsterData = await _xhamster_service__WEBPACK_IMPORTED_MODULE_8__.xHamsterService.processXHamsterUrl(validatedData.originalUrl);\n                    extractedMetadata = {\n                        title: xHamsterData.title || \"\",\n                        description: xHamsterData.description || \"\",\n                        tags: xHamsterData.tags || [],\n                        thumbnail: xHamsterData.thumbnail\n                    };\n                    embedUrl = this.convertToEmbedUrl(validatedData.originalUrl);\n                    finalThumbnail = xHamsterData.thumbnail || null;\n                    previewUrl = xHamsterData.previewUrl || null;\n                } catch (error) {\n                    _lib_logger__WEBPACK_IMPORTED_MODULE_11__.logger.error(\"Failed to process XHamster URL, falling back to standard processing\", {\n                        error\n                    });\n                    extractedMetadata = await _video_metadata_service__WEBPACK_IMPORTED_MODULE_4__.videoMetadataService.extractMetadata(validatedData.originalUrl);\n                    embedUrl = this.convertToEmbedUrl(validatedData.originalUrl);\n                    finalThumbnail = extractedMetadata.thumbnail || null;\n                }\n            } else {\n                // Extract metadata automatically from video URL\n                extractedMetadata = await _video_metadata_service__WEBPACK_IMPORTED_MODULE_4__.videoMetadataService.extractMetadata(validatedData.originalUrl);\n                // Convert original URL to embed URL\n                embedUrl = this.convertToEmbedUrl(validatedData.originalUrl);\n                finalThumbnail = extractedMetadata.thumbnail || null;\n            }\n            // Use extracted data or fallback to provided data\n            let finalTitle = data.title?.trim() || extractedMetadata.title;\n            // If still no title, generate one from the URL\n            if (!finalTitle) {\n                if (validatedData.originalUrl.includes(\"redgifs.com\")) {\n                    const match = validatedData.originalUrl.match(/\\/watch\\/([a-zA-Z0-9]+)/);\n                    const gifId = match ? match[1] : \"video\";\n                    finalTitle = `RedGifs ${gifId}`;\n                } else {\n                    finalTitle = \"Untitled Video\";\n                }\n            }\n            const finalDescription = data.description?.trim() || extractedMetadata.description || null;\n            // Combine provided tags with extracted tags and rated tags\n            const providedTags = data.tags ? this.extractTagsFromVideo(data) : [];\n            const extractedTags = Array.isArray(extractedMetadata.tags) ? extractedMetadata.tags : [];\n            const ratedTags = data.tagRatings ? data.tagRatings.map((tr)=>tr.name) : [] // Include all rated tags, even rating 0\n            ;\n            const combinedTags = Array.from(new Set([\n                ...providedTags,\n                ...extractedTags,\n                ...ratedTags\n            ]));\n            const sanitizedTags = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_9__.sanitizeTags)(combinedTags);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_11__.logger.info(\"Processing tags for video creation\", {\n                providedTags: providedTags.length,\n                extractedTags: extractedTags.length,\n                ratedTags: ratedTags.length,\n                combinedTags: combinedTags.length,\n                sanitizedTags: sanitizedTags.length,\n                finalTags: sanitizedTags\n            });\n            // Detect NSFW content automatically or use provided value\n            let isNSFW;\n            if (data.isNsfw !== undefined) {\n                // Use provided NSFW status from extract-metadata flow\n                isNSFW = data.isNsfw;\n            } else {\n                // Fallback to automatic detection\n                const isRedGifs = _redgifs_service__WEBPACK_IMPORTED_MODULE_6__.redGifsService.isRedGifsUrl(validatedData.originalUrl);\n                const isReddit = _reddit_service__WEBPACK_IMPORTED_MODULE_7__.redditService.isRedditUrl(validatedData.originalUrl);\n                const isXHamster = _xhamster_service__WEBPACK_IMPORTED_MODULE_8__.xHamsterService.isXHamsterUrl(validatedData.originalUrl);\n                if (isRedGifs || isXHamster) {\n                    isNSFW = true // RedGifs and XHamster are automatically NSFW\n                    ;\n                } else if (isReddit && Array.isArray(extractedMetadata.tags) && extractedMetadata.tags.includes(\"nsfw\")) {\n                    isNSFW = true // Reddit marked as NSFW\n                    ;\n                } else {\n                    isNSFW = await _nsfw_service__WEBPACK_IMPORTED_MODULE_5__.nsfwService.detectNSFW(finalTitle, finalDescription || undefined);\n                }\n            }\n            // Create video with tags\n            let video;\n            try {\n                video = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.createWithTags({\n                    title: finalTitle,\n                    originalUrl: validatedData.originalUrl,\n                    embedUrl,\n                    thumbnail: finalThumbnail || null,\n                    previewUrl: previewUrl || null,\n                    description: finalDescription,\n                    isNsfw: isNSFW,\n                    userId\n                }, sanitizedTags);\n                _lib_logger__WEBPACK_IMPORTED_MODULE_11__.logger.info(\"Video created successfully\", {\n                    videoId: video.id,\n                    title: finalTitle,\n                    tagsCount: sanitizedTags.length\n                });\n                // Handle tag ratings if provided\n                if (data.tagRatings && data.tagRatings.length > 0) {\n                    try {\n                        let ratingsCreated = 0;\n                        _lib_logger__WEBPACK_IMPORTED_MODULE_11__.logger.info(\"Creating tag ratings for video\", {\n                            videoId: video.id,\n                            totalTagRatings: data.tagRatings.length\n                        });\n                        for (const tagRating of data.tagRatings){\n                            if (tagRating.rating >= 0) {\n                                // Sanitize tag name to ensure consistency with video tags\n                                const sanitizedTagName = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_9__.sanitizeTags)([\n                                    tagRating.name\n                                ])[0];\n                                if (!sanitizedTagName) continue;\n                                // Find or create the tag (ensure it exists)\n                                const tag = await _repositories_tag_repository__WEBPACK_IMPORTED_MODULE_2__.tagRepository.findOrCreate(sanitizedTagName);\n                                // Check if this tag is actually associated with the video\n                                const videoHasTag = sanitizedTags.includes(sanitizedTagName);\n                                if (videoHasTag) {\n                                    // Create a rating for this tag using the upsert method\n                                    await _repositories_rating_repository__WEBPACK_IMPORTED_MODULE_1__.ratingRepository.upsertRating(video.id, userId, tag.id, tagRating.rating);\n                                    ratingsCreated++;\n                                } else {\n                                    _lib_logger__WEBPACK_IMPORTED_MODULE_11__.logger.warn(\"Skipping rating for tag not associated with video\", {\n                                        originalTagName: tagRating.name,\n                                        sanitizedTagName,\n                                        videoId: video.id\n                                    });\n                                }\n                            }\n                        }\n                        _lib_logger__WEBPACK_IMPORTED_MODULE_11__.logger.info(\"Tag ratings creation completed\", {\n                            videoId: video.id,\n                            ratingsCreated,\n                            totalProcessed: data.tagRatings.length\n                        });\n                    } catch (ratingError) {\n                        _lib_logger__WEBPACK_IMPORTED_MODULE_11__.logger.error(\"Failed to create tag ratings\", {\n                            error: ratingError,\n                            videoId: video.id,\n                            tagRatings: data.tagRatings\n                        });\n                    // Don't throw here - video was created successfully, ratings are optional\n                    }\n                }\n            } catch (createError) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_11__.logger.error(\"Failed to create video in database\", {\n                    error: createError,\n                    videoData: {\n                        title: finalTitle,\n                        originalUrl: validatedData.originalUrl,\n                        embedUrl,\n                        thumbnail: finalThumbnail,\n                        description: finalDescription,\n                        isNsfw: isNSFW,\n                        userId\n                    },\n                    tags: sanitizedTags\n                });\n                throw createError;\n            }\n            (0,_lib_logger__WEBPACK_IMPORTED_MODULE_11__.logUserAction)(\"video_created\", userId, {\n                videoId: video.id,\n                title: video.title,\n                autoExtracted: !data.title || !data.description\n            });\n            // Refetch the video with all ratings to ensure fresh data\n            const videoWithRatings = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.findWithRatings(video.id);\n            return {\n                success: true,\n                data: videoWithRatings || video\n            };\n        })();\n    }\n    async updateVideo(id, data, userId) {\n        return (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.asyncWrapper)(async ()=>{\n            // Find existing video\n            const existingVideo = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.findById(id);\n            if (!existingVideo) {\n                throw (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.createNotFoundError)(\"Video\", id);\n            }\n            // Check ownership\n            if (existingVideo.userId !== userId) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_10__.AuthorizationError(\"You can only update your own videos\");\n            }\n            // Validate input\n            const validatedData = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_9__.validateSchema)(_lib_validation__WEBPACK_IMPORTED_MODULE_9__.updateVideoSchema, data);\n            // Update embed URL if original URL changed\n            const updateData = {\n                ...validatedData\n            };\n            if (validatedData.originalUrl) {\n                updateData.embedUrl = this.convertToEmbedUrl(validatedData.originalUrl);\n            }\n            // Update video\n            const updatedVideo = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.update(id, updateData);\n            (0,_lib_logger__WEBPACK_IMPORTED_MODULE_11__.logUserAction)(\"video_updated\", userId, {\n                videoId: id\n            });\n            return {\n                success: true,\n                data: updatedVideo\n            };\n        })();\n    }\n    async deleteVideo(id, userId) {\n        return (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.asyncWrapper)(async ()=>{\n            // Find existing video\n            const existingVideo = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.findById(id);\n            if (!existingVideo) {\n                throw (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.createNotFoundError)(\"Video\", id);\n            }\n            // Get user to check if they're admin\n            const user = await _repositories_user_repository__WEBPACK_IMPORTED_MODULE_3__.userRepository.findById(userId);\n            if (!user) {\n                throw (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.createNotFoundError)(\"User\", userId);\n            }\n            // Check ownership or admin status\n            const isOwner = existingVideo.userId === userId;\n            const isAdmin = user.isAdmin === true;\n            if (!isOwner && !isAdmin) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_10__.AuthorizationError(\"You can only delete your own videos or must be an admin\");\n            }\n            // Delete video (cascade will handle related records)\n            await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.delete(id);\n            (0,_lib_logger__WEBPACK_IMPORTED_MODULE_11__.logUserAction)(\"video_deleted\", userId, {\n                videoId: id,\n                title: existingVideo.title,\n                isAdminDelete: !isOwner\n            });\n            return {\n                success: true\n            };\n        })();\n    }\n    async rateVideo(videoId, tagId, level, userId) {\n        return (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.asyncWrapper)(async ()=>{\n            // Validate input\n            const validatedData = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_9__.validateSchema)(_lib_validation__WEBPACK_IMPORTED_MODULE_9__.ratingSchema, {\n                tagId,\n                level\n            });\n            // Check if video exists\n            const video = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.findById(videoId);\n            if (!video) {\n                throw (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.createNotFoundError)(\"Video\", videoId);\n            }\n            // Check if user exists\n            const user = await _repositories_user_repository__WEBPACK_IMPORTED_MODULE_3__.userRepository.findById(userId);\n            if (!user) {\n                throw (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.createNotFoundError)(\"User\", userId);\n            }\n            // Check if tag exists\n            const tag = await _repositories_tag_repository__WEBPACK_IMPORTED_MODULE_2__.tagRepository.findById(validatedData.tagId);\n            if (!tag) {\n                throw (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.createNotFoundError)(\"Tag\", validatedData.tagId);\n            }\n            // Upsert rating\n            const rating = await _repositories_rating_repository__WEBPACK_IMPORTED_MODULE_1__.ratingRepository.upsertRating(videoId, userId, validatedData.tagId, validatedData.level);\n            (0,_lib_logger__WEBPACK_IMPORTED_MODULE_11__.logUserAction)(\"video_rated\", userId, {\n                videoId,\n                tagId: validatedData.tagId,\n                level: validatedData.level\n            });\n            return {\n                success: true,\n                data: rating\n            };\n        })();\n    }\n    async getVideosByUser(userId) {\n        return (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.asyncWrapper)(async ()=>{\n            // Check if user exists\n            const user = await _repositories_user_repository__WEBPACK_IMPORTED_MODULE_3__.userRepository.findById(userId);\n            if (!user) {\n                throw (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.createNotFoundError)(\"User\", userId);\n            }\n            const videos = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.findByUserId(userId);\n            return {\n                success: true,\n                data: videos\n            };\n        })();\n    }\n    async searchVideos(query) {\n        return (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.asyncWrapper)(async ()=>{\n            if (!query || query.trim().length === 0) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_10__.ValidationError(\"Search query is required\", \"query\");\n            }\n            const videos = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.search(query.trim());\n            return {\n                success: true,\n                data: videos\n            };\n        })();\n    }\n    async getVideosByTags(tags) {\n        return (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.asyncWrapper)(async ()=>{\n            if (!tags || tags.length === 0) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_10__.ValidationError(\"At least one tag is required\", \"tags\");\n            }\n            const sanitizedTags = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_9__.sanitizeTags)(tags);\n            const videos = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.findByTags(sanitizedTags);\n            return {\n                success: true,\n                data: videos\n            };\n        })();\n    }\n    async getTrendingVideos(limit = 10) {\n        return (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.asyncWrapper)(async ()=>{\n            const videos = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.getTrendingVideos(limit);\n            return {\n                success: true,\n                data: videos\n            };\n        })();\n    }\n    async getVideoStats(videoId) {\n        return (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.asyncWrapper)(async ()=>{\n            const video = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.findById(videoId);\n            if (!video) {\n                throw (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.createNotFoundError)(\"Video\", videoId);\n            }\n            const stats = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.getVideoStats(videoId);\n            return {\n                success: true,\n                data: stats\n            };\n        })();\n    }\n    convertToEmbedUrl(originalUrl) {\n        // YouTube URLs\n        const youtubeMatch = originalUrl.match(_lib_constants__WEBPACK_IMPORTED_MODULE_12__.VALIDATION_PATTERNS.YOUTUBE_URL);\n        if (youtubeMatch) {\n            return `https://www.youtube.com/embed/${youtubeMatch[1]}`;\n        }\n        // Vimeo URLs\n        const vimeoMatch = originalUrl.match(_lib_constants__WEBPACK_IMPORTED_MODULE_12__.VALIDATION_PATTERNS.VIMEO_URL);\n        if (vimeoMatch) {\n            return `https://player.vimeo.com/video/${vimeoMatch[1]}`;\n        }\n        // RedGifs URLs - fallback if not processed by RedGifs service\n        const redgifsRegex = /(?:https?:\\/\\/)?(?:www\\.)?redgifs\\.com\\/(?:watch\\/|ifr\\/)([a-zA-Z0-9]+)/i;\n        const redgifsMatch = originalUrl.match(redgifsRegex);\n        if (redgifsMatch) {\n            return `https://www.redgifs.com/ifr/${redgifsMatch[1]}`;\n        }\n        // TikTok URLs\n        const tiktokRegex = /(?:https?:\\/\\/)?(?:www\\.)?tiktok\\.com\\/@[\\w.-]+\\/video\\/(\\d+)/;\n        const tiktokMatch = originalUrl.match(tiktokRegex);\n        if (tiktokMatch) {\n            return `https://www.tiktok.com/embed/v2/${tiktokMatch[1]}`;\n        }\n        // Instagram URLs\n        const instagramRegex = /(?:https?:\\/\\/)?(?:www\\.)?instagram\\.com\\/(?:p|reel)\\/([a-zA-Z0-9_-]+)/;\n        const instagramMatch = originalUrl.match(instagramRegex);\n        if (instagramMatch) {\n            return `https://www.instagram.com/p/${instagramMatch[1]}/embed/`;\n        }\n        // Twitter/X URLs\n        const twitterRegex = /(?:https?:\\/\\/)?(?:www\\.)?(?:twitter\\.com|x\\.com)\\/\\w+\\/status\\/(\\d+)/;\n        const twitterMatch = originalUrl.match(twitterRegex);\n        if (twitterMatch) {\n            return `https://platform.twitter.com/embed/Tweet.html?id=${twitterMatch[1]}`;\n        }\n        // Dailymotion URLs\n        const dailymotionRegex = /(?:https?:\\/\\/)?(?:www\\.)?dailymotion\\.com\\/video\\/([a-zA-Z0-9]+)/;\n        const dailymotionMatch = originalUrl.match(dailymotionRegex);\n        if (dailymotionMatch) {\n            return `https://www.dailymotion.com/embed/video/${dailymotionMatch[1]}`;\n        }\n        // Reddit URLs\n        const redditRegex = /(?:https?:\\/\\/)?(?:www\\.|old\\.|m\\.|np\\.)?reddit\\.com\\/r\\/(\\w+)\\/comments\\/([a-zA-Z0-9]+)(?:\\/([^/]+))?/i;\n        const redditMatch = originalUrl.match(redditRegex);\n        if (redditMatch) {\n            return `https://www.reddit.com/r/${redditMatch[1]}/comments/${redditMatch[2]}/`;\n        }\n        // Twitch URLs\n        const twitchVideoRegex = /(?:https?:\\/\\/)?(?:www\\.)?twitch\\.tv\\/videos\\/(\\d+)/;\n        const twitchVideoMatch = originalUrl.match(twitchVideoRegex);\n        if (twitchVideoMatch) {\n            return `https://player.twitch.tv/?video=${twitchVideoMatch[1]}&parent=${ false ? 0 : \"localhost\"}`;\n        }\n        const twitchClipRegex = /(?:https?:\\/\\/)?clips\\.twitch\\.tv\\/([a-zA-Z0-9_-]+)/;\n        const twitchClipMatch = originalUrl.match(twitchClipRegex);\n        if (twitchClipMatch) {\n            return `https://clips.twitch.tv/embed?clip=${twitchClipMatch[1]}&parent=${ false ? 0 : \"localhost\"}`;\n        }\n        // Direct video files\n        const videoExtensions = [\n            \".mp4\",\n            \".mov\",\n            \".avi\",\n            \".mkv\",\n            \".webm\",\n            \".flv\",\n            \".wmv\",\n            \".m4v\"\n        ];\n        const urlPath = new URL(originalUrl).pathname.toLowerCase();\n        if (videoExtensions.some((ext)=>urlPath.endsWith(ext))) {\n            return originalUrl // Return original URL for direct video files\n            ;\n        }\n        // If it's already an embed URL or unsupported, return as is\n        return originalUrl;\n    }\n    async addTagToVideo(videoId, tagId) {\n        return (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.asyncWrapper)(async ()=>{\n            // Check if video exists\n            const video = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.findById(videoId);\n            if (!video) {\n                throw (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.createNotFoundError)(\"Video\", videoId);\n            }\n            // Check if tag exists\n            const tag = await _repositories_tag_repository__WEBPACK_IMPORTED_MODULE_2__.tagRepository.findById(tagId);\n            if (!tag) {\n                throw (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.createNotFoundError)(\"Tag\", tagId);\n            }\n            // Add tag to video (repository should handle duplicates)\n            await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.addTagToVideo(videoId, tagId);\n            return {\n                success: true\n            };\n        })();\n    }\n    async removeTagFromVideo(videoId, tagId) {\n        return (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.asyncWrapper)(async ()=>{\n            // Check if video exists\n            const video = await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.findById(videoId);\n            if (!video) {\n                throw (0,_lib_errors__WEBPACK_IMPORTED_MODULE_10__.createNotFoundError)(\"Video\", videoId);\n            }\n            // Remove tag from video\n            await _repositories_video_repository__WEBPACK_IMPORTED_MODULE_0__.videoRepository.removeTagFromVideo(videoId, tagId);\n            return {\n                success: true\n            };\n        })();\n    }\n    extractTagsFromVideo(data) {\n        if (data.tags && Array.isArray(data.tags)) {\n            return data.tags;\n        }\n        if (typeof data.tags === \"string\") {\n            return data.tags.split(\",\").map((tag)=>tag.trim()).filter(Boolean);\n        }\n        return [];\n    }\n}\n// Export singleton instance\nconst videoService = new VideoServiceImpl();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/services/video.service.ts\n");

/***/ }),

/***/ "(api)/./src/services/xhamster.service.ts":
/*!******************************************!*\
  !*** ./src/services/xhamster.service.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XHamsterServiceImpl: () => (/* binding */ XHamsterServiceImpl),\n/* harmony export */   xHamsterService: () => (/* binding */ xHamsterService)\n/* harmony export */ });\n/* harmony import */ var _src_lib_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/src/lib/logger */ \"(api)/./src/lib/logger.ts\");\n\nclass XHamsterServiceImpl {\n    isXHamsterUrl(url) {\n        return url.includes(\"xhamster.com\");\n    }\n    isValidContentTag(tag) {\n        if (!tag || tag.length < 2 || tag.length > 30) return false;\n        // Technical/platform terms to exclude\n        const blacklist = [\n            // Site/platform names\n            \"xhamster\",\n            \"pornhub\",\n            \"redtube\",\n            \"tube\",\n            \"xvideos\",\n            \"youjizz\",\n            \"spankbang\",\n            \"chaturbate\",\n            \"cam4\",\n            \"bongacams\",\n            \"stripchat\",\n            \"livejasmin\",\n            \"flirt4free\",\n            \"camsoda\",\n            \"onlyfans\",\n            \"manyvids\",\n            \"clips4sale\",\n            \"iwantclips\",\n            \"niteflirt\",\n            // Technical metadata\n            \"video\",\n            \"watch\",\n            \"page\",\n            \"link\",\n            \"site\",\n            \"url\",\n            \"slug\",\n            \"uid\",\n            \"id\",\n            \"name\",\n            \"tags\",\n            \"isbrand\",\n            \"ischannel\",\n            \"isverified\",\n            \"nameen\",\n            \"channel\",\n            \"channels\",\n            \"model\",\n            \"models\",\n            \"category\",\n            \"categories\",\n            \"premium\",\n            \"vip\",\n            \"verified\",\n            \"official\",\n            // Quality/format terms\n            \"hd\",\n            \"4k\",\n            \"720p\",\n            \"1080p\",\n            \"uhd\",\n            \"fhd\",\n            \"mp4\",\n            \"avi\",\n            \"wmv\",\n            \"flv\",\n            \"mov\",\n            \"webm\",\n            \"duration\",\n            \"length\",\n            \"size\",\n            \"quality\",\n            \"format\",\n            \"resolution\",\n            // Social/interaction terms\n            \"views\",\n            \"likes\",\n            \"dislikes\",\n            \"comments\",\n            \"share\",\n            \"subscribe\",\n            \"follow\",\n            \"favorite\",\n            \"bookmark\",\n            \"playlist\",\n            \"collection\",\n            \"gallery\",\n            // Technical UI/web terms\n            \"embed\",\n            \"iframe\",\n            \"player\",\n            \"thumb\",\n            \"thumbnail\",\n            \"preview\",\n            \"poster\",\n            \"image\",\n            \"img\",\n            \"pic\",\n            \"photo\",\n            \"jpg\",\n            \"jpeg\",\n            \"png\",\n            \"gif\",\n            \"webp\",\n            \"svg\",\n            \"icon\",\n            \"logo\",\n            \"banner\",\n            \"button\",\n            \"click\",\n            \"href\",\n            \"redirect\",\n            // Advertising/tracking\n            \"ad\",\n            \"ads\",\n            \"advertisement\",\n            \"promo\",\n            \"promotion\",\n            \"sponsored\",\n            \"affiliate\",\n            \"referrer\",\n            \"utm\",\n            \"tracking\",\n            \"analytics\",\n            \"pixel\",\n            // Admin/system terms\n            \"admin\",\n            \"administrator\",\n            \"moderator\",\n            \"mod\",\n            \"user\",\n            \"guest\",\n            \"member\",\n            \"subscriber\",\n            \"account\",\n            \"profile\",\n            \"settings\",\n            \"preferences\",\n            \"dashboard\",\n            \"panel\",\n            \"control\",\n            \"manage\",\n            \"edit\",\n            \"delete\",\n            \"create\",\n            \"update\",\n            // General web/tech terms\n            \"website\",\n            \"homepage\",\n            \"contact\",\n            \"about\",\n            \"help\",\n            \"faq\",\n            \"terms\",\n            \"privacy\",\n            \"policy\",\n            \"legal\",\n            \"dmca\",\n            \"copyright\",\n            \"trademark\",\n            \"disclaimer\",\n            \"search\",\n            \"filter\",\n            \"sort\",\n            \"browse\",\n            \"explore\",\n            \"discover\",\n            \"trending\",\n            \"popular\",\n            \"featured\",\n            \"recommended\",\n            \"related\",\n            \"similar\",\n            \"more\",\n            \"all\",\n            \"new\",\n            \"latest\",\n            \"recent\",\n            \"today\",\n            \"week\",\n            \"month\",\n            \"year\",\n            \"date\",\n            \"time\",\n            // Meaningless terms\n            \"content\",\n            \"stuff\",\n            \"things\",\n            \"item\",\n            \"object\",\n            \"element\",\n            \"component\",\n            \"section\",\n            \"part\",\n            \"piece\",\n            \"bit\",\n            \"data\",\n            \"info\",\n            \"information\",\n            \"details\",\n            \"description\",\n            \"title\",\n            \"text\",\n            \"caption\",\n            \"label\"\n        ];\n        const lowerTag = tag.toLowerCase();\n        // Check against blacklist\n        if (blacklist.includes(lowerTag)) return false;\n        // Skip if contains URLs or technical patterns\n        if (lowerTag.includes(\"http\") || lowerTag.includes(\"www\") || lowerTag.includes(\".com\")) return false;\n        // Skip pure numbers\n        if (/^\\d+$/.test(lowerTag)) return false;\n        // Skip hex strings (likely IDs)\n        if (/^[a-f0-9]{8,}$/i.test(lowerTag)) return false;\n        // Skip technical values\n        if (/^(true|false|null|undefined|nan|infinity)$/i.test(lowerTag)) return false;\n        return true;\n    }\n    normalizeTag(tag) {\n        if (!tag) return \"\";\n        // Convert to lowercase and trim\n        let normalized = tag.toLowerCase().trim();\n        // Remove special characters except hyphens\n        normalized = normalized.replace(/[^\\w\\s-]/g, \"\");\n        // Replace spaces and underscores with hyphens\n        normalized = normalized.replace(/[\\s_]+/g, \"-\");\n        // Remove multiple consecutive hyphens\n        normalized = normalized.replace(/-+/g, \"-\");\n        // Remove leading/trailing hyphens\n        normalized = normalized.replace(/^-+|-+$/g, \"\");\n        // Tag mappings for common variations including French translations\n        const tagMappings = {\n            // English variations\n            \"big-boobs\": \"big-tits\",\n            \"big-breasts\": \"big-tits\",\n            \"small-boobs\": \"small-tits\",\n            \"small-breasts\": \"small-tits\",\n            \"big-butt\": \"big-ass\",\n            \"bubble-butt\": \"big-ass\",\n            \"small-butt\": \"small-ass\",\n            \"black\": \"ebony\",\n            \"african\": \"ebony\",\n            \"bj\": \"blowjob\",\n            \"blow-job\": \"blowjob\",\n            \"hj\": \"handjob\",\n            \"hand-job\": \"handjob\",\n            \"fj\": \"footjob\",\n            \"foot-job\": \"footjob\",\n            \"pov\": \"pov\",\n            \"point-of-view\": \"pov\",\n            \"girl-on-girl\": \"lesbian\",\n            \"girl-girl\": \"lesbian\",\n            \"gg\": \"lesbian\",\n            \"boy-boy\": \"gay\",\n            \"mm\": \"gay\",\n            \"girl-boy\": \"straight\",\n            \"gf\": \"girlfriend\",\n            \"bf\": \"boyfriend\",\n            \"hubby\": \"husband\",\n            \"wifey\": \"wife\",\n            \"teen18\": \"teen\",\n            \"teen-18\": \"teen\",\n            \"eighteen\": \"teen\",\n            \"18yo\": \"teen\",\n            \"18-year-old\": \"teen\",\n            \"18-ans\": \"teen\",\n            \"milfs\": \"milf\",\n            \"moms\": \"milf\",\n            \"mothers\": \"milf\",\n            \"cougars\": \"milf\",\n            \"grannies\": \"granny\",\n            \"grandmas\": \"granny\",\n            \"gilf\": \"granny\",\n            // French to English mappings\n            \"bombasse\": \"babe\",\n            \"jeune\": \"teen\",\n            \"pipe\": \"blowjob\",\n            \"blonde\": \"blonde\",\n            \"petits-seins\": \"small-tits\",\n            \"grosse-bite\": \"big-cock\",\n            \"big-cock\": \"big-cock\",\n            \"massive-cock\": \"big-cock\",\n            \"enormous\": \"big-cock\",\n            \"irrumation\": \"face-fuck\",\n            \"face-fuck\": \"deepthroat\",\n            \"sexe-brutal\": \"rough-sex\",\n            \"rough-sex\": \"rough-sex\",\n            \"videos-hd\": \"hd\",\n            \"vid\\xe9os-hd\": \"hd\",\n            \"amateur\": \"amateur\",\n            \"excitee\": \"horny\",\n            \"excit\\xe9e\": \"horny\",\n            \"horny\": \"horny\",\n            \"adolescents\": \"teen\",\n            \"doigtage-de-chatte\": \"fingering\",\n            \"fingering-pussy\": \"fingering\",\n            \"doigtee\": \"fingered\",\n            \"fingered\": \"fingering\",\n            \"beautes\": \"babe\",\n            \"beaut\\xe9s\": \"babe\",\n            \"gemissements-bruyants\": \"moaning\",\n            \"loud-moaning\": \"moaning\",\n            \"petite-chatte\": \"small-pussy\",\n            \"little-pussy\": \"small-pussy\",\n            \"jouet\": \"toys\",\n            \"toy\": \"toys\",\n            \"seins-naturels\": \"natural-tits\",\n            \"natural-boobs\": \"natural-tits\",\n            \"natural-tits\": \"natural-tits\",\n            \"utilise-moi\": \"freeuse\",\n            \"use-me\": \"freeuse\",\n            \"utilisation-gratuite\": \"freeuse\",\n            \"ascenseur\": \"elevator\",\n            \"bande-annonce\": \"trailer\",\n            \"etourdissant\": \"stunning\",\n            \"stunner\": \"stunning\",\n            \"arracher\": \"rough\",\n            \"snatch\": \"rough\",\n            \"banging\": \"hardcore\",\n            \"beginner\": \"amateur\",\n            \"titties\": \"tits\",\n            \"my-little\": \"petite\",\n            \"trap\": \"stuck\",\n            \"tights\": \"pantyhose\",\n            \"fingers\": \"fingering\",\n            \"pounds\": \"pounding\",\n            \"sex\": \"hardcore\"\n        };\n        // Apply mappings\n        if (tagMappings[normalized]) {\n            normalized = tagMappings[normalized];\n        }\n        return normalized;\n    }\n    async processXHamsterUrl(originalUrl) {\n        try {\n            _src_lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Processing XHamster URL for metadata extraction\", {\n                url: originalUrl\n            });\n            // Fetch the HTML page\n            const response = await fetch(originalUrl, {\n                headers: {\n                    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`Failed to fetch XHamster page: ${response.status}`);\n            }\n            const html = await response.text();\n            // Extract metadata from various sources\n            const metadata = {};\n            // Extract title from meta tags or page title\n            const titleMatch = html.match(/<title[^>]*>([^<]+)<\\/title>/i) || html.match(/<meta[^>]*property=\"og:title\"[^>]*content=\"([^\"]*)\"[^>]*>/i) || html.match(/<meta[^>]*name=\"title\"[^>]*content=\"([^\"]*)\"[^>]*>/i);\n            if (titleMatch) {\n                metadata.title = titleMatch[1].trim();\n            }\n            // Extract description\n            const descMatch = html.match(/<meta[^>]*property=\"og:description\"[^>]*content=\"([^\"]*)\"[^>]*>/i) || html.match(/<meta[^>]*name=\"description\"[^>]*content=\"([^\"]*)\"[^>]*>/i);\n            if (descMatch) {\n                metadata.description = descMatch[1].trim();\n            }\n            // Extract thumbnail from og:image\n            const thumbMatch = html.match(/<meta[^>]*property=\"og:image\"[^>]*content=\"([^\"]*)\"[^>]*>/i);\n            if (thumbMatch) {\n                metadata.thumbnail = thumbMatch[1] // Use the captured group from og:image\n                ;\n            } else {\n                // Fallback: search for direct image URLs\n                const directImageMatch = html.match(/https:\\/\\/ic-vt-[^\"]*\\.xhpingcdn\\.com\\/[^\"]*\\.jpg/g) || html.match(/https:\\/\\/thumb-[^\"]*\\.xhpingcdn\\.com\\/[^\"]*\\.jpg/g);\n                if (directImageMatch) {\n                    metadata.thumbnail = Array.isArray(directImageMatch) ? directImageMatch[0] : directImageMatch;\n                }\n            }\n            // Extract preview URL from initials-script\n            const scriptPatterns = [\n                /<script id=\"initials-script\"[^>]*>([\\s\\S]*?)<\\/script>/i,\n                /<script[^>]*id=\"initials-script\"[^>]*>([\\s\\S]*?)<\\/script>/i,\n                /<script[^>]*initials[^>]*>([\\s\\S]*?)<\\/script>/i\n            ];\n            let scriptContent = null;\n            for (const pattern of scriptPatterns){\n                const match = html.match(pattern);\n                if (match) {\n                    scriptContent = match[1];\n                    break;\n                }\n            }\n            if (scriptContent) {\n                // Look for trailerURL in the script (more flexible regex)\n                const patterns = [\n                    /\"trailerURL\"\\s*:\\s*\"([^\"]*thumb-v[^\"]*\\.xhpingcdn\\.com[^\"]*\\.t\\.mp4[^\"]*)\"/gi,\n                    /\"trailerURL\"\\s*:\\s*\"([^\"]*thumb-v[^\"]*\\.xhpingcdn\\.com[^\"]*\\.mp4[^\"]*)\"/gi,\n                    /\"trailerURL\"\\s*:\\s*\"([^\"]*\\.mp4[^\"]*)\"/gi\n                ];\n                for (const pattern of patterns){\n                    const matches = scriptContent.match(pattern);\n                    if (matches && matches.length > 0) {\n                        // Get the first match and extract URL from capture group\n                        const firstMatch = matches[0].match(/\"trailerURL\"\\s*:\\s*\"([^\"]*)\"/i);\n                        if (firstMatch) {\n                            metadata.previewUrl = firstMatch[1].replace(/\\\\\\//g, \"/\");\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // Fallback: search the entire HTML for trailerURL\n                const patterns = [\n                    /\"trailerURL\"\\s*:\\s*\"([^\"]*thumb-v[^\"]*\\.xhpingcdn\\.com[^\"]*\\.t\\.mp4[^\"]*)\"/gi,\n                    /\"trailerURL\"\\s*:\\s*\"([^\"]*thumb-v[^\"]*\\.xhpingcdn\\.com[^\"]*\\.mp4[^\"]*)\"/gi,\n                    /\"trailerURL\"\\s*:\\s*\"([^\"]*\\.mp4[^\"]*)\"/gi\n                ];\n                for (const pattern of patterns){\n                    const matches = html.match(pattern);\n                    if (matches && matches.length > 0) {\n                        const firstMatch = matches[0].match(/\"trailerURL\"\\s*:\\s*\"([^\"]*)\"/i);\n                        if (firstMatch) {\n                            metadata.previewUrl = firstMatch[1].replace(/\\\\\\//g, \"/\");\n                            break;\n                        }\n                    }\n                }\n            }\n            // Enhanced tags extraction from multiple sources\n            const tags = new Set();\n            // 1. Extract from keywords meta tag\n            const keywordsMatch = html.match(/<meta[^>]*name=\"keywords\"[^>]*content=\"([^\"]*)\"[^>]*>/i);\n            if (keywordsMatch) {\n                keywordsMatch[1].split(\",\").forEach((tag)=>{\n                    const cleanTag = tag.trim().toLowerCase();\n                    if (cleanTag && cleanTag.length > 2) {\n                        tags.add(cleanTag);\n                    }\n                });\n            }\n            // 2. Extract from visible category and tag links in HTML (more reliable approach)\n            // Extract category links like: href=\"https://fra.xhamster.com/categories/teen\"\n            const categoryLinksRegex = /href=\"[^\"]*\\/categories\\/([^\"]+)\"[^>]*>\\s*<[^>]*>\\s*([^<]+)</g;\n            let categoryMatch;\n            while((categoryMatch = categoryLinksRegex.exec(html)) !== null){\n                const categorySlug = categoryMatch[1]?.trim();\n                const categoryText = categoryMatch[2]?.trim();\n                if (categorySlug && this.isValidContentTag(categorySlug)) {\n                    tags.add(categorySlug.toLowerCase());\n                }\n                if (categoryText && categoryText !== categorySlug && this.isValidContentTag(categoryText)) {\n                    const normalized = this.normalizeTag(categoryText);\n                    if (normalized) tags.add(normalized);\n                }\n            }\n            // Extract tag links like: href=\"https://fra.xhamster.com/tags/freeuse\"\n            const tagLinksRegex = /href=\"[^\"]*\\/tags\\/([^\"]+)\"[^>]*>\\s*<[^>]*>\\s*([^<]+)</g;\n            let tagMatch;\n            while((tagMatch = tagLinksRegex.exec(html)) !== null){\n                const tagSlug = tagMatch[1]?.trim();\n                const tagText = tagMatch[2]?.trim();\n                if (tagSlug && this.isValidContentTag(tagSlug)) {\n                    tags.add(tagSlug.toLowerCase());\n                }\n                if (tagText && tagText !== tagSlug && this.isValidContentTag(tagText)) {\n                    const normalized = this.normalizeTag(tagText);\n                    if (normalized) tags.add(normalized);\n                }\n            }\n            // 3. Extract channel/pornstar names from links\n            const pornstarLinksRegex = /href=\"[^\"]*\\/pornstars\\/([^\"]+)\"[^>]*>[\\s\\S]*?alt=\"([^\"]*)\"[^>]*>/g;\n            let pornstarMatch;\n            while((pornstarMatch = pornstarLinksRegex.exec(html)) !== null){\n                const pornstarName = pornstarMatch[2]?.trim();\n                if (pornstarName && this.isValidContentTag(pornstarName)) {\n                    const normalized = this.normalizeTag(pornstarName);\n                    if (normalized && normalized !== \"image\" && normalized !== \"avatar\") {\n                        tags.add(normalized);\n                    }\n                }\n            }\n            // 4. Extract from JSON data (more targeted approach)\n            if (scriptContent) {\n                try {\n                    // Look for specific tag arrays that contain actual content tags\n                    const tagArrayPattern = /\"tags\"\\s*:\\s*\\[([^\\]]*\"[^\"]*\"[^\\]]*)\\]/g;\n                    const tagArrayMatches = scriptContent.match(tagArrayPattern);\n                    if (tagArrayMatches) {\n                        tagArrayMatches.forEach((match)=>{\n                            const tagStringArray = match.match(/\"([^\"]{2,30})\"/g);\n                            if (tagStringArray) {\n                                tagStringArray.forEach((tagStr)=>{\n                                    const tag = tagStr.replace(/\"/g, \"\").trim();\n                                    if (this.isValidContentTag(tag)) {\n                                        const normalized = this.normalizeTag(tag);\n                                        if (normalized) tags.add(normalized);\n                                    }\n                                });\n                            }\n                        });\n                    }\n                    // Look for category objects with names\n                    const categoryPattern = /\"categories\"\\s*:\\s*\\[[^\\]]*\"name\"\\s*:\\s*\"([^\"]+)\"[^\\]]*\\]/g;\n                    const categoryMatches = scriptContent.match(categoryPattern);\n                    if (categoryMatches) {\n                        categoryMatches.forEach((match)=>{\n                            const nameMatch = match.match(/\"name\"\\s*:\\s*\"([^\"]+)\"/g);\n                            if (nameMatch) {\n                                nameMatch.forEach((name)=>{\n                                    const categoryName = name.match(/\"name\"\\s*:\\s*\"([^\"]+)\"/)?.[1];\n                                    if (categoryName && this.isValidContentTag(categoryName)) {\n                                        const normalized = this.normalizeTag(categoryName);\n                                        if (normalized) tags.add(normalized);\n                                    }\n                                });\n                            }\n                        });\n                    }\n                } catch (error) {\n                    _src_lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"Error parsing JSON content for tags\", {\n                        error\n                    });\n                }\n            }\n            // 5. Extract from video-specific metadata patterns and other HTML elements\n            const videoTagsPattern = /<span[^>]*class=\"[^\"]*tag[^\"]*\"[^>]*>([^<]+)<\\/span>/gi;\n            let videoTagMatch;\n            while((videoTagMatch = videoTagsPattern.exec(html)) !== null){\n                const tagName = videoTagMatch[1].trim();\n                if (tagName && this.isValidContentTag(tagName)) {\n                    const normalized = this.normalizeTag(tagName);\n                    if (normalized) tags.add(normalized);\n                }\n            }\n            // 6. Extract quality indicators and content type from title/description\n            const titleLower = (metadata.title || \"\").toLowerCase();\n            const descLower = (metadata.description || \"\").toLowerCase();\n            const combinedText = `${titleLower} ${descLower}`;\n            // Quality tags\n            if (combinedText.includes(\"4k\") || combinedText.includes(\"ultra hd\")) tags.add(\"4k\");\n            if (combinedText.includes(\"hd\") && !tags.has(\"4k\")) tags.add(\"hd\");\n            if (combinedText.includes(\"60fps\")) tags.add(\"60fps\");\n            if (combinedText.includes(\"vr\")) tags.add(\"vr\");\n            // Content type tags\n            if (combinedText.includes(\"amateur\")) tags.add(\"amateur\");\n            if (combinedText.includes(\"professional\")) tags.add(\"professional\");\n            if (combinedText.includes(\"webcam\")) tags.add(\"webcam\");\n            if (combinedText.includes(\"homemade\")) tags.add(\"homemade\");\n            // Activity tags (common ones)\n            const activityTags = [\n                \"solo\",\n                \"couple\",\n                \"threesome\",\n                \"group\",\n                \"lesbian\",\n                \"gay\",\n                \"straight\",\n                \"anal\",\n                \"oral\",\n                \"masturbation\",\n                \"blowjob\",\n                \"handjob\",\n                \"footjob\",\n                \"massage\",\n                \"stripteasing\",\n                \"dancing\",\n                \"shower\",\n                \"bath\",\n                \"outdoor\",\n                \"public\",\n                \"car\",\n                \"office\",\n                \"bedroom\",\n                \"kitchen\",\n                \"bathroom\"\n            ];\n            activityTags.forEach((activityTag)=>{\n                if (combinedText.includes(activityTag)) {\n                    tags.add(activityTag);\n                }\n            });\n            // Demographic tags\n            const demographicTags = [\n                \"teen\",\n                \"milf\",\n                \"mature\",\n                \"granny\",\n                \"young\",\n                \"old\",\n                \"blonde\",\n                \"brunette\",\n                \"redhead\",\n                \"black hair\",\n                \"asian\",\n                \"latina\",\n                \"ebony\",\n                \"white\",\n                \"bbw\",\n                \"thin\",\n                \"curvy\",\n                \"big tits\",\n                \"small tits\",\n                \"big ass\",\n                \"small ass\",\n                \"tattoo\",\n                \"piercing\",\n                \"hairy\",\n                \"shaved\"\n            ];\n            demographicTags.forEach((demoTag)=>{\n                if (combinedText.includes(demoTag)) {\n                    tags.add(demoTag.replace(\" \", \"-\"));\n                }\n            });\n            // Convert Set to Array and apply tag normalization\n            let finalTags = Array.from(tags);\n            // Normalize and clean up tags\n            finalTags = finalTags.map((tag)=>this.normalizeTag(tag)).filter((tag)=>tag && tag.length >= 2 && tag.length <= 30).filter((tag, index, array)=>array.indexOf(tag) === index) // Remove duplicates\n            ;\n            // Removed tag limit - allow all relevant tags\n            metadata.tags = finalTags.length > 0 ? finalTags : undefined;\n            _src_lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"XHamster metadata extracted\", {\n                url: originalUrl,\n                hasTitle: !!metadata.title,\n                hasDescription: !!metadata.description,\n                hasThumbnail: !!metadata.thumbnail,\n                hasPreviewUrl: !!metadata.previewUrl,\n                tagsCount: metadata.tags?.length || 0\n            });\n            return metadata;\n        } catch (error) {\n            _src_lib_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to process XHamster URL\", {\n                url: originalUrl,\n                error: error instanceof Error ? error.message : error\n            });\n            throw error;\n        }\n    }\n}\nconst xHamsterService = new XHamsterServiceImpl();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/services/xhamster.service.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fusers%2F%5Bid%5D%2Fvideos&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fusers%2F%5Bid%5D%2Fvideos.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();